AWSTemplateFormatVersion: 2010-09-09
Description: Template for Lambda and API gateway

Parameters:
  S3Bucket:
    Description: S3 Bucket of assets
    Type: String

  S3Key:
    Description: S3 Bucket of assets
    Type: String

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
  
  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: VPC Private Subnet1 ID
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: VPC Private Subnet2 ID
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: VPC Public Subnet1 ID
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: VPC Public Subnet1 ID
      
  OpensearchEndpoint:
    Type: String
    Description: OpensearchEndpoint
  
  EfsAccessPointArn:
    Type: String
    Description: Arn of Efs access point

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: VPC SecurityGroup

  Eip1:
    Type: String
    Description: EIP for Nat1 

  Eip2:
    Type: String
    Description: EIP for Nat2

  ChinaRegion: 
    Description: Check if the stack to be in CN Region
    Type: String
    Default: false
    AllowedValues: [ true, false ]

Conditions:
  Globally: !Equals [ false, !Ref ChinaRegion ]

Resources:
  HelperLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.9
      Content:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_helper.zip
      Description: Helper layer for DynamoDB, SSM, ane ES
      LayerName: all_in_one_ai_helper
      LicenseInfo: MIT

  SageMakerLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.9
      Content:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_sagemaker.zip
      Description: SageMaker layer
      LayerName: all_in_one_ai_sagemaker
      LicenseInfo: MIT

  ToolsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_tools.zip
      Description: Tools layer
      LayerName: all_in_one_ai_tools
      LicenseInfo: MIT

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Parameters:
        endpointConfigurationTypes: REGIONAL
      BinaryMediaTypes:
        - 'image/png'
        - 'image/jpg'
        - 'image/jpeg'
      Name: all-in-one-ai-api 
      Policy: 
        !If
          - Globally
          - !Sub 
            - |
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": "*",
                        "Action": "execute-api:Invoke",
                        "Resource": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*",
                        "Condition": {
                            "IpAddress": {
                                "aws:SourceIp": [
                                    "${Eip1}/32",
                                    "${Eip2}/32"
                                ]
                            }
                        }
                    }
                ]
              }
            - Eip1 : !Ref Eip1
              Eip2 : !Ref Eip2
          - !Sub 
            - |
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": "*",
                        "Action": "execute-api:Invoke",
                        "Resource": "arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*",
                        "Condition": {
                            "IpAddress": {
                                "aws:SourceIp": [
                                    "${Eip1}/32",
                                    "${Eip2}/32"
                                ]
                            }
                        }
                    }
                ]
              }
            - Eip1 : !Ref Eip1
              Eip2 : !Ref Eip2

  ApiGatewayResourceAnnotation:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'annotation'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodAnnotationGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIAnnotationFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIAnnotationFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceAnnotation
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayMethodAnnotationPost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIAnnotationFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIAnnotationFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceAnnotation
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayMethodAnnotationDelete:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: DELETE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIAnnotationFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIAnnotationFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceAnnotation
      RestApiId: !Ref ApiGatewayRestApi 

  AllInOneAIAnnotationFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
  
  AllInOneAIAnnotationFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_annotation
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIAnnotationFunctionRole

  AllInOneAIAnnotationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_annotation.zip
      FunctionName: all_in_one_ai_annotation
      Tags:
        - Value: Name
          Key: 'AllInOneAIAnnotation'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIAnnotationFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Environment:
        Variables:
          ES_ENDPOINT: !Sub https://${OpensearchEndpoint}
      Layers:
        - !Ref HelperLayer

  AllInOneAIAnnotationFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIAnnotationFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/annotation
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/annotation
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAIAnnotationFunctionCatchAllPermissionProd2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIAnnotationFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/annotation
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/annotation
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAIAnnotationFunctionCatchAllPermissionProd3:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIAnnotationFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/annotation
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/annotation
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  ApiGatewayResourceApi:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'api'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodApiGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIApiFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIApiFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceApi
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayMethodApiPost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIApiFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIApiFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceApi
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayResourceApiByName:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceApi.ResourceId
      PathPart: '{api_name}'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodApiByNameGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIApiFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIApiFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceApiByName
      RestApiId: !Ref ApiGatewayRestApi   
  
  AllInOneAIApiFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator'
          - 'arn:aws-cn:iam::aws:policy/AmazonAPIGatewayAdministrator'
  
  AllInOneAIApiFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_api
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIApiFunctionRole

  AllInOneAIApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_api.zip
      FunctionName: all_in_one_ai_api
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIApiFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer

  AllInOneAIApiFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIApiFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/api
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/api
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        
  AllInOneAIApiFunctionCatchAllPermissionProd2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIApiFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/api/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/api/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAIApiFunctionCatchAllPermissionProd3:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIApiFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/api
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/api
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  ApiGatewayResourceEndpoint:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'endpoint'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodEndpointGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIEndpointFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIEndpointFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceEndpoint
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayMethodEndpointPost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIEndpointFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIApiFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceEndpoint
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayResourceEndpointByName:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceEndpoint.ResourceId
      PathPart: '{endpoint_name}'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodEndpointByNameGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIEndpointFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIEndpointFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceEndpointByName
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayMethodEndpointByNameDelete:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: DELETE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIEndpointFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIEndpointFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceEndpointByName
      RestApiId: !Ref ApiGatewayRestApi 
  
  AllInOneAIEndpointFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'
  
  AllInOneAIEndpointFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_endpoint
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIEndpointFunctionRole

  AllInOneAIEndpointFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_endpoint.zip
      FunctionName: all_in_one_ai_endpoint
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIEndpointFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer

  AllInOneAIEndpointFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIEndpointFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/endpoint
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/endpoint
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        
  AllInOneAIEndpointFunctionCatchAllPermissionProd2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIEndpointFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/endpoint/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/endpoint/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAIEndpointFunctionCatchAllPermissionProd3:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIEndpointFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/endpoint
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/endpoint
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAIEndpointFunctionCatchAllPermissionProd4:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIEndpointFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/endpoint/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/endpoint/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  ApiGatewayResourceFunction:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'function'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceFunctionByName:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceFunction.ResourceId
      PathPart: '{function_name}'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodFunctionByNameGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIFunctionFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIFunctionFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceFunctionByName
      RestApiId: !Ref ApiGatewayRestApi   

  AllInOneAIFunctionFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AWSLambda_FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AWSLambda_FullAccess'
  
  AllInOneAIFunctionFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_function
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIFunctionFunctionRole

  AllInOneAIFunctionFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_function.zip
      FunctionName: all_in_one_ai_function
      Tags:
        - Value: Name
          Key: 'AllInOneAIFunction'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIFunctionFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIFunctionFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIFunctionFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/function/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/function/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  ApiGatewayResourceGreengrass:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'greengrass'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceGreengrassComponent:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceGreengrass.ResourceId
      PathPart: 'component'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodGreengrassComponentGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIGreengrassComponentVersionFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIGreengrassComponentVersionFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceGreengrassComponent
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayResourceGreengrassComponentByName:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceGreengrassComponent.ResourceId
      PathPart: '{component_name}'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodGreengrassComponentByNameGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIGreengrassComponentVersionFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIGreengrassComponentVersionFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceGreengrassComponentByName
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayMethodGreengrassComponentByNamePost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIGreengrassComponentVersionFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIGreengrassComponentVersionFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceGreengrassComponentByName
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayResourceGreengrassComponentByVersionId:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceGreengrassComponentByName.ResourceId
      PathPart: '{component_version_arn}'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodGreengrassComponentByVersionIdGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIGreengrassComponentVersionFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIGreengrassComponentVersionFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceGreengrassComponentByVersionId
      RestApiId: !Ref ApiGatewayRestApi   
  
  AllInOneAIGreengrassComponentVersionFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AWSGreengrassFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AWSGreengrassFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'
  
  AllInOneAIGreengrassComponentVersionFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_greengrass_component_version
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIGreengrassComponentVersionFunctionRole

  AllInOneAIGreengrassComponentVersionFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_greengrass_component_version.zip
      FunctionName: all_in_one_ai_greengrass_component_version
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIGreengrassComponentVersionFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer

  AllInOneAIGreengrassComponentVersionFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIGreengrassComponentVersionFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/greengrass/component
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/greengrass/component
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        
  AllInOneAIGreengrassComponentVersionFunctionCatchAllPermissionProd2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIGreengrassComponentVersionFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/greengrass/component/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/greengrass/component/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi


  AllInOneAIGreengrassComponentVersionFunctionCatchAllPermissionProd3:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIGreengrassComponentVersionFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/greengrass/component
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/greengrass/component
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAIGreengrassComponentVersionFunctionCatchAllPermissionProd4:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIGreengrassComponentVersionFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/greengrass/component/*/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/greengrass/component/*/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAIGreengrassComponentVersionFunctionCatchAllPermissionProd5:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIGreengrassComponentVersionFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/greengrass/component/*/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/greengrass/component/*/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  ApiGatewayResourceGreengrassCoreDevices:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceGreengrass.ResourceId
      PathPart: 'coredevices'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodGreengrassCoreDevicesGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIGreengrassCoreDevicesFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIGreengrassCoreDevicesFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceGreengrassCoreDevices
      RestApiId: !Ref ApiGatewayRestApi   

  AllInOneAIGreengrassCoreDevicesFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AWSGreengrassFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AWSGreengrassFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'
  
  AllInOneAIGreengrassCoreDevicesFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_greengrass_coredevices
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIGreengrassCoreDevicesFunctionRole

  AllInOneAIGreengrassCoreDevicesFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_greengrass_core_devices.zip
      FunctionName: all_in_one_ai_greengrass_core_devices
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIGreengrassCoreDevicesFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIGreengrassCoreDevicesFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIGreengrassCoreDevicesFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/greengrass/coredevices
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/greengrass/coredevices
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  ApiGatewayResourceGreengrassDeployment:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceGreengrass.ResourceId
      PathPart: 'deployment'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodGreengrassDeploymentGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIGreengrassDeploymentFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIGreengrassDeploymentFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceGreengrassDeployment
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayMethodGreengrassDeploymentPost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIGreengrassDeploymentFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIGreengrassDeploymentFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceGreengrassDeployment
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayResourceGreengrassDeploymentById:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceGreengrassDeployment.ResourceId
      PathPart: '{deployment_id}'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodGreengrassDeploymentByIdGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIGreengrassDeploymentFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIGreengrassDeploymentFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceGreengrassDeploymentById
      RestApiId: !Ref ApiGatewayRestApi   

  AllInOneAIGreengrassDeploymentFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AWSGreengrassFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AWSGreengrassFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AWSIoTFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AWSIoTFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'
  
  AllInOneAIGreengrassDeploymentFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_greengrass_deployment
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIGreengrassDeploymentFunctionRole

  AllInOneAIGreengrassDeploymentFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_greengrass_deployment.zip
      FunctionName: all_in_one_ai_greengrass_deployment
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIGreengrassDeploymentFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer

  AllInOneAIGreengrassDeploymentFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIGreengrassDeploymentFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/greengrass/deployment
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/greengrass/deployment
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        
  AllInOneAIGreengrassDeploymentFunctionCatchAllPermissionProd2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIGreengrassDeploymentFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/greengrass/deployment/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/greengrass/deployment/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi


  AllInOneAIGreengrassDeploymentFunctionCatchAllPermissionProd3:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIGreengrassDeploymentFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/greengrass/deployment
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/greengrass/deployment
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
  
  ApiGatewayResourceGreengrassThingGroups:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceGreengrass.ResourceId
      PathPart: 'thinggroups'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodGreengrassThingGroupsGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIGreengrassThingGroupsFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIGreengrassThingGroupsFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceGreengrassThingGroups
      RestApiId: !Ref ApiGatewayRestApi   

  AllInOneAIGreengrassThingGroupsFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AWSIoTFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AWSIoTFullAccess'
  
  AllInOneAIGreengrassThingGroupsFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_greengrass_thing_groups
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIGreengrassThingGroupsFunctionRole

  AllInOneAIGreengrassThingGroupsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_greengrass_thing_groups.zip
      FunctionName: all_in_one_ai_greengrass_thing_groups
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIGreengrassThingGroupsFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIGreengrassThingGroupsFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIGreengrassThingGroupsFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/greengrass/thinggroups
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/greengrass/thinggroups
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  ApiGatewayResourceIndustrialModel:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'industrialmodel'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodIndustrialModelGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIIndustrialModelFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIIndustrialModelFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceIndustrialModel
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayMethodIndustrialModelPost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIIndustrialModelFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIIndustrialModelFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceIndustrialModel
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayResourceIndustrialModelById:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceIndustrialModel.ResourceId
      PathPart: '{model_id}'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodIndustrialModelByIdGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIIndustrialModelFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIIndustrialModelFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceIndustrialModelById
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayMethodIndustrialModelByIdPost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIIndustrialModelFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIIndustrialModelFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceIndustrialModelById
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayMethodIndustrialModelByIdDelete:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: DELETE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIIndustrialModelFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIIndustrialModelFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceIndustrialModelById
      RestApiId: !Ref ApiGatewayRestApi   

  AllInOneAIIndustrialModelFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'
  
  AllInOneAIIndustrialModelFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_industrial_model
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIIndustrialModelFunctionRole

  AllInOneAIIndustrialModelFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_industrial_model.zip
      FunctionName: all_in_one_ai_industrial_model
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIIndustrialModelFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer

  AllInOneAIIndustrialModelFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIIndustrialModelFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/industrialmodel
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/industrialmodel
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAIIndustrialModelFunctionCatchAllPermissionProd2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIIndustrialModelFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/industrialmodel
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/industrialmodel
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAIIndustrialModelFunctionCatchAllPermissionProd3:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIIndustrialModelFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/industrialmodel/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/industrialmodel/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAIIndustrialModelFunctionCatchAllPermissionProd4:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIIndustrialModelFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/industrialmodel/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/industrialmodel/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAIIndustrialModelFunctionCatchAllPermissionProd5:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIIndustrialModelFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/industrialmodel/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/industrialmodel/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  ApiGatewayResourceInference:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'inference'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodInferencePost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIInferenceFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIInferenceFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceInference
      RestApiId: !Ref ApiGatewayRestApi   

  AllInOneAIInferenceFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'
  
  AllInOneAIInferenceFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_inference
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIInferenceFunctionRole

  AllInOneAIInferenceFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_inference.zip
      FunctionName: all_in_one_ai_inference
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIInferenceFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIInferenceFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIInferenceFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/inference
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/inference
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  ApiGatewayResourceModel:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'model'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodModelGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIModelFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIModelFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceModel
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayMethodModelPost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIModelFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIApiFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceModel
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayResourceModelByName:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceModel.ResourceId
      PathPart: '{model_name}'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodModelByNameGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIModelFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIModelFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceModelByName
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayMethodModelByNameDelete:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: DELETE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIModelFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIModelFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceModelByName
      RestApiId: !Ref ApiGatewayRestApi 
  
  AllInOneAIModelFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'
  
  AllInOneAIModelFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_model
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIModelFunctionRole

  AllInOneAIModelFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_model.zip
      FunctionName: all_in_one_ai_model
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIModelFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer

  AllInOneAIModelFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIModelFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/model
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/model
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        
  AllInOneAIModelFunctionCatchAllPermissionProd2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIModelFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/model/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/model/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAIModelFunctionCatchAllPermissionProd3:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIModelFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/model
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/model
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAIModelFunctionCatchAllPermissionProd4:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIModelFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/model/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/DELETE/model/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  ApiGatewayResourceModelPackage:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'modelpackage'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodModelPackageGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIModelPackageFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIModelPackageFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceModelPackage
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayResourceModelPackageGroup:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceModelPackage.ResourceId
      PathPart: 'group'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodModelPackageGroupGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIModelPackageGroupFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIModelPackageGroupFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceModelPackageGroup
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayMethodModelPackageGroupPost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIModelPackageGroupFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIModelPackageGroupFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceModelPackageGroup
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayResourceModelPackageByName:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceModelPackage.ResourceId
      PathPart: '{model_package_group_name}'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodModelPackageByNameGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIModelPackageFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIModelPackageFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceModelPackageByName
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayMethodModelPackageByNamePost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIModelPackageFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIModelPackageFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceModelPackageByName
      RestApiId: !Ref ApiGatewayRestApi   

  AllInOneAIModelPackageFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'
  
  AllInOneAIModelPackageFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_model_package
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIModelPackageFunctionRole

  AllInOneAIModelPackageFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_model_package.zip
      FunctionName: all_in_one_ai_model_package
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIModelPackageFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer

  AllInOneAIModelPackageFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIModelPackageFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/modelpackage
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/modelpackage
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        
  AllInOneAIModelPackageFunctionCatchAllPermissionProd2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIModelPackageFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/modelpackage/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/modelpackage/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAIModelPackageFunctionCatchAllPermissionProd3:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIModelPackageFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/modelpackage/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/modelpackage/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAIModelPackageGroupFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
  
  AllInOneAIModelPackageGroupFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_model_package_group
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIModelPackageGroupFunctionRole

  AllInOneAIModelPackageGroupFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_model_package_group.zip
      FunctionName: all_in_one_ai_model_package_group
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIModelPackageGroupFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer

  AllInOneAIModelPackageGroupFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIModelPackageGroupFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/modelpackage/group
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/modelpackage/group
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        
  AllInOneAIModelPackageGroupFunctionCatchAllPermissionProd2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIModelPackageGroupFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/modelpackage/group
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/modelpackage/group
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  ApiGatewayResourceS3:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 's3'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodS3Get:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIS3Function.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIS3Function.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceS3
      RestApiId: !Ref ApiGatewayRestApi   

  AllInOneAIS3FunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
  
  AllInOneAIS3FunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_s3
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIS3FunctionRole

  AllInOneAIS3Function:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_s3.zip
      FunctionName: all_in_one_ai_s3
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIS3FunctionRole.Arn
      Timeout: 900
      MemorySize: 2048
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIS3FunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIS3Function
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/s3
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/s3
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  ApiGatewayResourceSearch:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'search'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayResourceSearchImage:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceSearch.ResourceId
      PathPart: 'image'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodSearchImage:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAISearchByImageFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAISearchByImageFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceSearchImage
      RestApiId: !Ref ApiGatewayRestApi   

  AllInOneAISearchByImageFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'
  
  AllInOneAISearchByImageFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_search_by_image
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAISearchByImageFunctionRole

  AllInOneAISearchByImageFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_search_by_image.zip
      FunctionName: all_in_one_ai_search_by_image
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAISearchByImageFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Environment:
        Variables:
          ES_ENDPOINT: !Sub https://${OpensearchEndpoint}
      Layers:
        - !Ref HelperLayer
  
  AllInOneAISearchByImageFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAISearchByImageFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/search/image
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/search/image
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
  
  ApiGatewayResourceSearchImport:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceSearch.ResourceId
      PathPart: 'import'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodSearchImportGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIImportOpensearchFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIImportOpensearchFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceSearchImport
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayMethodSearchImportPost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIImportOpensearchFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIImportOpensearchFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceSearchImport
      RestApiId: !Ref ApiGatewayRestApi   

  AllInOneAIImportOpensearchFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'
  
  AllInOneAIImportOpensearchFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_import_opensearch
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIImportOpensearchFunctionRole

  AllInOneAIImportOpensearchFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_import_opensearch.zip
      FunctionName: all_in_one_ai_import_opensearch
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIImportOpensearchFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Environment:
        Variables:
          ES_ENDPOINT: !Sub https://${OpensearchEndpoint}
      Layers:
        - !Ref HelperLayer
  
  AllInOneAIImportOpensearchFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIImportOpensearchFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/search/import
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/search/import
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAIImportOpensearchFunctionCatchAllPermissionProd2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIImportOpensearchFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/search/import
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/search/import
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  ApiGatewayResourceTrainingJob:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'trainingjob'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodTrainingJobGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAITrainingJobFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAITrainingJobFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceTrainingJob
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayMethodTrainingJobPost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAITrainingJobFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAITrainingJobFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceTrainingJob
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayResourceTrainingJobByName:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceTrainingJob.ResourceId
      PathPart: '{training_job_name}'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodTrainingJobByNameGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAITrainingJobFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAITrainingJobFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceTrainingJobByName
      RestApiId: !Ref ApiGatewayRestApi   

  AllInOneAITrainingJobFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'
  
  AllInOneAITrainingJobFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_training_job
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAITrainingJobFunctionRole

  AllInOneAITrainingJobFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_training_job.zip
      FunctionName: all_in_one_ai_training_job
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAITrainingJobFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer
  
  AllInOneAITrainingJobFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAITrainingJobFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/trainingjob
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/trainingjob
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAITrainingJobFunctionCatchAllPermissionProd2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAITrainingJobFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/trainingjob
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/trainingjob
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAITrainingJobFunctionCatchAllPermissionProd3:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAITrainingJobFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/trainingjob/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/trainingjob/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  ApiGatewayResourceTransformJob:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'transformjob'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodTransformJobGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAITransformJobFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAITransformJobFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceTransformJob
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayMethodTransformJobPost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAITransformJobFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAITransformJobFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceTransformJob
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayResourceTransformJobByName:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceTransformJob.ResourceId
      PathPart: '{transform_job_name}'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodTransformJobByNameGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAITransformJobFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAITransformJobFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceTransformJobByName
      RestApiId: !Ref ApiGatewayRestApi   

  AllInOneAITransformJobFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'
  
  AllInOneAITransformJobFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_transform_job
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAITransformJobFunctionRole

  AllInOneAITransformJobFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_transform_job.zip
      FunctionName: all_in_one_ai_transform_job
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAITransformJobFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer
  
  AllInOneAITransformJobFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAITransformJobFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/transformjob
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/transformjob
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAITransformJobFunctionCatchAllPermissionProd2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAITransformJobFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/transformjob
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/transformjob
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAITransformJobFunctionCatchAllPermissionProd3:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAITransformJobFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/transformjob/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/transformjob/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  ApiGatewayResourceTransformJobByNameReview:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayResourceTransformJobByName.ResourceId
      PathPart: 'review'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodTransformJobByNameReviewGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAITransformJobReviewFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAITransformJobReviewFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceTransformJobByNameReview
      RestApiId: !Ref ApiGatewayRestApi   

  AllInOneAITransformJobReviewFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'
  
  AllInOneAITransformJobReviewFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_transform_job_review
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAITransformJobReviewFunctionRole

  AllInOneAITransformJobReviewFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_transform_job_review.zip
      FunctionName: all_in_one_ai_transform_job_review
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAITransformJobReviewFunctionRole.Arn
      Timeout: 900
      MemorySize: 2048
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer

  AllInOneAITransformJobReviewFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAITransformJobReviewFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/transformjob/*/review
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/transformjob/*/review
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAICreateApiFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/IAMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/IAMFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator'
          - 'arn:aws-cn:iam::aws:policy/AmazonAPIGatewayAdministrator'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AWSLambda_FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AWSLambda_FullAccess'
    
  AllInOneAICreateApiFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_create_api
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAICreateApiFunctionRole

  AllInOneAICreateApiFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_create_api.zip
      FunctionName: all_in_one_ai_create_api
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAICreateApiFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
  
  AllInOneAICreateEndpointFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
  
  AllInOneAICreateEndpointFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_create_endpoint
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAICreateEndpointFunctionRole

  AllInOneAICreateEndpointFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_create_endpoint.zip
      FunctionName: all_in_one_ai_create_endpoint
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAICreateEndpointFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAICreateModelFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
    
  AllInOneAICreateModelFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_create_model
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAICreateModelFunctionRole

  AllInOneAICreateModelFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_create_model.zip
      FunctionName: all_in_one_ai_create_model
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAICreateModelFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  ApiGatewayResourcePipeline:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'pipeline'
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodPipelineGet:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIPipelineFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIPipelineFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourcePipeline
      RestApiId: !Ref ApiGatewayRestApi   

  ApiGatewayMethodPipelinePost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIPipelineFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIPipelineFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourcePipeline
      RestApiId: !Ref ApiGatewayRestApi   

  AllInOneAIPipelineFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'
  
  AllInOneAIPipelineFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_pipeline
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIPipelineFunctionRole

  AllInOneAIPipelineFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_pipeline.zip
      FunctionName: all_in_one_ai_pipeline
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIPipelineFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer

  AllInOneAIPipelineFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIPipelineFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/pipeline
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/pipeline
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        
  AllInOneAIPipelineFunctionCatchAllPermissionProd2:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIPipelineFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/pipeline
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/pipeline
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAIPipelineFunctionCatchAllPermissionProd3:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIPipelineFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/pipeline/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/pipeline/*
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  ApiGatewayResourceTrain:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'train'
      RestApiId: !Ref ApiGatewayRestApi 

  ApiGatewayMethodTrainPost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAITrainFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAITrainFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceTrain
      RestApiId: !Ref ApiGatewayRestApi   

  AllInOneAITrainFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'
  
  AllInOneAITrainFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_train
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAITrainFunctionRole

  AllInOneAITrainFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_train.zip
      FunctionName: all_in_one_ai_train
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAITrainFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer
        - !Ref SageMakerLayer

  AllInOneAITrainFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAITrainFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/train
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/train
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAICreateTrainGenericFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'   
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'    
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'

  AllInOneAICreateTrainGenericFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_create_train_generic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAICreateTrainGenericFunctionRole

  AllInOneAICreateTrainGenericFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_create_train_generic.zip
      FunctionName: all_in_one_ai_create_train_generic
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAICreateTrainGenericFunctionRole.Arn
      Timeout: 900
      MemorySize: 2048
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer
        - !Ref SageMakerLayer
      FileSystemConfigs:
        - Arn: !Ref EfsAccessPointArn
          LocalMountPath: "/mnt/efs"

  AllInOneAICreateTrainPyTorchFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'   
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess' 
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'   
  
  AllInOneAICreateTrainPyTorchFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_create_train_pytorch
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAICreateTrainPyTorchFunctionRole

  AllInOneAICreateTrainPyTorchFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_create_train_pytorch.zip
      FunctionName: all_in_one_ai_create_train_pytorch
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAICreateTrainPyTorchFunctionRole.Arn
      Timeout: 900
      MemorySize: 2048    
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer
        - !Ref SageMakerLayer
        - !Ref ToolsLayer
      FileSystemConfigs:
        - Arn: !Ref EfsAccessPointArn
          LocalMountPath: "/mnt/efs"

  AllInOneAICreateTrainMxnetFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'   
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'
  
  AllInOneAICreateTrainMxnetFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_create_train_mxnet
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAICreateTrainMxnetFunctionRole

  AllInOneAICreateTrainMxnetFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_create_train_mxnet.zip
      FunctionName: all_in_one_ai_create_train_mxnet
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAICreateTrainMxnetFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      MemorySize: 2048
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer
        - !Ref SageMakerLayer
      FileSystemConfigs:
        - Arn: !Ref EfsAccessPointArn
          LocalMountPath: "/mnt/efs"

  AllInOneAICreateTrainTensorFlowFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'   
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess' 
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'   
  
  AllInOneAICreateTrainTensorFlowFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_create_train_tensorflow
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAICreateTrainTensorFlowFunctionRole

  AllInOneAICreateTrainTensorFlowFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_create_train_tensorflow.zip
      FunctionName: all_in_one_ai_create_train_tensorflow
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAICreateTrainTensorFlowFunctionRole.Arn
      Timeout: 900
      MemorySize: 2048    
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer
        - !Ref SageMakerLayer
      FileSystemConfigs:
        - Arn: !Ref EfsAccessPointArn
          LocalMountPath: "/mnt/efs"
    
  AllInOneAICreateTrainHuggingfaceFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'   
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'    
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'

  AllInOneAICreateTrainHuggingfaceFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_create_train_huggingface
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAICreateTrainHuggingfaceFunctionRole

  AllInOneAICreateTrainHuggingfaceFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_create_train_huggingface.zip
      FunctionName: all_in_one_ai_create_train_huggingface
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAICreateTrainHuggingfaceFunctionRole.Arn
      Timeout: 900
      MemorySize: 2048
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer
        - !Ref SageMakerLayer
      FileSystemConfigs:
        - Arn: !Ref EfsAccessPointArn
          LocalMountPath: "/mnt/efs"

  ApiGatewayResourceDeploy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'deploy'
      RestApiId: !Ref ApiGatewayRestApi 

  ApiGatewayMethodDeployPost:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 
          !If
          - Globally
          - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIDeployFunction.Arn}/invocations'
          - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIDeployFunction.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResourceDeploy
      RestApiId: !Ref ApiGatewayRestApi   

  AllInOneAIDeployFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'

  AllInOneAIDeployFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_deploy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIDeployFunctionRole

  AllInOneAIDeployFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_deploy.zip
      FunctionName: all_in_one_ai_deploy
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIDeployFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer
        - !Ref SageMakerLayer

  AllInOneAIDeployFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIDeployFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/deploy
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/deploy
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayRestApi

  AllInOneAICreateDeployGenericFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'   
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'   
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'    
  
  AllInOneAICreateDeployGenericFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_create_deploy_generic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAICreateDeployGenericFunctionRole

  AllInOneAICreateDeployGenericFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_create_deploy_generic.zip
      FunctionName: all_in_one_ai_create_deploy_generic
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAICreateDeployGenericFunctionRole.Arn
      Timeout: 900
      MemorySize: 2048
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer
        - !Ref SageMakerLayer
      FileSystemConfigs:
        - Arn: !Ref EfsAccessPointArn
          LocalMountPath: "/mnt/efs"

  AllInOneAICreateDeployPyTorchFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'   
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'   
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'    
  
  AllInOneAICreateDeployPyTorchFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_create_deploy_pytorch
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAICreateDeployPyTorchFunctionRole

  AllInOneAICreateDeployPyTorchFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_create_deploy_pytorch.zip
      FunctionName: all_in_one_ai_create_deploy_pytorch
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAICreateDeployPyTorchFunctionRole.Arn
      Timeout: 900
      MemorySize: 2048
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer
        - !Ref SageMakerLayer
      FileSystemConfigs:
        - Arn: !Ref EfsAccessPointArn
          LocalMountPath: "/mnt/efs"

  AllInOneAICreateDeployMxnetFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'   
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'       
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'

  AllInOneAICreateDeployMxnetFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_create_deploy_mxnet
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAICreateDeployMxnetFunctionRole

  AllInOneAICreateDeployMxnetFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_create_deploy_mxnet.zip
      FunctionName: all_in_one_ai_create_deploy_mxnet
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAICreateDeployMxnetFunctionRole.Arn
      Timeout: 900
      MemorySize: 2048    
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer
        - !Ref SageMakerLayer
      FileSystemConfigs:
        - Arn: !Ref EfsAccessPointArn
          LocalMountPath: "/mnt/efs"

  AllInOneAICreateDeployTensorFlowFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'   
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'       
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'

  AllInOneAICreateDeployTensorFlowFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_create_deploy_tensorflow
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAICreateDeployTensorFlowFunctionRole

  AllInOneAICreateDeployTensorFlowFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_create_deploy_tensorflow.zip
      FunctionName: all_in_one_ai_create_deploy_tensorflow
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAICreateDeployTensorFlowFunctionRole.Arn
      Timeout: 900
      MemorySize: 2048
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer
        - !Ref SageMakerLayer
      FileSystemConfigs:
        - Arn: !Ref EfsAccessPointArn
          LocalMountPath: "/mnt/efs"

  AllInOneAICreateDeployHuggingfaceFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'   
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'   
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'          
  
  AllInOneAICreateDeployHuggingfaceFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_create_deploy_huggingface
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAICreateDeployHuggingfaceFunctionRole

  AllInOneAICreateDeployHuggingfaceFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_create_deploy_huggingface.zip
      FunctionName: all_in_one_ai_create_deploy_huggingface
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAICreateDeployHuggingfaceFunctionRole.Arn
      Timeout: 900
      MemorySize: 2048
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer
        - !Ref SageMakerLayer
      FileSystemConfigs:
        - Arn: !Ref EfsAccessPointArn
          LocalMountPath: "/mnt/efs"

  AllInOneAICreatePipelineFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'          
  
  AllInOneAICreatePipelineFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_create_pipeline
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAICreatePipelineFunctionRole

  AllInOneAICreatePipelineFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_create_pipeline.zip
      FunctionName: all_in_one_ai_create_pipeline
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAICreatePipelineFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref SageMakerLayer
  
  AllInOneAICreatePipelineHelperFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'
  
  AllInOneAICreatePipelineHelperFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_create_pipeline_helper
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAICreatePipelineHelperFunctionRole

  AllInOneAICreatePipelineHelperFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_create_pipeline_helper.zip
      FunctionName: all_in_one_ai_create_pipeline_helper
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAICreatePipelineHelperFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
  
  AllInOneAICreateTrainingJobFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
    
  AllInOneAICreateTrainingJobFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:  all_in_one_ai_create_training_job
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAICreateTrainingJobFunctionRole

  AllInOneAICreateTrainingJobFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_create_training_job.zip
      FunctionName: all_in_one_ai_create_training_job
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAICreateTrainingJobFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAICreateTransformJobFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
  
  AllInOneAICreateTransformJobFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_create_transform_job
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAICreateTransformJobFunctionRole

  AllInOneAICreateTransformJobFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_create_transform_job.zip
      FunctionName: all_in_one_ai_create_transform_job
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAICreateTransformJobFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIDeleteEndpointFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
    
  AllInOneAIDeleteEndpointFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:   all_in_one_ai_delete_endpoint
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIDeleteEndpointFunctionRole

  AllInOneAIDeleteEndpointFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_delete_endpoint.zip
      FunctionName: all_in_one_ai_delete_endpoint
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIDeleteEndpointFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIDeleteModelFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
    
  AllInOneAIDeleteModelFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:   all_in_one_ai_delete_model
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIDeleteModelFunctionRole

  AllInOneAIDeleteModelFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_delete_model.zip
      FunctionName: all_in_one_ai_delete_model
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIDeleteModelFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIDescribeEndpointFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
    
  AllInOneAIDescribeEndpointFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:   all_in_one_ai_describe_endpoint
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIDescribeEndpointFunctionRole

  AllInOneAIDescribeEndpointFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_describe_endpoint.zip
      FunctionName: all_in_one_ai_describe_endpoint
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIDescribeEndpointFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIDescribeModelFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
    
  AllInOneAIDescribeModelFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:   all_in_one_ai_describe_model
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIDescribeModelFunctionRole

  AllInOneAIDescribeModelFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_describe_model.zip
      FunctionName: all_in_one_ai_describe_model
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIDescribeModelFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIDescribePipelineExecutionFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
    
  AllInOneAIDescribePipelineExecutionFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:   all_in_one_ai_describe_pipeline_execution
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIDescribePipelineExecutionFunctionRole

  AllInOneAIDescribePipelineExecutionFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_describe_pipeline_execution.zip
      FunctionName: all_in_one_ai_describe_pipeline_execution
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIDescribePipelineExecutionFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIDescribeTrainingJobFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
    
  AllInOneAIDescribeTrainingJobFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:   all_in_one_ai_describe_training_job
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIDescribeTrainingJobFunctionRole

  AllInOneAIDescribeTrainingJobFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_describe_training_job.zip
      FunctionName: all_in_one_ai_describe_training_job
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIDescribeTrainingJobFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIDescribeTransformJobFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
    
  AllInOneAIDescribeTransformJobFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:   all_in_one_ai_describe_transform_job
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIDescribeTransformJobFunctionRole

  AllInOneAIDescribeTransformJobFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_describe_transform_job.zip
      FunctionName: all_in_one_ai_describe_transform_job
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIDescribeTransformJobFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIFinalizePipelineFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'
    
  AllInOneAIFinalizePipelineFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:   all_in_one_ai_finalize_pipeline
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIFinalizePipelineFunctionRole

  AllInOneAIFinalizePipelineFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_finalize_pipeline.zip
      FunctionName: all_in_one_ai_finalize_pipeline
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIFinalizePipelineFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer

  AllInOneAIGreengrassCreateComponentVersionFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AWSGreengrassFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AWSGreengrassFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonElasticFileSystemFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonElasticFileSystemFullAccess'
    
  AllInOneAIGreengrassCreateComponentVersionFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:   all_in_one_ai_greengrass_create_component_version
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIGreengrassCreateComponentVersionFunctionRole

  AllInOneAIGreengrassCreateComponentVersionFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_greengrass_create_component_version.zip
      FunctionName: all_in_one_ai_greengrass_create_component_version
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIGreengrassCreateComponentVersionFunctionRole.Arn
      Timeout: 900
      MemorySize: 2048
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      FileSystemConfigs:
      - Arn: !Ref EfsAccessPointArn
        LocalMountPath: "/mnt/efs"

  AllInOneAIGreengrassCreateDeploymentFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AWSIoTFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AWSIoTFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AWSGreengrassFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AWSGreengrassFullAccess'
    
  AllInOneAIGreengrassCreateDeploymentFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:   all_in_one_ai_greengrass_create_deployment
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIGreengrassCreateDeploymentFunctionRole

  AllInOneAIGreengrassCreateDeploymentFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_greengrass_create_deployment.zip
      FunctionName: all_in_one_ai_greengrass_create_deployment
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIGreengrassCreateDeploymentFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIImportOpensearchAsyncFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSSMFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
  
  AllInOneAIImportOpensearchAsyncFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_import_opensearch_async
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIImportOpensearchAsyncFunctionRole

  AllInOneAIImportOpensearchAsyncFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_import_opensearch_async.zip
      FunctionName: all_in_one_ai_import_opensearch_async
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIImportOpensearchAsyncFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer
        - !Ref SageMakerLayer

  AllInOneAIImportOpensearchSyncFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSQSFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
  
  AllInOneAIImportOpensearchSyncFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_import_opensearch_sync
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIImportOpensearchSyncFunctionRole

  AllInOneAIImportOpensearchSyncFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_import_opensearch_sync.zip
      FunctionName: all_in_one_ai_import_opensearch_sync
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIImportOpensearchSyncFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer

  AllInOneAIImportOpensearchAsyncHelperFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
  
  AllInOneAIImportOpensearchAsyncHelperFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_import_opensearch_async_helper
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIImportOpensearchAsyncHelperFunctionRole

  AllInOneAIImportOpensearchAsyncHelperFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_import_opensearch_async_helper.zip
      FunctionName: all_in_one_ai_import_opensearch_async_helper
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIImportOpensearchAsyncHelperFunctionRole.Arn
      Timeout: 900
      MemorySize: 2048
      Runtime: python3.9
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref SecurityGroup
      Environment:
        Variables:
          ES_ENDPOINT: !Sub https://${OpensearchEndpoint}
      Layers:
        - !Ref HelperLayer

  AllInOneAIImportOpensearchSyncHelperFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaRole'
        - !If
          - Globally
          - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSQSFullAccess'

  AllInOneAIImportOpensearchSyncHelperFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_import_opensearch_sync_helper
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIImportOpensearchSyncHelperFunctionRole

  AllInOneAIImportOpensearchSyncHelperFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_import_opensearch_sync_helper.zip
      FunctionName: all_in_one_ai_import_opensearch_sync_helper
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIImportOpensearchSyncHelperFunctionRole.Arn
      Timeout: 900
      MemorySize: 2048
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Environment:
        Variables:
          ES_ENDPOINT: !Sub https://${OpensearchEndpoint}
      Layers:
        - !Ref HelperLayer

  AllInOneAIAddPermissionFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/IAMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/IAMFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AWSLambda_FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AWSLambda_FullAccess'
        - !If
          - Globally
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'
  
  AllInOneAIAddPermissionFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_add_permission
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIAddPermissionFunctionRole

  AllInOneAIAddPermissionFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_add_permission.zip
      FunctionName: all_in_one_ai_add_permission
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIAddPermissionFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer

  AllInOneAIRemovePermissionFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/IAMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/IAMFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AWSLambda_FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AWSLambda_FullAccess'
        - !If
          - Globally
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'
  
  AllInOneAIRemovePermissionFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_remove_permission
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIRemovePermissionFunctionRole

  AllInOneAIRemovePermissionFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_remove_permission.zip
      FunctionName: all_in_one_ai_remove_permission
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIRemovePermissionFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer

  AllInOneAICreateS3EventNotificationFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/IAMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/IAMFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
  
  AllInOneAICreateS3EventNotificationFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_create_s3_event_notification
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAICreateS3EventNotificationFunctionRole

  AllInOneAICreateS3EventNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_create_s3_event_notification.zip
      FunctionName: all_in_one_ai_create_s3_event_notification
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAICreateS3EventNotificationFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIDeleteS3EventNotificationFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/IAMFullAccess'
          - 'arn:aws-cn:iam::aws:policy/IAMFullAccess'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
  
  AllInOneAIDeleteS3EventNotificationFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_delete_s3_event_notification
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIDeleteS3EventNotificationFunctionRole

  AllInOneAIDeleteS3EventNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_delete_s3_event_notification.zip
      FunctionName: all_in_one_ai_delete_s3_event_notification
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIDeleteS3EventNotificationFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIInferencePostProcessFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
    
  AllInOneAIInferencePostProcessFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:   all_in_one_ai_inference_post_process
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIInferencePostProcessFunctionRole

  AllInOneAIInferencePostProcessFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_inference_post_process.zip
      FunctionName: all_in_one_ai_inference_post_process
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIInferencePostProcessFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIInvokeEndpointFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
    
  AllInOneAIInvokeEndpointFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:   all_in_one_ai_invoke_endpoint
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIInvokeEndpointFunctionRole

  AllInOneAIInvokeEndpointFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_invoke_endpoint.zip
      FunctionName: all_in_one_ai_invoke_endpoint
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIInvokeEndpointFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref SageMakerLayer

  AllInOneAIListEndpointsFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
    
  AllInOneAIListEndpointsFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:   all_in_one_ai_list_endpoints
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIListEndpointsFunctionRole

  AllInOneAIListEndpointsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_list_endpoints.zip
      FunctionName: all_in_one_ai_list_endpoints
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIListEndpointsFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIListModelsFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
    
  AllInOneAIListModelsFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:   all_in_one_ai_list_models
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIListModelsFunctionRole

  AllInOneAIListModelsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_list_models.zip
      FunctionName: all_in_one_ai_list_models
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIListModelsFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIListTrainingJobsFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
    
  AllInOneAIListTrainingJobsFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:   all_in_one_ai_list_training_jobs
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIListTrainingJobsFunctionRole

  AllInOneAIListTrainingJobsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_list_training_jobs.zip
      FunctionName: all_in_one_ai_list_training_jobs
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIListTrainingJobsFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIListTransformJobsFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
    
  AllInOneAIListTransformJobsFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:   all_in_one_ai_list_transform_jobs
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIListTransformJobsFunctionRole

  AllInOneAIListTransformJobsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_list_transform_jobs.zip
      FunctionName: all_in_one_ai_list_transform_jobs
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIListTransformJobsFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIStopTrainingJobFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
    
  AllInOneAIStopTrainingJobFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:   all_in_one_ai_stop_training_job
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIStopTrainingJobFunctionRole

  AllInOneAIStopTrainingJobFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_stop_training_job.zip
      FunctionName: all_in_one_ai_stop_training_job
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIStopTrainingJobFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  AllInOneAIStopTransformJobFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonSageMakerFullAccess'
    
  AllInOneAIStopTransformJobFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName:   all_in_one_ai_stop_transform_job
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIStopTransformJobFunctionRole

  AllInOneAIStopTransformJobFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_stop_transform_job.zip
      FunctionName: all_in_one_ai_stop_transform_job
      Tags:
        - Value: Name
          Key: 'AllInOneAIApi'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIStopTransformJobFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup

  ApiGatewayRestApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: 
      - ApiGatewayMethodAnnotationGet
      - ApiGatewayMethodAnnotationPost
      - ApiGatewayMethodAnnotationDelete
      - ApiGatewayMethodApiGet
      - ApiGatewayMethodApiPost
      - ApiGatewayMethodApiByNameGet
      - ApiGatewayMethodEndpointGet
      - ApiGatewayMethodEndpointPost
      - ApiGatewayMethodEndpointByNameGet
      - ApiGatewayMethodEndpointByNameDelete
      - ApiGatewayMethodFunctionByNameGet
      - ApiGatewayMethodGreengrassComponentGet
      - ApiGatewayMethodGreengrassComponentByNameGet
      - ApiGatewayMethodGreengrassComponentByNamePost
      - ApiGatewayMethodGreengrassComponentByVersionIdGet
      - ApiGatewayMethodGreengrassCoreDevicesGet
      - ApiGatewayMethodGreengrassDeploymentGet
      - ApiGatewayMethodGreengrassDeploymentPost
      - ApiGatewayMethodGreengrassDeploymentByIdGet
      - ApiGatewayMethodGreengrassThingGroupsGet
      - ApiGatewayMethodIndustrialModelGet
      - ApiGatewayMethodIndustrialModelPost
      - ApiGatewayMethodIndustrialModelByIdGet
      - ApiGatewayMethodIndustrialModelByIdPost
      - ApiGatewayMethodIndustrialModelByIdDelete
      - ApiGatewayMethodInferencePost
      - ApiGatewayMethodModelGet
      - ApiGatewayMethodModelPost
      - ApiGatewayMethodModelByNameGet
      - ApiGatewayMethodModelByNameDelete
      - ApiGatewayMethodModelPackageGet
      - ApiGatewayMethodModelPackageGroupGet
      - ApiGatewayMethodModelPackageGroupPost
      - ApiGatewayMethodModelPackageByNameGet
      - ApiGatewayMethodModelPackageByNamePost
      - ApiGatewayMethodPipelineGet
      - ApiGatewayMethodPipelinePost
      - ApiGatewayMethodS3Get
      - ApiGatewayMethodSearchImage
      - ApiGatewayMethodSearchImportGet
      - ApiGatewayMethodSearchImportPost
      - ApiGatewayMethodTrainingJobGet
      - ApiGatewayMethodTrainingJobPost
      - ApiGatewayMethodTrainingJobByNameGet
      - ApiGatewayMethodTransformJobGet
      - ApiGatewayMethodTransformJobPost
      - ApiGatewayMethodTransformJobByNameGet
      - ApiGatewayMethodTransformJobByNameReviewGet
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Description: 'All-In-One-AI API Gateway'
      StageName: Prod

  ApiGatewayWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: all-in-one-ai-websocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
      ApiKeySelectionExpression: $request.header.x-api-key

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectIntegration

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        !If
        - Globally
        - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIWebSocketConnectFunction.Arn}/invocations'
        - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIWebSocketConnectFunction.Arn}/invocations'

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGatewayWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectIntegration

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGatewayWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        !If
        - Globally
        - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIWebSocketDisconnectFunction.Arn}/invocations'
        - !Sub 'arn:aws-cn:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AllInOneAIWebSocketDisconnectFunction.Arn}/invocations'

  AllInOneAIWebSocketConnectFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'

  AllInOneAIWebSocketConnectFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_websocket_connect
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIWebSocketConnectFunctionRole

  AllInOneAIWebSocketConnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_websocket_connect.zip
      FunctionName: all_in_one_ai_websocket_connect
      Tags:
        - Value: Name
          Key: 'AllInOneAIWebSocketConnectFunction'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIWebSocketConnectFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer

  AllInOneAIWebSocketConnectFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIWebSocketConnectFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/$connect
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayWebSocket
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/$connect
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayWebSocket

  AllInOneAIWebSocketDisconnectFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'

  AllInOneAIWebSocketDisconnectFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_websocket_disconnect
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIWebSocketDisconnectFunctionRole

  AllInOneAIWebSocketDisconnectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_websocket_disconnect.zip
      FunctionName: all_in_one_ai_websocket_disconnect
      Tags:
        - Value: Name
          Key: 'AllInOneAIWebSocketDisconnectFunction'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIWebSocketDisconnectFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Layers:
        - !Ref HelperLayer

  AllInOneAIWebSocketDisconnectFunctionCatchAllPermissionProd1:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com      
      FunctionName: !Ref AllInOneAIWebSocketDisconnectFunction
      SourceArn: 
        !If
        - Globally
        - !Sub
          - >-
            arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/$disconnect
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayWebSocket
        - !Sub
          - >-
            arn:aws-cn:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/$disconnect
          - __Stage__: '*'
            __ApiId__: !Ref ApiGatewayWebSocket

  AllInOneAIWebSocketSendMessageFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
          - 'arn:aws-cn:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - !If
          - Globally                                                  
          - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonDynamoDBFullAccess'
        - !If
          - Globally  
          - 'arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess'

  AllInOneAIWebSocketSendMessageFunctionAdditionalPermission:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: all_in_one_ai_websocket_send_message
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'logs:*'
              - 'lambda:*'
              - 'cloudwatch:*'
            Resource: '*'
            Effect: Allow
      Roles:
        - !Ref AllInOneAIWebSocketSendMessageFunctionRole

  AllInOneAIWebSocketSendMessageFunction:
    DependsOn: 
      - ApiGatewayWebSocketDeployment
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub ${S3Key}codes/all_in_one_ai_websocket_send_message.zip
      FunctionName: all_in_one_ai_websocket_send_message
      Tags:
        - Value: Name
          Key: 'AllInOneAIWebSocketSendMessageFunction'
      Handler: lambda_function.lambda_handler
      Role: !GetAtt AllInOneAIWebSocketSendMessageFunctionRole.Arn
      Timeout: 900
      Runtime: python3.9
      VpcConfig:
        SubnetIds: 
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds: 
          - !Ref SecurityGroup
      Environment:
        Variables:
          WEBSOCKET_API: !Sub https://${ApiGatewayWebSocket}.execute-api.${AWS::Region}.amazonaws.com/${Stage}
      Layers:
        - !Ref HelperLayer

  ApiGatewayWebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref ApiGatewayWebSocket

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref ApiGatewayWebSocketDeployment
      ApiId: !Ref ApiGatewayWebSocket

Outputs:
  ApiGatewayProdEndpoint:
    Description: "API Prod stage endpoint"
    Value: 
      !If
      - Globally
      - !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod
      - !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com.cn/Prod
  
  CreatePipelineHelperFunctionArn:
    Description: Arn of AllInOneAICreatePipelineHelperFunction
    Value: !GetAtt AllInOneAICreatePipelineHelperFunction.Arn
  
  ImportOpensearchSyncHelperFunctionArn:
    Description: Arn of AllInOneAIImportOpensearchSyncHelperFunction
    Value: !GetAtt AllInOneAIImportOpensearchSyncHelperFunction.Arn
  
  WebSocketGatewayProdEndpoint:
    Description: "The WSS Protocol URI to connect to"
    Value: !Sub wss://${ApiGatewayWebSocket}.execute-api.${AWS::Region}.amazonaws.com/${Stage}

  AllInOneAIAddPermissionFunctionArn:
    Description: "AllInOneAIAddPermissionFunction"
    Value: !GetAtt AllInOneAIAddPermissionFunction.Arn

  AllInOneAIRemovePermissionFunctionArn:
    Description: "AllInOneAIRemovePermissionFunction"
    Value: !GetAtt AllInOneAIRemovePermissionFunction.Arn

  AllInOneAICreateS3EventNotificationFunctionArn:
    Description: "AllInOneAICreateS3EventNotificationFunction"
    Value: !GetAtt AllInOneAICreateS3EventNotificationFunction.Arn

  AllInOneAIDeleteS3EventNotificationFunctionArn:
    Description: "AllInOneAIDeleteS3EventNotificationFunction"
    Value: !GetAtt AllInOneAIDeleteS3EventNotificationFunction.Arn

  AllInOneAIImportOpensearchAsyncHelperFunctionArn:
    Description: "AllInOneAIImportOpensearchAsyncHelperFunction"
    Value: !GetAtt AllInOneAIImportOpensearchAsyncHelperFunction.Arn
