AWSTemplateFormatVersion: 2010-09-09
Description: Template for Web Server

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances to access the Internet.
  
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at least two public subnets in your selected VPC.
  
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at least two private subnets in your selected VPC.

  ApiGatewayProdEndpoint:
    Type: String
    Description: API Prod stage endpoint

  DomainName:
    Type: String
    Description: Domain Name

  Certificate:
    Type: String
    Description: Certificate of ALB

  UserPool:
    Type: String
    Description: UserPool Id

  UserPoolClient:
    Type: String
    Description: UserPoolClient Id

  UserPoolDomain:
    Type: String
    Description: Endpoint of UserPoolDomain

  CognitoRegion:
    Type: String
    Description: Cognito Region

  ChinaRegion: 
    Description: Check if the stack to be in CN Region
    Type: String
    Default: false
    AllowedValues: [ true, false ]

Conditions:
  Globally: !Equals [ false, !Ref ChinaRegion ]

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VPC
  
  EcsSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 3000
      ToPort: 3000
      SourceSecurityGroupId: !Ref AlbSecurityGroup
 
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Alb Security Group
      VpcId: !Ref VPC

  AlbSecurityGroupHTTPinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
 
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14
  
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !If
          - Globally
          - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
          - 'arn:aws-cn:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  
  Taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join 
        - ''
        - - !Ref 'AWS::StackName'
          - '-portal'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '2048'
      Memory: '4096'
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      ContainerDefinitions:
        - Name: web-app
          Cpu: '1024'
          Essential: 'true'
          Image: 
            !If
            - Globally
            - !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/all-in-one-ai-web:latest
            - !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com.cn/all-in-one-ai-web:latest
          Memory: '4096'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: all-in-one-ai-web
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: API_GATEWAY_PROD_ENDPOINT
              Value: !Ref ApiGatewayProdEndpoint
            - Name: UserPool
              Value: !Ref UserPool
            - Name: UserPoolClient
              Value: !Ref UserPoolClient
            - Name: UserPoolDomain
              Value: !Ref UserPoolDomain
            - Name: CognitoRegion
              Value: !Ref CognitoRegion
            - Name: CallbackURL
              Value: !Sub https://${DomainName}/callback
            - Name: LogoutURL
              Value: !Sub https://${DomainName}

  ECSALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: all-in-one-ai
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref AlbSecurityGroup
  
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTG
      LoadBalancerArn: !Ref ECSALB
      Port: !Sub ${AlbPort}
      Protocol: HTTP

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTG
      LoadBalancerArn: !Ref ECSALB
      Port: '443'
      Protocol: HTTPS
      Certificates: 
        - CertificateArn: !Ref Certificate

  ECSTG:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: ECSTG
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  Service:
    Type: 'AWS::ECS::Service'
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 120
      LoadBalancers:
        - ContainerName: web-app
          ContainerPort: 3000
          TargetGroupArn: !Ref ECSTG
      TaskDefinition: !Ref Taskdefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets: !Ref PrivateSubnets

Outputs:
  DNSName:
    Description: Your ALB DNS Name
    Value: !GetAtt ECSALB.DNSName