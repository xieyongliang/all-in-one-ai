AWSTemplateFormatVersion: 2010-09-09
Description: Template for WebUI Server

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances to access the Internet.
  
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at least two public subnets in your selected VPC.
  
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select at least two private subnets in your selected VPC.  
  
  ApiGatewayProdEndpoint:
    Type: String
    Description: API Prod stage endpoint

  DomainName:
    Type: String
    Description: Domain Name

  Certificate:
    Type: String
    Description: Certificate of ALB

  ChinaRegion: 
    Description: Check if the stack to be in CN Region
    Type: String
    Default: false
    AllowedValues: [ true, false ]

Conditions:
  Globally: !Equals [ false, !Ref ChinaRegion ]
  USE_HTTP: !Equals [ '', !Ref Certificate ]
  USE_HTTPS: !Not [ !Equals [ '', !Ref Certificate ]]
  
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VPC
  
  EcsSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !Ref AlbSecurityGroup      
 
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Alb Security Group
      VpcId: !Ref VPC

  AlbSecurityGroupHTTPinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: USE_HTTP
    Properties:
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  AlbSecurityGroupHTTPSinbound:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: USE_HTTPS
    Properties:
      GroupId: !Ref AlbSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0 

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !If
          - Globally
          - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
          - 'arn:aws-cn:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !If
          - Globally
          - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
          - 'arn:aws-cn:iam::aws:policy/AmazonS3FullAccess'
  Taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join 
        - ''
        - - !Ref 'AWS::StackName'
          - '-stable-diffusion-webui'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '8192'
      Memory: '16384'
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      EphemeralStorage: 
         SizeInGiB: 200
      ContainerDefinitions:
        - Name: webapp
          Cpu: '8192'
          Essential: 'true'
          Image: 
            !If
            - Globally
            - !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/all-in-one-ai-stable-diffusion-webui:latest
            - !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com.cn/all-in-one-ai-stable-diffusion-webui:latest
          Memory: '16384'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: all-in-one-ai-webui
          PortMappings:
            - ContainerPort: 8080
          Environment:
            - Name: api_endpoint
              Value: !Ref ApiGatewayProdEndpoint
            - Name: infer_type
              Value: !If [ Globally, 'async', 'sync' ]

  ECSALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: all-in-one-ai-webui
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '3600'
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref AlbSecurityGroup

  ALBHTTPSListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: USE_HTTPS
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTG
      LoadBalancerArn: !Ref ECSALB
      Port: '443'
      Protocol: HTTPS
      Certificates: 
        - CertificateArn: !Ref Certificate

  ALBHTTPListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Condition: USE_HTTP
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSTG
      LoadBalancerArn: !Ref ECSALB
      Port: '80'
      Protocol: HTTP

  ECSTG:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: WEBUIECSTG
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  HTTPService:
    Type: 'AWS::ECS::Service'
    Condition: USE_HTTP
    DependsOn: ALBHTTPListener
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 1200
      LoadBalancers:
        - ContainerName: webapp
          ContainerPort: 8080
          TargetGroupArn: !Ref ECSTG
      TaskDefinition: !Ref Taskdefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets: !Ref PrivateSubnets

  HTTPSService:
    Type: 'AWS::ECS::Service'
    Condition: USE_HTTPS
    DependsOn: ALBHTTPSListener
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 1200
      LoadBalancers:
        - ContainerName: webapp
          ContainerPort: 8080
          TargetGroupArn: !Ref ECSTG
      TaskDefinition: !Ref Taskdefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets: !Ref PrivateSubnets

Outputs:
  DNSName:
    Description: Webui ALB DNS Name
    Value: !GetAtt ECSALB.DNSName