{"version":3,"sources":["data/enums/Direction.ts","data/enums/PopupWindowType.ts","components/AppLayout/index.tsx","components/Dashboard/index.tsx","components/Utils/URLImage/index.js","components/Forms/Inference/index.tsx","components/Utils/SimpleSelect/index.tsx","components/Forms/Transform/index.tsx","settings/Settings.ts","data/enums/LabelType.ts","utils/VirtualListUtil.ts","utils/NumberUtil.ts","utils/RectUtil.ts","views/Common/VirtualList/VirtualList.tsx","logic/imageRepository/ImageLoadManager.ts","store/Actions.ts","logic/imageRepository/ImageRepository.ts","store/labels/actionCreators.ts","utils/FileUtil.ts","data/enums/ContextType.ts","store/selectors/AISelector.ts","logic/helpers/CSSHelper.ts","views/EditorView/SideNavigationBar/ImagePreview/ImagePreview.tsx","store/general/actionCreators.ts","staticModels/EditorModel.ts","utils/UnitUtil.ts","data/enums/CustomCursorStyle.ts","utils/DrawUtil.ts","utils/PointUtil.ts","settings/RenderEngineSettings.ts","store/selectors/LabelsSelector.ts","data/enums/EventType.ts","utils/MouseEventUtil.ts","data/enums/LabelStatus.ts","store/selectors/GeneralSelector.ts","logic/render/BaseRenderEngine.ts","utils/LineUtil.ts","utils/RenderEngineUtil.ts","utils/LabelUtil.ts","logic/render/RectRenderEngine.ts","utils/CanvasUtil.ts","logic/render/PointRenderEngine.ts","logic/render/PolygonRenderEngine.ts","settings/ViewPointSettings.ts","utils/ImageUtil.ts","data/enums/ProjectType.ts","utils/SizeUtil.ts","utils/DirectionUtil.ts","logic/actions/ViewPortActions.ts","logic/render/PrimaryEditorRenderEngine.ts","data/enums/LineAnchorType.ts","logic/helpers/ViewPortHelper.ts","logic/render/LineRenderEngine.ts","logic/actions/EditorActions.ts","logic/context/BaseContext.ts","logic/actions/ImageActions.ts","utils/PlatformUtil.ts","logic/actions/LabelActions.ts","logic/context/EditorContext.ts","logic/actions/PopupActions.ts","logic/context/PopupContext.ts","logic/context/ContextManager.ts","views/EditorView/SideNavigationBar/ImagesList/ImagesList.tsx","data/info/LabelToolkitData.ts","views/Common/ImageButton/ImageButton.tsx","views/EditorView/SideNavigationBar/LabelInputField/LabelInputField.tsx","views/EditorView/SideNavigationBar/EmptyLabelList/EmptyLabelList.tsx","views/EditorView/SideNavigationBar/RectLabelsList/RectLabelsList.tsx","views/EditorView/SideNavigationBar/PointLabelsList/PointLabelsList.tsx","views/EditorView/SideNavigationBar/PolygonLabelsList/PolygonLabelsList.tsx","views/EditorView/SideNavigationBar/LineLabelsList/LineLabelsList.tsx","views/EditorView/SideNavigationBar/TagLabelsList/TagLabelsList.tsx","views/EditorView/SideNavigationBar/LabelsToolkit/LabelsToolkit.tsx","views/EditorView/SideNavigationBar/SideNavigationBar.tsx","views/EditorView/VerticalEditorButton/VerticalEditorButton.tsx","utils/EditorUtil.ts","staticModels/PlatformModel.ts","views/EditorView/LabelControlPanel/LabelControlPanel.tsx","store/ai/actionCreators.ts","ai/ObjectDetector.ts","logic/actions/AIObjectDetectionActions.ts","ai/PoseDetector.ts","logic/actions/AIPoseDetectionActions.ts","data/enums/AcceptedFileType.ts","logic/actions/AIActions.ts","views/EditorView/Editor/Editor.tsx","views/EditorView/EditorBottomNavigationBar/EditorBottomNavigationBar.tsx","views/EditorView/EditorTopNavigationBar/EditorTopNavigationBar.tsx","views/EditorView/EditorContainer/EditorContainer.tsx","views/EditorView/StateBar/StateBar.tsx","views/Common/TextInput/TextInput.tsx","data/info/DropDownMenuData.ts","views/EditorView/TopNavigationBar/DropDownMenu/DropDownMenu.tsx","views/EditorView/TopNavigationBar/TopNavigationBar.tsx","views/EditorView/EditorView.tsx","views/Common/TextButton/TextButton.tsx","views/PopupView/GenericYesNoPopup/GenericYesNoPopup.tsx","data/enums/NotificationType.ts","logic/import/yolo/YOLOErrors.ts","logic/import/yolo/YOLOUtils.ts","views/PopupView/LoadLabelNamesPopup/LoadLabelNamesPopup.tsx","views/PopupView/InsertLabelNamesPopup/ColorSelectorView/ColorSelectorView.tsx","utils/NotificationUtil.ts","data/enums/Notification.ts","data/info/NotificationsData.ts","data/enums/AIModel.ts","views/PopupView/InsertLabelNamesPopup/InsertLabelNamesPopup.tsx","store/notifications/actionCreators.ts","views/PopupView/ExitProjectPopup/ExitProjectPopup.tsx","utils/ImageDataUtil.ts","views/PopupView/LoadMoreImagesPopup/LoadMoreImagesPopup.tsx","views/PopupView/LoadModelPopup/LoadModelPopup.tsx","data/enums/AnnotationFormatType.ts","utils/ArrayUtil.ts","views/PopupView/SuggestLabelNamesPopup/SuggestLabelNamesPopup.tsx","views/PopupView/GenericLabelTypePopup/GenericLabelTypePopup.tsx","data/ImportFormatData.ts","views/EditorView/FeatureInProgress/FeatureInProgress.tsx","logic/import/coco/COCOErrors.ts","logic/import/AnnotationImporter.ts","logic/import/coco/COCOUtils.ts","logic/import/coco/COCOImporter.ts","logic/import/yolo/YOLOImporter.ts","data/ImporterSpecData.ts","views/PopupView/ImportLabelPopup/ImportLabelPopup.tsx","utils/XMLSanitizerUtil.ts","utils/ExporterUtil.ts","logic/export/RectLabelsExporter.ts","logic/export/PointLabelsExport.ts","logic/export/polygon/VGGExporter.ts","logic/export/polygon/COCOExporter.ts","logic/export/polygon/PolygonLabelsExporter.ts","logic/export/LineLabelExport.ts","logic/export/TagLabelsExport.ts","data/ExportFormatData.ts","views/PopupView/ExportLabelsPopup/ExportLabelPopup.tsx","views/PopupView/PopupView.tsx","components/Utils/Annotate/index.tsx","components/Forms/Sample/index.tsx","components/Forms/Demo/index.tsx","components/Lists/TrainingJob/index.tsx","components/Lists/Model/index.tsx","components/Lists/Endpoint/index.tsx","components/Lists/RestApi/index.tsx","components/Lists/GreengrassComponent/index.tsx","components/Lists/GreengrassDeployment/index.tsx","components/Lists/Pipeline/index.tsx","components/Cases/index.tsx","components/Models/Yolov5/index.tsx","components/Scenarios/PPE/index.tsx","components/Forms/TrainingJob/index.tsx","components/Forms/Model/index.tsx","components/Forms/Endpoint/index.tsx","components/Forms/RestApi/index.tsx","components/Forms/GreengrassComponent/index.tsx","components/Forms/GreengrassDeployment/index.tsx","components/Forms/Pipeline/index.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","store/labels/reducer.ts","store/general/reducer.ts","store/ai/reducer.ts","store/notifications/reducer.ts","store/index.ts","utils/EnvironmentUtil.ts","logic/initializer/AppInitializer.ts","index.tsx","configureStore.ts"],"names":["Direction","PopupWindowType","AppLayout","children","Header","useMemo","title","logoPath","Breadcrumbs","rootPath","SideNavigation","header","text","href","items","SideNavigationItemType","SECTION","type","LINK","navigation","breadcrumbs","Dashboard","p","width","spacing","variant","uuid","require","colormap","URLImage","state","image","height","handleLoad","setState","this","loadImage","oldProps","src","props","removeEventListener","window","Image","addEventListener","label","length","x","y","ref","node","imageNode","bbox","map","index","Math","floor","parseFloat","stroke","v4","fill","fontFamily","fontSize","React","Component","InferenceForm","useState","filename","setFilename","setLabel","setBbox","onChange","files","axios","post","then","response","data","error","console","log","onClick","get","tlabel","tbbox","item","push","numbers","toString","split","controlId","SimpleSelect","selectedOption","setSeletedOption","placeholder","options","event","value","target","name","optionsData","optionsContent","optionsModel","optionsInstance","TransformForm","setStateData","setStateContent","setStateInstance","LabelType","Settings","GITHUB_URL","MEDIUM_URL","PATREON_URL","TOP_NAVIGATION_BAR_HEIGHT_PX","EDITOR_BOTTOM_NAVIGATION_BAR_HEIGHT_PX","EDITOR_TOP_NAVIGATION_BAR_HEIGHT_PX","SIDE_NAVIGATION_BAR_WIDTH_CLOSED_PX","SIDE_NAVIGATION_BAR_WIDTH_OPEN_PX","TOOLKIT_TAB_HEIGHT_PX","TOOLBOX_PANEL_WIDTH_PX","EDITOR_MIN_WIDTH","EDITOR_MIN_HEIGHT","PRIMARY_COLOR","SECONDARY_COLOR","DARK_THEME_FIRST_COLOR","DARK_THEME_SECOND_COLOR","DARK_THEME_THIRD_COLOR","DARK_THEME_FORTH_COLOR","CROSS_HAIR_THICKNESS_PX","CROSS_HAIR_COLOR","RESIZE_HANDLE_DIMENSION_PX","RESIZE_HANDLE_HOVER_DIMENSION_PX","CLOSEABLE_POPUPS","IMPORT_IMAGES","EXPORT_ANNOTATIONS","IMPORT_ANNOTATIONS","EXIT_PROJECT","UPDATE_LABEL","LABEL_COLORS_PALETTE","VirtualListUtil","listSize","childSize","childCount","columnCount","ceil","gridSize","sizeFromGrid","max","calculateGridSize","horizontalMargin","calculateContentSize","anchors","i","rowCount","anchor","NumberUtil","min","RectUtil","rect","r1","r2","point","centerPoint","size","containerRect","ratio","getRatio","innerRectHeight","innerRectWidth","inputRect","rectAnchor","delta","RIGHT","BOTTOM_RIGHT","BOTTOM","TOP_RIGHT","TOP","TOP_LEFT","LEFT","BOTTOM_LEFT","scale","position","isPointInside","snapValueToRange","VirtualList","contentSize","childAnchors","scrollbars","calculate","calculateAnchorPoints","getVirtualListStyle","getVirtualListContentStyle","onScrollStart","isScrolling","onScrollStop","onScroll","values","viewportRect","scrollLeft","scrollTop","getChildren","overScanHeight","overScan","viewportRectWithOverScan","reduce","childRect","Object","assign","isVisible","intersect","childStyle","left","top","concat","childRender","nextProps","nextState","nextContext","getValues","displayContent","className","style","onScrollFrame","autoHide","ImageLoadManager","fx","queue","a","setTimeout","runQueue","add","run","isRunning","runTasks","shift","Action","ImageRepository","id","repository","ids","images","zip","forEach","pair","storeImage","updateActiveImageIndex","activeImageIndex","UPDATE_ACTIVE_IMAGE_INDEX","payload","updateActiveLabelNameId","activeLabelNameId","UPDATE_ACTIVE_LABEL_NAME_ID","updateActiveLabelId","activeLabelId","UPDATE_ACTIVE_LABEL_ID","updateHighlightedLabelId","highlightedLabelId","UPDATE_HIGHLIGHTED_LABEL_ID","updateActiveLabelType","activeLabelType","UPDATE_ACTIVE_LABEL_TYPE","updateImageDataById","newImageData","UPDATE_IMAGE_DATA_BY_ID","addImageData","imageData","ADD_IMAGES_DATA","updateImageData","UPDATE_IMAGES_DATA","updateLabelNames","labels","UPDATE_LABEL_NAMES","updateFirstLabelCreatedFlag","firstLabelCreatedFlag","UPDATE_FIRST_LABEL_CREATED_FLAG","ContextType","FileUtil","fileData","Promise","resolve","reject","url","URL","createObjectURL","onload","onerror","promises","all","catch","reader","FileReader","onloadend","result","readAsText","readFile","parts","splitPath","fName","Array","keys","idx","AISelector","store","getState","ai","suggestedLabelList","rejectedSuggestedLabelList","isObjectDetectorLoaded","isPoseDetectorLoaded","isAIDisabled","CSSHelper","isAIObjectDetectorModelLoaded","isAIPoseDetectorModelLoaded","ImagePreview","isLoading","loadStatus","getById","saveLoadedImagePartial","saveLoadedImage","handleLoadImageError","getStyle","imageRect","imageRatio","imagePosition","fitInsideRectWithRatio","getClassName","classNames","isSelected","addAndRun","isChecked","undefined","draggable","alt","color","getLeadingColor","loading","mapDispatchToProps","connect","updateActivePopupType","activePopupType","UPDATE_ACTIVE_POPUP_TYPE","updateCustomCursorStyle","customCursorStyle","UPDATE_CUSTOM_CURSOR_STYLE","updatePreventCustomCursorStatus","preventCustomCursor","UPDATE_PREVENT_CUSTOM_CURSOR_STATUS","updateProjectData","projectData","UPDATE_PROJECT_DATA","EditorModel","editor","canvas","mousePositionIndicator","cursor","viewPortScrollbars","primaryRenderingEngine","supportRenderingEngine","viewPortHelper","viewPortActionsDisabled","mousePositionOnViewPortContent","viewPortSize","defaultRenderImageRect","CustomCursorStyle","UnitUtil","angleDeg","PI","angleRad","DrawUtil","getContext","clearRect","startPoint","endPoint","thickness","ctx","save","strokeStyle","lineWidth","lineCap","beginPath","moveTo","lineTo","restore","fillStyle","fillRect","globalCompositeOperation","anchorPoint","radius","startAngleRad","deg2rad","endAngleRad","arc","startAngleDeg","endAngleDeg","closePath","textSize","bold","align","textAlign","textBaseline","font","fillText","hex","alpha","r","parseInt","slice","g","b","PointUtil","p1","p2","factor","RenderEngineSettings","LINE_THICKNESS","lineActiveColor","defaultLineColor","CROSS_HAIR_LINE_COLOR","crossHairPadding","anchorSize","anchorHoverSize","suggestedAnchorDetectionSize","defaultAnchorColor","inactiveAnchorColor","DEFAULT_ANCHOR_COLOR","ACTIVE_ANCHOR_COLOR","INACTIVE_ANCHOR_COLOR","DEFAULT_LINE_COLOR","ACTIVE_LINE_COLOR","INACTIVE_LINE_COLOR","EventType","LabelsSelector","labelName","getLabelNames","find","imagesData","getActiveImageIndex","getImageDataByIndex","getImagesData","getActiveLabelId","getActiveImageData","labelRects","labelPoints","labelPolygons","labelLines","LabelStatus","MouseEventUtil","MOUSE_DOWN","MOUSE_UP","MOUSE_MOVE","GeneralSelector","general","activeContext","imageDragMode","crossHairVisible","zoom","enablePerClassColoration","BaseRenderEngine","labelType","getEventType","mouseMoveHandler","mouseUpHandler","mouseDownHandler","labelId","isActive","getEnablePerClassColorationStatus","getLabelNameById","LineUtil","l","start","end","abs","sqrt","pow","RenderEngineUtil","realImageSize","viewPortContentImageRect","viewPortContentSize","calculateImageScale","multiply","polygon","transferPointFromImageToViewPortContent","line","subtract","transferPointFromViewPortContentToImage","translate","scaleRect","translation","dispatch","DEFAULT","CANCEL","setValueBetweenPixels","topLeft","bottomRight","topLeftBetweenPixels","setPointBetweenPixels","bottomRightBetweenPixels","mouse","minX","maxX","minY","maxY","getDistanceFromLine","getRectWithCenterAndSize","LabelUtil","uuidv4","sample","isCreatedByAI","status","ACCEPTED","suggestedLabel","vertices","oldLabelNames","newLabelNames","missingIds","RectRenderEngine","startCreateRectPoint","startResizeRectAnchor","isMouseOverImage","isMouseOverCanvas","rectUnderMouse","getRectUnderMouse","calculateRectRelativeToActiveImage","anchorUnderMouse","getAnchorUnderMouseByRect","startRectResize","getHighlightedLabelId","startRectCreation","mousePositionSnapped","snapPointToRect","activeLabelRect","getActiveRectLabel","equals","addRectLabel","transferRectFromImageToViewPortContent","startAnchorPosition","resizeRect","scaledRect","labelRect","endRectTransformation","isInProgress","getActiveLabelNameId","createLabelRect","RECT","drawActiveRect","drawInactiveRect","drawCurrentlyCreatedRect","updateCursorStyle","mousePosition","activeRect","activeRectBetweenPixels","setRectBetweenPixels","lineColor","resolveLabelLineColor","drawRect","rectOnImage","transferRectFromViewPortContentToImage","displayAsActive","anchorColor","resolveLabelAnchorColor","renderRect","endAnchorPositionSnapped","rectBetweenPixels","drawRectWithFill","hexToRGB","mapRectToAnchors","center","handleRect","handleRectBetweenPixels","getImageDragModeStatus","getAnchorUnderMouse","MOVE","wrapDefaultCursorStyleInCancel","activeRectLabel","isMouseOverRectEdges","outerRectDelta","outerRect","expand","innerRectDelta","innerRect","rectAnchors","anchorRect","EditorActions","setViewPortActionsDisabledStatus","activatedAnchor","CanvasUtil","canvasRect","getBoundingClientRect","clientX","clientY","PointRenderEngine","addPointLabel","labelPoint","POINT","getLabelPointUnderMouse","pointOnCanvas","pointBetweenPixels","pointOnImage","activeLabelPoint","getActivePointLabel","pointSnapped","drawCircleWithFill","renderPoint","getSize","PolygonRenderEngine","activePath","resizeAnchorIndex","suggestedAnchorPositionOnCanvas","suggestedAnchorIndexInPolygon","POLYGON","isCreationInProgress","isMouseOverAnchor","addLabelAndFinishCreation","updateActivelyCreatedLabel","polygonUnderMouse","getPolygonUnderMouse","anchorIndex","indexUnderMouse","anchorOnCanvas","startExistingLabelResize","addSuggestedAnchorToPolygonLabel","isResizeInProgress","endExistingLabelResize","labelPolygon","pathOnCanvas","transferPolygonFromImageToViewPortContent","linesOnCanvas","mapPointsToLines","j","isMouseOverLine","getCenter","discardSuggestedPoint","drawExistingLabels","drawActivelyCreatedLabel","drawActivelyResizeLabel","drawSuggestedAnchor","CLOSE","ADD","standardizedPoints","path","lines","drawPolygonWithFill","drawLine","activeLabelPolygon","getActivePolygonLabel","snappedMousePosition","polygonOnCanvas","drawPolygon","suggestedAnchorRect","polygonOnImage","transferPolygonFromViewPortContentToImage","addPolygonLabel","finishLabelCreation","createLabelPolygon","applyResizeToPolygonLabel","activeLabel","newAnchorPositionOnImage","arr","newItem","points","ViewPointSettings","CANVAS_MIN_MARGIN_PX","MIN_ZOOM","MAX_ZOOM","ZOOM_STEP","TRANSLATION_STEP_PX","ProjectType","ImageUtil","SizeUtil","DirectionUtil","direction","CENTER","ViewPortActions","offsetWidth","offsetHeight","minMargin","realImageRect","viewPortWithMarginRect","viewPortWithoutMarginRect","defaultViewPortImageRect","scaledImageSize","getZoom","calculateViewPortContentSize","newCanvasSize","resizeCanvas","relativePosition","directionVector","convertDirectionToVector","translationVector","currentScrollPosition","getAbsoluteScrollPosition","nextScrollPosition","setScrollPosition","fullRender","currentZoom","currentRelativeScrollPosition","getRelativeScrollPosition","nextRelativeScrollPosition","setZoom","resizeViewPortContent","calculateAbsoluteScrollPosition","nextZoom","isValueInRange","UPDATE_ZOOM","LineAnchorType","PrimaryEditorRenderEngine","drawImage","calculateViewPortContentImageRect","renderCrossHair","shouldRenderCrossHair","isCrossHairVisible","getCrossHairVisibleStatus","isImageInDragMode","projectType","getProjectType","getActivePopupType","isCustomCursorBlocked","getPreventCustomCursorStatus","IMAGE_RECOGNITION","every","Boolean","ViewPortHelper","startScrollPosition","mouseStartPosition","absoluteViewPortContentScrollPosition","screenX","screenY","GRABBING","GRAB","currentMousePosition","mousePositionDelta","LineRenderEngine","lineCreationStartPoint","lineUpdateAnchorType","startNewLabelCreation","finishNewLabelCreation","mousePositionOnCanvasSnapped","lineOnCanvas","lineOnImage","transferLineFromViewPortContentToImage","labelLine","LINE","anchorTypeUnderMouse","getAnchorTypeUnderMouse","labelLineUnderMouse","getLineUnderMouse","startExistingLabelUpdate","endExistingLabelUpdate","transferLineFromImageToViewPortContent","activeLabelLine","getActiveLineLabel","lineToDraw","START","END","standardizedLine","getPoints","anchorType","applyUpdateToLineLabel","lineLabel","mousePositionOnImage","mountSupportRenderingEngine","clearCanvas","render","getEditorData","activeKeyCombo","ContextManager","getActiveCombo","display","mousePositionOverViewPortContent","getMousePositionOnCanvasFromEvent","viewPortContentScrollPosition","mousePositionOverViewPort","includes","getCustomCursorStyle","mousePositionOverImage","round","innerHTML","BaseContext","actions","ImageActions","currentImageIndex","getImageByIndex","imageCount","labelIndex","labelNames","mapNewImageData","getActiveLabelType","labelRectangle","labelNameIds","remove","element","PlatformUtil","userAgent","mobileDetect","MobileDetect","manufacturer","mobile","browser","os","toLowerCase","match","LabelActions","activeImageData","deleteImageLabelById","imageId","deletePointLabelById","deleteRectLabelById","deletePolygonLabelById","labelRectId","getImageDataById","filter","currentLabel","labelPointId","labelLineId","labelPolygonId","labelNamesIds","newImagesData","removeLabelNamesFromImageData","labelNameId","EditorContext","keyCombo","action","editorData","cancelLabelCreation","isMac","navigator","getPreviousImage","getNextImage","zoomIn","zoomOut","preventDefault","translateViewPortPosition","deleteActiveLabel","setActiveLabelOnActiveImage","PopupActions","restoreCtx","PopupContext","popupType","close","activeCombo","KEY_DOWN","onDown","KEY_UP","onUp","FOCUS","onFocus","context","activeCtx","getActiveContext","contextHistory","updateCtx","UPDATE_CONTEXT","EDITOR","getActions","POPUP","pop","keyCode","getKeyCodeFromEvent","isInCombo","addToCombo","execute","removeFromCombo","hotKey","matchCombo","indexOf","splice","key","combo1","combo2","isEmpty","xor","ImagesList","imagesListRef","updateListSize","listBoundingBox","isImageChecked","onClickHandler","renderImagePreview","RESIZE","switchCtx","LEFT_NAVBAR","LabelToolkitData","headerText","imageSrc","imageAlt","OBJECT_DETECTION","ImageButton","buttonSize","padding","isDisabled","externalClassName","imagePadding","buttonStyle","imageStyle","maxWidth","maxHeight","stopPropagation","rel","LabelInputField","dropdownOptionHeight","dropdownOptionCount","dropdownMargin","dropdownLabel","dropdown","openDropdown","isOpen","closeDropdown","clientRect","dropDownRect","getDropdownStyle","innerHeight","bottom","getDropdownOptions","option","onSelectLabel","mouseEnterHandler","mouseLeaveHandler","animate","requestAnimationFrame","isHighlighted","onDelete","onMouseEnter","onMouseLeave","renderTrackHorizontal","labelBefore","labelAfter","before","after","listStyle","listStyleContent","updateRectLabel","onClickCapture","findLast","updatePointLabel","updatePolygonLabel","deleteLineLabelById","updateLineLabel","addNewOnClick","onTagClick","LabelsToolkit","labelsToolkitRef","tabs","updateToolkitSize","headerClickHandler","activeTab","renderChildren","tabData","activeTabContentHeight","baseClass","content","RIGHT_NAVBAR","SideNavigationBar","isWithContext","renderContent","renderCompanion","VerticalEditorButton","EditorUtil","getIndicator","cursorStyle","getCursorStyle","PlatformModel","mobileDeviceData","isSafari","isFirefox","labelData","setIsActiveStatus","isPanelActive","labelExistsInLabelNames","updateSuggestedLabelList","labelList","UPDATE_SUGGESTED_LABEL_LIST","ObjectDetector","callback","cocoSsd","model","UPDATE_OBJECT_DETECTOR_STATUS","AIObjectDetectionActions","detectRectsForActiveImage","Error","detect","predictions","detectRects","isVisitedByObjectDetector","LOADER","predict","suggestedLabelNames","extractNewSuggestedLabelNames","rejectedLabelNames","getRejectedSuggestedLabelList","newlySuggestedNames","AIActions","excludeRejectedLabelNames","SUGGEST_LABEL_NAMES","saveRectPredictions","predictedLabels","mapPredictionsToRectLabels","nextImageData","prediction","UNDECIDED","class","acc","PoseDetector","posenet","architecture","outputStride","inputResolution","quantBytes","UPDATE_POSE_DETECTOR_STATUS","AIPoseDetectionActions","detectPoseForActiveImage","estimateMultiplePoses","AcceptedFileType","detectPoses","isVisitedByPoseDetector","poses","savePosePredictions","mapPredictionsToPointLabels","keypoints","keypoint","part","pose","suggestedLabels","rejectedLabels","rejectAllSuggestedRectLabels","rejectAllSuggestedPointLabels","acceptAllSuggestedRectLabels","acceptAllSuggestedPointLabels","Editor","setActiveImage","updateModelAndRender","setLoadingStatus","updateViewPortSize","updateDefaultViewPortImageRect","update","updateMousePositionIndicator","handleZoom","ctrlKey","metaKey","scrollSign","sign","deltaY","getOptionsPanels","positionOnImage","positionOnViewPort","onScrollbarsUpdate","scrollbarContent","newViewPortContentSize","scrollWidth","scrollHeight","isEqual","mountEventListeners","mountRenderEnginesAndHelpers","unmountEventListeners","prevProps","prevState","snapshot","swapSupportRenderingEngine","MOUSE_WHEEL","renderTrackVertical","onUpdate","onContextMenu","totalImageCount","BUTTON_SIZE","StyledTooltip","withStyles","theme","tooltip","backgroundColor","boxShadow","shadows","Tooltip","getButtonWithTooltip","tooltipMessage","disableFocusListener","TransitionComponent","Fade","TransitionProps","timeout","placement","updateImageDragModeStatusAction","UPDATE_IMAGE_DRAG_MODE_STATUS","updateCrossHairVisibleStatusAction","UPDATE_CROSS_HAIR_VISIBLE_STATUS","setDefaultZoom","setOneForOneZoom","acceptAllSuggestedLabels","rejectAllSuggestedLabels","windowSize","leftTabStatus","setLeftTabStatus","rightTabStatus","setRightTabStatus","calculateEditorSize","leftTabWidth","rightTabWidth","leftSideBarButtonOnClick","rightSideBarButtonOnClick","onMouseDown","pointLabeledImages","currentCount","currentImage","rectLabeledImages","polygonLabeledImages","lineLabeledImages","tagLabeledImages","getProgress","TextInput","isPassword","inputStyle","labelStyle","barStyle","onKeyUp","DropDownMenuData","disabled","description","LOAD_AI_MODEL","updatePreventCustomCursorStatusAction","activeTabIdx","setActiveTabIdx","activeDropDownAnchor","setDropDownAnchor","onMouseEnterWindow","onMouseLeaveWindow","onMouseDownBeyondDropDown","classList","contains","document","wrapOnClick","getDropDownTab","tabIdx","offsetLeft","onTabClick","onMouseEnterTab","getDropDownWindow","updateActivePopupTypeAction","updateProjectDataAction","replace","setSelectionRange","TextButton","GenericYesNoPopup","acceptLabel","onAccept","skipAcceptButton","disableAcceptButton","rejectLabel","onReject","skipRejectButton","disableRejectButton","setMountStatus","useEffect","NotificationType","YOLOAnnotationsLoadingError","message","NoLabelNamesFileProvidedError","LabelNamesNotUniqueError","AnnotationsParsingError","imageName","YOLOUtils","uniq","createLabelName","onSuccess","onFailure","evt","parseLabelsNamesFromString","rawAnnotations","imageSize","rawAnnotation","parseYOLOAnnotationFromString","components","validateYOLOAnnotationComponents","rectX","rectY","rectWidth","rectHeight","labelNamesCount","validateCoordinateValue","rawValue","floatValue","Number","isNaN","intValue","validateLabelIdx","updateLabels","labelsList","setLabelsList","invalidFileLoadedStatus","setInvalidFileLoadedStatus","useDropzone","accept","TEXT","multiple","onDrop","acceptedFiles","loadLabelsList","getRootProps","getInputProps","INSERT_LABEL_NAMES","ColorSelectorView","Notification","NotificationUtil","ERROR","MESSAGE","WARNING","AIModel","NotificationsDataMap","EMPTY_LABEL_NAME_ERROR","NON_UNIQUE_LABEL_NAMES_ERROR","StyledTextField","root","borderBottomColor","TextField","updateLabelNamesAction","updatePerClassColorationStatusAction","UPDATE_ENABLE_PER_CLASS_COLORATION_STATUS","submitNewNotificationAction","notification","SUBMIT_NEW_NOTIFICATION","isUpdate","setLabelNames","callbackWithLabelNamesValidation","createErrorNotification","addLabelNameCallback","safeAddLabelNameCallback","togglePerClassColorationCallback","onKeyUpCallback","labelInputs","autoComplete","autoFocus","margin","InputLabelProps","shrink","changeLabelNameColorCallback","deleteLabelNameCallback","onCreateAcceptCallback","nonEmptyLabelNames","onUpdateAcceptCallback","labelNamesIdsDiff","removeLabelNames","LOAD_LABEL_NAMES","ImageDataUtil","idArrangement","sort","missingImages","missingImagesFiles","loadImages","htmlImageElements","storeImages","IMAGE","createImageDataFromFileData","AnnotationFormatType","models","flag","POSE_DETECTION","LoadModelPopup","modelIsLoadingStatus","setModelIsLoadingStatus","selectedModelToLoad","updateSelectedModelToLoad","extractSelectedModel","getOptions","entry","selectedModel","nextSelectedModelToLoad","onSelect","loadModel","ArrayUtilAmbiguousMatchError","EmptyArrayError","NegativeIndexError","ArrayUtil","array","predicate","pass","fail","array1","array2","updateRejectedSuggestedLabelList","UPDATE_REJECTED_SUGGESTED_LABEL_LIST","selectAllFlag","setSelectAllFlag","getSuggestedLabelList","extractSelectedNames","extractUnselectedNames","extractNames","nextLabelNames","entryIndex","nextSelectAllFlag","toggleSelectableNameByIndex","autoHeight","getByInfiniteIndex","onLabelTypeChange","renderInternalContent","setLabelType","ImportFormatData","COCO","YOLO","FeatureInProgress","COCOAnnotationsLoadingError","COCOFormatValidationError","COCOAnnotationReadingError","COCOAnnotationDeserializationError","COCOAnnotationFileCountError","AnnotationImporter","filesData","COCOUtils","segmentation","segment","chunk","COCOImporter","inputImagesData","annotations","deserialize","applyLabels","annotationsObject","validateCocoFormat","categories","labelNameMap","mapCOCOCategories","cleanImageData","cleanAnnotations","imageDataPartition","partitionImageData","imageDataMap","mapImageData","annotation","image_id","iscrowd","category_id","bbox2rect","polygons","segmentation2vertices","resultImageData","arrange","JSON","parse","imageNames","file_name","partition","category","fileNameCOCOIdMap","missingKeys","requiredKeys","hasOwnProperty","YOLOImporter","sourceImagesData","filterFilesData","labelNameFile","annotationFiles","matchImagesWithAnnotations","relevantImageData","relevantAnnotations","labelNamesPromise","fileContent","missingImagesPromise","loadMissingImages","annotationFilesPromise","readFiles","annotationsRaw","applyAnnotations","injectImageDataWithAnnotations","functionalityPartitionResult","labelsFileName","imageIdentifiers","extractFileName","matchingPartitionResult","unzip","parseYOLOAnnotationsFromString","sourceImageData","annotatedImageData","ImporterSpecData","CSV","VGG","VOC","updateImageDataAction","updateActiveLabelTypeAction","resolveFormatType","possibleImportFormats","formatType","setFormatType","loadedLabelNames","setLoadedLabelNames","loadedImageData","setLoadedImageData","annotationsLoadedError","setAnnotationsLoadedError","import","onAnnotationLoadSuccess","onAnnotationsLoadFailure","exportFormatData","format","XMLSanitizerUtil","input","ExporterUtil","projectName","getProjectName","date","moment","fileName","blob","Blob","saveAs","RectLabelsExporter","exportFormatType","exportAsYOLO","exportAsVOC","exportAsCSV","JSZip","wrapRectLabelsIntoYOLO","file","generateAsync","getExportFileName","snapAndFix","toFixed","classIdx","findIndex","rectCenter","rectSize","processedBBox","join","wrapRectLabelIntoYOLO","wrapImageIntoVOC","labelNamesList","wrapRectLabelsIntoVOC","sanitize","wrapRectLabelsIntoCSV","imageLabelData","PointLabelsExporter","VGGExporter","stringify","mapImagesDataToVGGObject","mapImageDataToVGGFileData","regionsData","mapImageDataToVGG","fileref","base64_img_data","file_attributes","regions","validLabels","getValidPolygonLabels","shape_attributes","mapPolygonToVGG","region_attributes","all_points_x","all_points_y","COCOExporter","COCOObject","mapImagesDataToCOCOObject","getInfoComponent","getImagesComponent","getAnnotationsComponent","getCategoriesComponent","labelsMap","mapLabelsData","getCOCOSegmentation","getCOCOBbox","getCOCOArea","flatten","xMin","xMax","yMin","yMax","vertex","area","PolygonLabelsExporter","export","LineLabelsExporter","wrapLineLabelsIntoCSV","TagLabelsExporter","exportAsJSON","wrapLabelNamesIntoCSV","contentObjects","wrapLabelNamesIntoJSON","ExportFormatData","setExportFormatType","selectPopup","updateActiveImageIndexAction","addImageDataAction","ObjectDetectorLoaded","PoseDetectionLoaded","setImportReady","imageReady","setImageReady","imageFile","imageUri","responseType","File","labelsFile","labelsData","annotationFile","annotationData","init","current","endsWith","SampleForm","setItems","setCurrent","visible","setVisible","onImageClick","currentTarget","substring","lastIndexOf","onInference","ImageList","cols","rowHeight","gap","ImageListItem","rows","DemoForm","stateType","setStateType","checked","Inference","Transform","Sample","columnDefinitions","accessor","Cell","row","original","statusType","creation_time","duration","TrainingJobList","getRowId","useCallback","history","useHistory","tableActions","alert","actionGroup","tableTitle","multiSelect","onSelectionChange","training_job","ModelList","last_updated","EndpointList","endpoint","api","uri","RestApiList","version","version_created","GreengrassComponentList","target_name","target_type","deployment_created","GreengrassDeploymentList","training_job_status","model_status","endpoint_status","restapi_status","component_status","deployment_status","PipelineList","Case","useParams","Demo","Pipeline","TrainingJob","Model","Endpoint","RestApi","GreengrassComponent","GreengrassDeployment","activeId","activeTabId","Yolov5","PPE","TrainingJobForm","wizard","onRemove","renderTrainingJobSetting","renderTrainingJobTag","renderTrainingJobContent","ModelForm","renderModelSetting","renderModelTag","renderModelFormContent","optionsElastic","EndpointForm","setStateModel","setStateElastic","renderEndpointSetting","hintText","renderEndpointTag","renderEndpointFormContent","optionsEndpoint","optionsApi","RestApiForm","setOptionsEndpoint","setOptionsApi","onChangeOption","renderRestApiSetting","renderRestApiTag","renderRestApiFormContent","GreengrassComponentForm","renderGreengrassComponentSetting","renderGreengrassTag","renderGreengrassContent","optionsTarget","optionsComponent","optionsVersion","GreengrassDeploymentForm","setStateTarget","renderGreengrassDeploymentSetting","renderGreengrassDeploymentTarget","renderGreengrassDeploymentTag","renderGreengrassDeploymentContent","PipelineForm","onSubmit","onCancel","steps","steps1","steps2","steps3","onSubmitButtonClick","onCancelButtonClick","withLayout","App","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","location","hostname","initialState","rootReducer","combineReducers","UPDATE_WINDOW_SIZE","UPDATE_DISABLED_AI_FLAG","notifications","DELETE_NOTIFICATION_BY_ID","EnvironmentUtil","process","AppInitializer","handleResize","detectDeviceParams","handleAccidentalPageExit","disableGenericScrollZoom","passive","disableUnwantedKeyBoardBehaviour","KEY_PRESS","onbeforeunload","isProd","returnValue","innerWidth","getMobileDeviceData","createStore","__REDUX_DEVTOOLS_EXTENSION__","inti","ReactDOM","StrictMode","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5244718.chunk.js","sourcesContent":["export enum Direction {\n    TOP = \"TOP\",\n    BOTTOM = \"BOTTOM\",\n    LEFT = \"LEFT\",\n    RIGHT = \"RIGHT\",\n    TOP_RIGHT = \"TOP_RIGHT\",\n    TOP_LEFT = \"TOP_LEFT\",\n    BOTTOM_RIGHT = \"BOTTOM_RIGHT\",\n    BOTTOM_LEFT = \"BOTTOM_LEFT\",\n    CENTER = \"CENTER\"\n}","export enum PopupWindowType {\n    LOAD_LABEL_NAMES = 'LOAD_LABEL_NAMES',\n    UPDATE_LABEL = 'UPDATE_LABEL',\n    SUGGEST_LABEL_NAMES = 'SUGGEST_LABEL_NAMES',\n    IMPORT_IMAGES = 'IMPORT_IMAGES',\n    LOAD_AI_MODEL = 'LOAD_AI_MODEL',\n    EXPORT_ANNOTATIONS = 'EXPORT_ANNOTATIONS',\n    IMPORT_ANNOTATIONS = 'IMPORT_ANNOTATIONS',\n    INSERT_LABEL_NAMES = 'INSERT_LABEL_NAMES',\n    EXIT_PROJECT = 'EXIT_PROJECT',\n    LOADER = 'LOADER'\n}\n","/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n  \n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  \n      http://www.apache.org/licenses/LICENSE-2.0\n  \n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.                                                                              *\n ******************************************************************************************************************** */\nimport { FunctionComponent, useMemo } from 'react';\nimport AppLayoutBase from 'aws-northstar/layouts/AppLayout';\nimport HeaderBase from 'aws-northstar/components/Header';\nimport SideNavigationBase, { SideNavigationItemType } from 'aws-northstar/components/SideNavigation';\nimport BreadcrumbGroup from 'aws-northstar/components/BreadcrumbGroup';\n\nconst AppLayout: FunctionComponent = ({ children }) => {\n    const Header = useMemo(\n        () => <HeaderBase title=\"All-In-One AI\" logoPath=\"/ml.jpg\" />,\n        []\n    );\n    const Breadcrumbs = useMemo(() => <BreadcrumbGroup rootPath=\"Home\" />, []);\n    const SideNavigation = useMemo(() => {\n        return (\n            <SideNavigationBase\n                header={{ text: 'Home', href: '/' }}\n                items={[\n                    {\n                        \"type\": SideNavigationItemType.SECTION,\n                        \"text\": \"Scenarios\",\n                        \"items\": [\n                            { text: 'PPE Detector', type: SideNavigationItemType.LINK, href: '/scenarios/ppe' },\n                            { text: 'Track maintenance', type: SideNavigationItemType.LINK, href: '/scenarios/ppe' },\n                            { text: 'Intelligent steaming videos', type: SideNavigationItemType.LINK, href: '/scenarios/ppe' },                                                        \n                            { text: 'Shelf recognition', type: SideNavigationItemType.LINK, href: '/scenarios/ppe' }\n                        ]\n                    },\n                    {\n                        \"type\": SideNavigationItemType.SECTION,\n                        \"text\": \"Use cases\",\n                        \"items\": [\n                            { text: 'Track detection', type: SideNavigationItemType.LINK, href: '/case/track/demo' },\n                            { text: 'Mask detection', type: SideNavigationItemType.LINK, href: '/case/mask/demo' },\n                            { text: 'Helmet detection', type: SideNavigationItemType.LINK, href: '/case/helmet/demo' },                                                        \n                            { text: 'Receipt recognition', type: SideNavigationItemType.LINK, href: '/case/receipt/demo' },\n                            { text: 'Insurance report recogniton', type: SideNavigationItemType.LINK, href: '/case/insurance/demo' },\n                        ]\n                    },\n                    {\n                        \"type\": SideNavigationItemType.SECTION,\n                        \"text\": \"Models\",\n                        \"items\": [\n                            { text: 'Yolov5', type: SideNavigationItemType.LINK, href: '/model/yolov5' },\n                            { text: 'Paddle', type: SideNavigationItemType.LINK, href: '/model/yolov5' }\n                        ]\n                    }\n                ]}\n            ></SideNavigationBase>\n        );\n    }, []);\n\n    return (\n        <AppLayoutBase header={Header} navigation={SideNavigation} breadcrumbs={Breadcrumbs}>\n            {children}\n        </AppLayoutBase>\n    );\n};\n\nexport default AppLayout;\n","import { FunctionComponent } from 'react';\nimport { Heading, Paper, Stack, Box, Text } from 'aws-northstar';\n\nconst Dashboard: FunctionComponent = () => {\n    return (\n        <Paper>\n            <Box p={1} width=\"100%\">\n                <Stack spacing=\"xs\">\n                    <Heading variant='h1'>All-In-One AI</Heading>\n                    <Text>\n                        <b>Introduction</b>\n                    </Text>\n                    <Text variant=\"p\">\n                        2022 Gartner Survey revealed a 3.6% year-over-year growth rate, the fastest in more than a decade. In terms of specific technologies driving this surge in expenditure would be artificial intelligence (AI) and machine learning (ML), accounting for a whopping 48% of the whole pie. The survey also highlights the relative immaturity of AI technologies compared to the other innovation areas. Just over half of respondents report significant target customer adoption of their AI-enabled products and services. 41% of respondents cited AI emerging technologies as still being in development or early adoption stages, meaning there is a wave of potential adoption as new or augmented AI products and services enter general availability. \nTechnology immaturity is cited as a top reason among AI-investing organizations leading to failure when integrating an emerging technology. Furthermore, product leaders investing in AI whose implementations are progressing slower than expected reported product complexity and a lack of skills as the main hindrances to their progress. There are a couple of industry AI/ML models built on top of AWS SageMaker as the supplement of AWS managed AI/ML services. Those AI/ML models are scattered, lack of web visualization, and not ready to present to customer directly, especially for the customers’ business staff. The customers may not aware of the existing matured AI/ML models which can solve their complex business problems. It will be nice to allow the customers to get aware of the matured AI/ML models existing in AWS for specific industry AI/ML scenarios and experience the AI/ML models in an intuitive way and adopt directly or after customization.</Text>\n                    <Text>\n                        <b>Who are the customers, their persona, and their pain points</b>\n                    </Text>\n                    <Text variant='p'>\n                        The customers can be defined as business related (business owner and business operation) and IT related (data scientist and application developer). Business owner is more focused on the business impact in general and usually it is the decision-maker. Business operation is more focused on daily business operation and usually it is the end-user of the business operation system. Data scientist is more focused on the creation, fine-tuning and performance measurement of the AI/ML model which will be used in the business operation system. Application developer is more focused on the engineering implementation of the business operation system. To be simplified, term “Business” will represent the business owner and business operation in short and term “IT” will represent the data scientist and application developer in short. \n                    </Text>\n                    <Text>\n                        <b>What will our solution look like?</b>\n                    </Text>\n                    <Text variant='p'>\n                        Our solution will sort out all the existing industry AI/ML models, figure out the specific AI/ML scenario and underlying AI/ML models, facilitate the pipeline from model training, endpoint deployment and data inference in the cloud and in the edge device, visualize the whole process, and present to the customers’ Business and IT. Typically our solution will consist of some specific industry AI/ML scenarios, underlying AI/ML models packaged as bundle, common AI/ML pipeline framework, common visualization framework, and demo website.                     </Text>\n                    <Text>\n                        <b>What’s the to-be customer/partner/AWS journey?</b>\n                    </Text>\n                    <Text variant='p'>\n                        AWS builds this solution for some specific industry AI/ML scenarios with underlying AI/ML models packaged as bundle, common AI/ML pipeline framework, common visualization framework, and demo website. AWS promote this solution internally and externally. AWS sorts out suitable partners and co-works with partners to host the demo website and promote the solution to market. Customers hope to achieve business growth and data safety, reduce human efforts via AI/ML capability with lower cost and easy to use to solve complex business problem in specific industry AI/ML scenarios. Customers get aware of our solution from social media, marketing events, SEO, open-source project, technical blogs, and demo websites hosted by partners and AWS. Customers experience the demo websites and then contact partners or AWS. AWS invite partners to be involved in the opportunities. Partner co-works with customers to collect business requirement, identify the pain point, clarify the budget and project scope, and figure out the core technical problems. Customers deploy this solution into their AWS account. Customers may adopt the AI/ML models directly or customize with fine-tuned versions by themselves or co-working with partners or even AWS. The fine-tuned AI/ML models get integrated with this solution to accumulate AI/ML capabilities.  Customers evaluate the business impact. Customers co-work with partners and AWS on marketing promotion. Customers may move more workloads to AWS. Partners may extend their product lines after acquiring more AI/ML capabilities by integrating with this solution.                    </Text>\n                </Stack>\n            </Box>\n        </Paper>\n    )\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport { Stage, Layer, Image, Rect, Text } from 'react-konva';\n\nconst uuid = require('uuid');\n\nconst colormap = [\n    '#ff3838',\n    '#ff9d97',\n    '#ff701f',\n    '#ffb21d',\n    '#cff231',\n    '#48f90a',\n    '#92cc17',\n    '#3ddb86',\n    '#1a9334',\n    '#00d4bb',\n    '#2c99a8',\n    '#00c2ff',\n    '#344593',\n    '#6473ff',\n    '#0018ec',\n    '#8438ff',\n    '#520085',\n    '#cb38ff',\n    '#ff95c8',\n    '#ff37c7'\n]\n\nclass URLImage extends React.Component {\n    state = {\n        image: null,\n        width: 0,\n        height: 0\n    };\n  \n    componentDidMount() {\n        this.loadImage();\n    }\n  \n    componentDidUpdate(oldProps) {\n        if (oldProps.src !== this.props.src) {\n            this.loadImage();\n        }\n    }\n  \n    componentWillUnmount() {\n        this.image.removeEventListener('load', this.handleLoad);\n    }\n  \n    loadImage() {\n        this.image = new window.Image();\n        this.image.src = this.props.src;\n        this.image.addEventListener('load', this.handleLoad);\n    }\n  \n    handleLoad = () => {\n        this.setState({\n          image: this.image, \n          width: this.image.width, \n          height: this.image.height\n        });\n    };\n  \n    render() {\n      if(this.props.label.length === 0)\n            return (\n                <Stage width={this.state.width} height={this.state.height}>\n                  <Layer>\n                    <Image\n                      x={this.props.x}\n                      y={this.props.y}\n                      image={this.state.image}\n                      ref={node => {\n                        this.imageNode = node;\n                      }}\n                    />\n                  </Layer>\n                </Stage>\n            );\n        else {\n            return (\n              <Stage width={this.state.width + 500} height={this.state.height}>\n                <Layer>\n                  <Image\n                      x = {this.props.x}\n                      y = {this.props.y}\n                      image = {this.state.image}\n                      ref={node => {\n                          this.imageNode = node;\n                      }}\n                  />\n                  {                    \n                    this.props.bbox.map((bbox, index) => (\n                        <Rect \n                            key = {uuid.v4()}\n                            x = {Math.floor(((parseFloat(bbox[0]) - parseFloat(bbox[2]) / 2) * this.state.width))}\n                            y = {Math.floor(((parseFloat(bbox[1]) - parseFloat(bbox[3]) / 2) * this.state.height))}\n                            width = {Math.floor( parseFloat(bbox[2]) * this.state.width)}\n                            height = {Math.floor( parseFloat(bbox[3]) * this.state.height)}\n                            stroke = {colormap[index]}\n                        />\n                      )\n                    )\n                  }\n                  {\n                    this.props.bbox.map((bbox, index) => (\n                        <Rect\n                            x = {this.state.width + 60}\n                            y = {index * 20 + 5}\n                            width = {30}\n                            height = {10}\n                            fill = {colormap[index % colormap.length]}\n                        />\n                      )\n                    )\n                  }\n                  {\n                    this.props.bbox.map((bbox, index) => (\n                        <Text\n                            text = {this.props.label[index]}\n                            x = {this.state.width + 100}\n                            y = {index * 20}\n                            fontFamily='Times New Roman'\n                            fontSize={18}\n                        />\n                      )\n                    )\n                  }\n                </Layer>\n              </Stage>\n            );\n        }\n    }\n}\n\nexport default URLImage;","import { FunctionComponent, useState } from 'react';\nimport FileUpload from 'aws-northstar/components/FileUpload';\nimport Container from 'aws-northstar/layouts/Container';\nimport axios from 'axios';\nimport URLImage from '../../Utils/URLImage';\nimport FormField from 'aws-northstar/components/FormField'\nimport Button from 'aws-northstar/components/Button'\nimport { Stack } from 'aws-northstar';\n\ninterface FileMetadata {\n    name: string;\n    type?: string;\n    size?: number;\n    lastModified?: number;\n}\n\nconst InferenceForm: FunctionComponent = () => {\n    const [filename, setFilename] = useState('')\n    const [label, setLabel] = useState<string[]>([])\n    const [bbox, setBbox] = useState<string[][]>([])\n\n    const onChange = (files: (File | FileMetadata)[]) => {\n        axios.post('/image', files[0])\n        .then((response) => {\n            var filename : string = response.data;\n            setFilename('/image/' + filename);\n            setLabel([]);\n        }, (error) => {\n            console.log(error);\n        });\n    }\n\n    const onClick = () => {\n        axios.get('/inference' + filename)\n        .then((response) => {\n            var tlabel = [];\n            var tbbox = [];\n            for(let item of response.data) {\n                tlabel.push(item.label)\n                var numbers = item.bbox.toString().split(',');\n                tbbox.push(numbers);\n            }\n            setLabel(tlabel);\n            setBbox(tbbox);\n        }, (error) => {\n            console.log(error);\n        });\n    }\n\n    if(filename === '')\n        return (\n            <Stack>\n                <Container title=\"Select image file from local disk\">\n                    <FileUpload\n                        controlId=\"file1\"\n                        onChange={onChange}\n                    ></FileUpload>\n                </Container>\n                <Container title=\"Start inference\">\n                    <FormField controlId='button'>\n                        <Button variant=\"primary\" onClick={onClick}>Inference</Button>\n                    </FormField>\n                </Container>\n            </Stack>\n        )\n    else\n        return (\n            <Stack>\n                <Container title=\"Select image file from local disk\">\n                    <FileUpload\n                        controlId=\"file1\"\n                        onChange={onChange}\n                    ></FileUpload>\n                </Container>\n                <Container title=\"Start inference\">\n                    <FormField controlId='button'>\n                        <URLImage src={filename} label={label} bbox={bbox}/>\n                    </FormField>                \n                    <FormField controlId='button'>\n                        <Button variant=\"primary\" onClick={onClick}>Inference</Button>\n                    </FormField>\n                </Container>\n            </Stack>\n        )\n}\n\nexport default InferenceForm;","import React, { FunctionComponent, ComponentType, useState } from 'react';\nimport Select from 'aws-northstar/components/Select';\nimport { SvgIconProps } from '@material-ui/core/SvgIcon';\nimport { SelectOption } from 'aws-northstar/components/Select/types';\n\ntype ButtonIconType =\n    | 'add_plus'\n    | 'copy'\n    | 'external'\n    | 'folder'\n    | 'refresh'\n    | 'settings'\n    | ComponentType<SvgIconProps>;\n\ntype OnChange = (name: string, value: string) => void\n\ninterface SimpleSelectProps {\n    options: SelectOption[];\n    onChange: OnChange;\n    name: string;\n    placeholder: string;\n}\n\nconst SimpleSelect: FunctionComponent<SimpleSelectProps> = (props: SimpleSelectProps) => {\n    const [selectedOption, setSeletedOption] = React.useState<SelectOption>();\n\n    const onChange = (event: any) => {\n        setSeletedOption({ value: event.target.value });\n        props.onChange(props.name, event.target.value)\n    };\n\n    return (\n                <Select\n                    placeholder={props.placeholder}\n                    options={props.options}\n                    selectedOption={selectedOption}\n                    onChange={onChange}\n                />\n    );\n}\n\nexport default SimpleSelect;","import React, { FunctionComponent, useState } from 'react';\nimport Stack from 'aws-northstar/layouts/Stack';\nimport FormSection from 'aws-northstar/components/FormSection';\nimport FormField from 'aws-northstar/components/FormField';\nimport Input from 'aws-northstar/components/Input';\nimport SimpleSelect from '../../Utils/SimpleSelect'\nimport Button from 'aws-northstar/components/Button';\nimport Inline from 'aws-northstar/layouts/Inline';\n\ninterface SelectOption {\n    label?: string;\n    value?: string;\n    options?: SelectOption[];\n}\n\nconst optionsData : SelectOption[]= [\n    { label: 'S3Prefix', value: 'S3Prefix' },\n    { label: 'ManifestFile', value: 'ManifestFile' }\n];\n\nconst optionsContent : SelectOption[]= [\n    { label: 'image/png', value: 'image/png' },\n    { label: 'image/jpg', value: 'image/jpg' },\n    { label: 'image/jpeg', value: 'image/jpeg' }\n];\n\nconst optionsModel : SelectOption[]= [\n    { label: 'moodel-1', value: 'model-1' }\n];\n\nconst optionsInstance : SelectOption[]= [\n    {\n        label: 'Standard', \n        options: [ \n            { label: 'ml.m5.large', value: 'ml.m5.large' }, \n            { label: 'ml.m5.2large', value: 'ml.m5.xlarge' }, \n            { label: 'ml.m5.2large', value: 'ml.m5.2xlarge' }, \n            { label: 'ml.m5.4large', value: 'ml.m5.4xlarge' }, \n            { label: 'ml.m5.12large', value: 'ml.m5.12xlarge' }, \n            { label: 'ml.m5.24large', value: 'ml.m5.24xlarge' }\n        ]\n    },\n    {\n        label: 'Compute optimized', \n        options: [ \n            { label: 'ml.c5.xlarge', value: 'ml.c5.xlarge' },\n            { label: 'ml.c5.2xlarge', value: 'ml.c5.2xlarge' },\n            { label: 'ml.c5.4xlarge', value: 'ml.c5.4xlarge' },\n            { label: 'ml.c5.9xlarge', value: 'ml.c5.9xlarge' },\n            { label: 'ml.c5.18xlarge', value: 'ml.c5.18xlarge' }\n        ]\n    }\n];\n\ntype OnChange = (name: string, value: string) => void\n\nconst TransformForm: FunctionComponent = () => {\n    const [stateData, setStateData] = React.useState('');\n    const [stateContent, setStateContent] = React.useState('');\n    const [stateInstance, setStateInstance] = React.useState('');\n\n    const onChange : OnChange = (name: string, value: string) => {\n        if(name === 'data')\n            setStateData(value);\n        if(name === 'content')\n            setStateContent(value);\n        if(name === 'instance')\n            setStateInstance(value);\n    }\n    \n    return (\n        <Stack spacing='s'>\n            <FormSection header=\"Job configuration\">\n                <FormField label=\"Model\" controlId=\"formFieldId1\">\n                    <SimpleSelect\n                        placeholder=\"Choose an option\"\n                        name = 'model'\n                        options={optionsModel}\n                        onChange={onChange}\n                    />\n                </FormField>\n                <FormField label=\"Instance Type\" controlId=\"formFieldId3\">\n                    <SimpleSelect\n                        placeholder=\"Choose an option\"\n                        name = 'content'\n                        options={optionsInstance}\n                        onChange={onChange}\n                    />\n                </FormField>\n                <FormField label=\"Instance count\" controlId=\"formFieldId3\">\n                    <Input value = '1'> </Input>\n                </FormField>\n                <FormField label=\"Max concurrent transforms\" controlId=\"formFieldId3\">\n                    <Input value = '1'> </Input>\n                </FormField>\n            </FormSection>\n            <FormSection header=\"Input configuration\">\n                <FormField label=\"Data type\" controlId=\"formFieldId1\">\n                    <SimpleSelect\n                        placeholder=\"Choose an option\"\n                        name = 'data'\n                        options={optionsData}\n                        onChange={onChange}\n                    />\n                </FormField>\n                <FormField label=\"S3 input path\" controlId=\"formFieldId1\">\n                    <Input type=\"text\" controlId=\"formFieldId2\" placeholder='S3Uri'/>\n                </FormField>\n\n                <FormField label=\"Content type\" controlId=\"formFieldId3\">\n                    <SimpleSelect\n                        placeholder=\"Choose an option\"\n                        name = 'content'\n                        options={optionsContent}\n                        onChange={onChange}\n                    />\n                </FormField>\n            </FormSection>\n            <FormSection header=\"Output configuration\">\n                <FormField label=\"S3 output path\" controlId=\"formFieldId1\">\n                    <Input type=\"text\" controlId=\"formFieldId2\" placeholder='S3Uri'/>\n                </FormField>\n            </FormSection>\n            <FormField controlId='button'>\n                <Inline>\n                    <Button>Cancel</Button>\n                    <Button variant=\"primary\">Start</Button>\n                </Inline>\n            </FormField>\n        </Stack>\n    );\n}\n\nexport default TransformForm;","import {PopupWindowType} from '../data/enums/PopupWindowType';\n\nexport class Settings {\n    public static readonly GITHUB_URL: string = 'https://github.com/SkalskiP';\n    public static readonly MEDIUM_URL: string = 'https://medium.com/@piotr.skalski92';\n    public static readonly PATREON_URL: string = 'https://www.patreon.com/make_sense';\n\n    public static readonly TOP_NAVIGATION_BAR_HEIGHT_PX: number = 35;\n    public static readonly EDITOR_BOTTOM_NAVIGATION_BAR_HEIGHT_PX: number = 40 + 1;\n    public static readonly EDITOR_TOP_NAVIGATION_BAR_HEIGHT_PX: number = 40 + 1;\n    public static readonly SIDE_NAVIGATION_BAR_WIDTH_CLOSED_PX: number = 23 + 1;\n    public static readonly SIDE_NAVIGATION_BAR_WIDTH_OPEN_PX: number = Settings.SIDE_NAVIGATION_BAR_WIDTH_CLOSED_PX + 300 + 1;\n    public static readonly TOOLKIT_TAB_HEIGHT_PX: number = 40;\n    public static readonly TOOLBOX_PANEL_WIDTH_PX: number = 50 + 1;\n\n    public static readonly EDITOR_MIN_WIDTH: number = 900;\n    public static readonly EDITOR_MIN_HEIGHT: number = 500;\n\n    public static readonly PRIMARY_COLOR: string = '#2af598';\n    public static readonly SECONDARY_COLOR: string = '#009efd';\n\n    public static readonly DARK_THEME_FIRST_COLOR: string = '#171717';\n    public static readonly DARK_THEME_SECOND_COLOR: string = '#282828';\n    public static readonly DARK_THEME_THIRD_COLOR: string = '#4c4c4c';\n    public static readonly DARK_THEME_FORTH_COLOR: string = '#262c2f';\n\n    public static readonly CROSS_HAIR_THICKNESS_PX: number = 1;\n    public static readonly CROSS_HAIR_COLOR: string = '#fff';\n\n    public static readonly RESIZE_HANDLE_DIMENSION_PX: number = 8;\n    public static readonly RESIZE_HANDLE_HOVER_DIMENSION_PX = 16;\n\n    public static readonly CLOSEABLE_POPUPS: PopupWindowType[] = [\n        PopupWindowType.IMPORT_IMAGES,\n        PopupWindowType.EXPORT_ANNOTATIONS,\n        PopupWindowType.IMPORT_ANNOTATIONS,\n        PopupWindowType.EXIT_PROJECT,\n        PopupWindowType.UPDATE_LABEL\n    ];\n\n    public static readonly LABEL_COLORS_PALETTE = [\n        '#ff3838',\n        '#ff9d97',\n        '#ff701f',\n        '#ffb21d',\n        '#cff231',\n        '#48f90a',\n        '#92cc17',\n        '#3ddb86',\n        '#1a9334',\n        '#00d4bb',\n        '#2c99a8',\n        '#00c2ff',\n        '#344593',\n        '#6473ff',\n        '#0018ec',\n        '#8438ff',\n        '#520085',\n        '#cb38ff',\n        '#ff95c8',\n        '#ff37c7'\n    ]\n}\n","export enum LabelType {\n    IMAGE_RECOGNITION = 'IMAGE RECOGNITION',\n    POINT = 'POINT',\n    RECT = 'RECT',\n    POLYGON = 'POLYGON',\n    LINE = 'LINE'\n}","import {ISize} from \"../interfaces/ISize\";\nimport {IPoint} from \"../interfaces/IPoint\";\n\nexport class VirtualListUtil {\n    public static calculateGridSize(listSize: ISize, childSize: ISize, childCount: number): ISize {\n        const columnCount: number = Math.floor(listSize.width / childSize.width);\n        const rowCount: number = Math.ceil(childCount / columnCount);\n        return {width: columnCount, height: rowCount};\n    }\n\n    public static calculateContentSize(listSize: ISize, childSize: ISize, gridSize: ISize): ISize {\n        const sizeFromGrid:ISize = {\n            width: childSize.width * gridSize.width,\n            height: childSize.height * gridSize.height\n        };\n\n        return {\n            width: Math.max(listSize.width, sizeFromGrid.width),\n            height: sizeFromGrid.height\n        }\n    }\n\n    public static calculateAnchorPoints(listSize: ISize, childSize: ISize, childCount: number): IPoint[] {\n        const gridSize: ISize = VirtualListUtil.calculateGridSize(listSize, childSize, childCount);\n        const contentWrapperSize: ISize = VirtualListUtil.calculateContentSize(listSize, childSize, gridSize);\n        const horizontalMargin = (contentWrapperSize.width - gridSize.width * childSize.width) / (gridSize.width + 1);\n\n        let anchors = [];\n        for (let i = 0; i < childCount; i++) {\n            const rowCount: number = Math.floor(i / gridSize.width);\n            const columnCount: number = i % gridSize.width;\n\n            const anchor: IPoint = {\n                x: rowCount * horizontalMargin + columnCount * childSize.width,\n                y: rowCount * childSize.height\n            };\n            anchors.push(anchor);\n        }\n        return anchors;\n    }\n}","export class NumberUtil {\n    public static snapValueToRange(value: number, min: number, max: number): number {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    }\n\n    public static isValueInRange(value: number, min: number, max: number): boolean {\n        return value >= min && value <= max;\n    }\n}\n","import {IRect} from \"../interfaces/IRect\";\nimport {IPoint} from \"../interfaces/IPoint\";\nimport {ISize} from \"../interfaces/ISize\";\nimport {RectAnchor} from \"../data/RectAnchor\";\nimport {NumberUtil} from \"./NumberUtil\";\nimport {Direction} from \"../data/enums/Direction\";\n\nexport class RectUtil {\n    public static getRatio(rect: IRect): number {\n        if (!rect) return null;\n\n        return rect.width/rect.height\n    }\n\n    public static intersect(r1: IRect, r2: IRect) {\n        if (!r1 || !r2) return null;\n        return !(\n            r2.x > r1.x + r1.width ||\n            r2.x + r2.width < r1.x ||\n            r2.y > r1.y + r1.height ||\n            r2.y + r2.height < r1.y\n        );\n    }\n\n    public static isPointInside(rect: IRect, point: IPoint): boolean {\n        if (!rect || !point) return null;\n        return (\n            rect.x < point.x &&\n            rect.x + rect.width > point.x &&\n            rect.y < point.y &&\n            rect.y + rect.height > point.y\n        )\n    }\n\n    public static getRectWithCenterAndSize(centerPoint: IPoint, size: ISize): IRect {\n        return {\n            x: centerPoint.x - 0.5 * size.width,\n            y: centerPoint.y - 0.5 * size.height,\n            ...size\n        }\n    }\n\n    public static fitInsideRectWithRatio(containerRect: IRect, ratio: number): IRect {\n        const containerRectRatio = RectUtil.getRatio(containerRect);\n        if (containerRectRatio < ratio) {\n            const innerRectHeight = containerRect.width / ratio;\n            return {\n                x: containerRect.x,\n                y: containerRect.y + (containerRect.height - innerRectHeight) / 2,\n                width: containerRect.width,\n                height: innerRectHeight\n            }\n        }\n        else {\n            const innerRectWidth = containerRect.height * ratio;\n            return {\n                x: containerRect.x + (containerRect.width - innerRectWidth) / 2,\n                y: containerRect.y,\n                width: innerRectWidth,\n                height: containerRect.height\n            }\n        }\n    }\n\n    public static resizeRect(inputRect: IRect, rectAnchor: Direction, delta): IRect {\n        const rect: IRect = {...inputRect};\n        switch (rectAnchor) {\n            case Direction.RIGHT:\n                rect.width += delta.x;\n                break;\n            case Direction.BOTTOM_RIGHT:\n                rect.width += delta.x;\n                rect.height += delta.y;\n                break;\n            case Direction.BOTTOM:\n                rect.height += delta.y;\n                break;\n            case Direction.TOP_RIGHT:\n                rect.width += delta.x;\n                rect.y += delta.y;\n                rect.height -= delta.y;\n                break;\n            case Direction.TOP:\n                rect.y += delta.y;\n                rect.height -= delta.y;\n                break;\n            case Direction.TOP_LEFT:\n                rect.x += delta.x;\n                rect.width -= delta.x;\n                rect.y += delta.y;\n                rect.height -= delta.y;\n                break;\n            case Direction.LEFT:\n                rect.x += delta.x;\n                rect.width -= delta.x;\n                break;\n            case Direction.BOTTOM_LEFT:\n                rect.x += delta.x;\n                rect.width -= delta.x;\n                rect.height += delta.y;\n                break;\n        }\n\n        if (rect.width < 0)  {\n            rect.x = rect.x + rect.width;\n            rect.width = - rect.width;\n        }\n\n        if (rect.height < 0)  {\n            rect.y = rect.y + rect.height;\n            rect.height = - rect.height;\n        }\n\n        return rect;\n    }\n\n    public static translate(rect: IRect, delta: IPoint): IRect {\n        return {\n            ...rect,\n            x: rect.x + delta.x,\n            y: rect.y + delta.y\n        }\n    }\n\n    public static expand(rect: IRect, delta: IPoint): IRect {\n        return {\n            x: rect.x - delta.x,\n            y: rect.y - delta.y,\n            width: rect.width + 2 * delta.x,\n            height: rect.height + 2 * delta.y\n        }\n    }\n\n    public static scaleRect(rect:IRect, scale: number): IRect {\n        return {\n            x: rect.x * scale,\n            y: rect.y * scale,\n            width: rect.width * scale,\n            height: rect.height * scale\n        }\n    }\n\n    public static mapRectToAnchors(rect: IRect): RectAnchor[] {\n        return [\n            {type: Direction.TOP_LEFT, position: {x: rect.x, y: rect.y}},\n            {type: Direction.TOP, position: {x: rect.x + 0.5 * rect.width, y: rect.y}},\n            {type: Direction.TOP_RIGHT, position: {x: rect.x + rect.width, y: rect.y}},\n            {type: Direction.LEFT, position: {x: rect.x, y: rect.y + 0.5 * rect.height}},\n            {type: Direction.RIGHT, position: {x: rect.x + rect.width, y: rect.y + 0.5 * rect.height}},\n            {type: Direction.BOTTOM_LEFT, position: {x: rect.x, y: rect.y + rect.height}},\n            {type: Direction.BOTTOM, position: {x: rect.x + 0.5 * rect.width, y: rect.y + rect.height}},\n            {type: Direction.BOTTOM_RIGHT, position: {x: rect.x + rect.width, y: rect.y + rect.height}}\n        ]\n    }\n\n    public static snapPointToRect(point: IPoint, rect: IRect): IPoint {\n        if (RectUtil.isPointInside(rect, point))\n            return point;\n\n        return {\n            x: NumberUtil.snapValueToRange(point.x, rect.x, rect.x + rect.width),\n            y: NumberUtil.snapValueToRange(point.y, rect.y, rect.y + rect.height)\n        }\n    }\n\n    public static getCenter(rect: IRect): IPoint {\n        return {\n            x: rect.x + rect.width / 2,\n            y: rect.y + rect.height / 2\n        }\n    }\n\n    public static getSize(rect: IRect): ISize {\n        return {\n            width: rect.width,\n            height: rect.height\n        }\n    }\n}\n","import React from 'react';\nimport {ISize} from \"../../../interfaces/ISize\";\nimport {IRect} from \"../../../interfaces/IRect\";\nimport Scrollbars from 'react-custom-scrollbars';\nimport {VirtualListUtil} from \"../../../utils/VirtualListUtil\";\nimport {IPoint} from \"../../../interfaces/IPoint\";\nimport {RectUtil} from \"../../../utils/RectUtil\";\n\ninterface IProps {\n    size: ISize;\n    childCount: number;\n    childSize: ISize;\n    childRender: (index: number, isScrolling: boolean, isVisible: boolean, style: React.CSSProperties) => any;\n    overScanHeight?: number;\n}\n\ninterface IState {\n    viewportRect: IRect;\n    isScrolling: boolean;\n}\n\nexport class VirtualList extends React.Component<IProps, IState> {\n    private gridSize: ISize;\n    private contentSize: ISize;\n    private childAnchors: IPoint[];\n    private scrollbars: Scrollbars;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            viewportRect: null,\n            isScrolling: false\n        };\n    }\n\n    public componentDidMount(): void {\n        const {size, childSize, childCount} = this.props;\n        this.calculate(size, childSize, childCount);\n        this.setState({\n            viewportRect: {\n                x: 0,\n                y: 0,\n                width: this.props.size.width,\n                height: this.props.size.height\n            }\n        });\n    }\n\n    public componentWillUpdate(nextProps: Readonly<IProps>, nextState: Readonly<IState>, nextContext: any): void {\n        const {size, childSize, childCount} = nextProps;\n        if (this.props.size.height !== size.height || this.props.size.width !== size.width ||\n            this.props.childCount !== childCount) {\n            this.calculate(size, childSize, childCount);\n            this.setState({\n                viewportRect: {\n                    x: this.scrollbars.getValues().scrollLeft,\n                    y: this.scrollbars.getValues().scrollTop,\n                    width: size.width,\n                    height: size.height\n                }\n            });\n        }\n    }\n\n    private calculate = (size: ISize, childSize: ISize, childCount: number) => {\n        this.gridSize = VirtualListUtil.calculateGridSize(size, childSize, childCount);\n        this.contentSize = VirtualListUtil.calculateContentSize(size, childSize, this.gridSize);\n        this.childAnchors = VirtualListUtil.calculateAnchorPoints(size, childSize, childCount);\n    };\n\n    private getVirtualListStyle = ():React.CSSProperties => {\n        return {\n            position: \"relative\",\n            width: this.props.size.width,\n            height: this.props.size.height,\n        }\n    };\n\n    private getVirtualListContentStyle = ():React.CSSProperties => {\n        return {\n            width: this.contentSize.width,\n            height: this.contentSize.height,\n        }\n    };\n\n    private onScrollStart = () => {\n        this.setState({isScrolling: true});\n    };\n\n    private onScrollStop = () => {\n        this.setState({isScrolling: false});\n    };\n\n    private onScroll = (values) => {\n        this.setState({\n            viewportRect: {\n                x: values.scrollLeft,\n                y: values.scrollTop,\n                width: this.props.size.width,\n                height: this.props.size.height\n            }\n        });\n    };\n\n    private getChildren = () => {\n        const {viewportRect, isScrolling} = this.state;\n        const {overScanHeight, childSize} = this.props;\n        const overScan: number = !!overScanHeight ? overScanHeight : 0;\n\n        const viewportRectWithOverScan:IRect = {\n            x: viewportRect.x,\n            y: viewportRect.y - overScan,\n            width: viewportRect.width,\n            height: viewportRect.height + 2 * overScan\n        };\n\n        return this.childAnchors.reduce((children, anchor: IPoint, index: number) => {\n            const childRect = Object.assign(anchor, childSize);\n            const isVisible = RectUtil.intersect(viewportRectWithOverScan, childRect);\n\n            if (isVisible) {\n                const childStyle: React.CSSProperties = {\n                    position: \"absolute\",\n                    left: anchor.x,\n                    top: anchor.y,\n                    width: childSize.width,\n                    height: childSize.height\n                };\n\n                return children.concat(this.props.childRender(index, isScrolling, isVisible, childStyle))\n            }\n            else {\n                return children;\n            }\n        }, [])\n    };\n\n    public render() {\n        const displayContent = !!this.props.size && !!this.props.childSize && !!this.gridSize;\n\n        return(\n            <div\n                className=\"VirtualList\"\n                style={this.getVirtualListStyle()}\n            >\n                <Scrollbars\n                    ref={ref => this.scrollbars = ref}\n                    onScrollFrame={this.onScroll}\n                    onScrollStart={this.onScrollStart}\n                    onScrollStop={this.onScrollStop}\n                    autoHide={true}\n                >\n                    {displayContent && <div\n                        className=\"VirtualListContent\"\n                        style={this.getVirtualListContentStyle()}\n                    >\n                        {this.getChildren()}\n                    </div>}\n                </Scrollbars>\n            </div>\n        )\n    }\n}","export class ImageLoadManager {\n\n\tprivate static queue: (() => Promise<any>)[] = [];\n\tprivate static isRunning: boolean = false;\n\n\tpublic static add(fx: Promise<any>) {\n\t\tImageLoadManager.queue.push(async () => await fx);\n\t}\n\n\tpublic static run() {\n\t\tsetTimeout(() => ImageLoadManager.runQueue(), 10);\n\t}\n\n\tpublic static addAndRun(fx: Promise<any>) {\n\t\tImageLoadManager.add(fx);\n\t\tImageLoadManager.run();\n\t}\n\n\tpublic static async runQueue() {\n\t\tif (!ImageLoadManager.isRunning) {\n\t\t\tImageLoadManager.isRunning = true;\n\t\t\tawait ImageLoadManager.runTasks();\n\t\t\tImageLoadManager.isRunning = false;\n\t\t}\n\t}\n\n\tprivate static async runTasks() {\n\t\twhile (ImageLoadManager.queue.length > 0) {\n\t\t\tconst fx = ImageLoadManager.queue.shift();\n\t\t\tawait fx();\n\t\t}\n\t}\n}","export enum Action {\n    // AI\n    UPDATE_SUGGESTED_LABEL_LIST = '@@UPDATE_SUGGESTED_LABEL_LIST',\n    UPDATE_REJECTED_SUGGESTED_LABEL_LIST = '@@UPDATE_REJECTED_SUGGESTED_LABEL_LIST',\n    UPDATE_OBJECT_DETECTOR_STATUS = '@@UPDATE_OBJECT_DETECTOR_STATUS',\n    UPDATE_POSE_DETECTOR_STATUS = '@@UPDATE_POSE_DETECTOR_STATUS',\n    UPDATE_DISABLED_AI_FLAG = '@@UPDATE_DISABLED_AI_FLAG',\n\n    // GENERAL\n    UPDATE_PROJECT_DATA = '@@UPDATE_PROJECT_DATA',\n    UPDATE_WINDOW_SIZE = '@@UPDATE_WINDOW_SIZE',\n    UPDATE_ACTIVE_POPUP_TYPE = '@@UPDATE_ACTIVE_POPUP_TYPE',\n    UPDATE_CUSTOM_CURSOR_STYLE = '@@UPDATE_CUSTOM_CURSOR_STYLE',\n    UPDATE_CONTEXT = '@@UPDATE_CONTEXT',\n    UPDATE_PREVENT_CUSTOM_CURSOR_STATUS = '@@UPDATE_PREVENT_CUSTOM_CURSOR_STATUS',\n    UPDATE_IMAGE_DRAG_MODE_STATUS = '@@UPDATE_IMAGE_DRAG_MODE_STATUS',\n    UPDATE_CROSS_HAIR_VISIBLE_STATUS = '@@UPDATE_CROSS_HAIR_VISIBLE_STATUS',\n    UPDATE_ENABLE_PER_CLASS_COLORATION_STATUS = '@@UPDATE_ENABLE_PER_CLASS_COLORATION_STATUS',\n    UPDATE_ZOOM = '@@UPDATE_ZOOM',\n\n    // LABELS\n    UPDATE_ACTIVE_IMAGE_INDEX = '@@UPDATE_ACTIVE_IMAGE_INDEX',\n    UPDATE_IMAGE_DATA_BY_ID = '@@UPDATE_IMAGE_DATA_BY_ID',\n    ADD_IMAGES_DATA = '@@ADD_IMAGES_DATA',\n    UPDATE_IMAGES_DATA = '@@UPDATE_IMAGES_DATA',\n    UPDATE_ACTIVE_LABEL_NAME_ID = '@@UPDATE_ACTIVE_LABEL_NAME_ID',\n    UPDATE_ACTIVE_LABEL_TYPE = '@@UPDATE_ACTIVE_LABEL_TYPE',\n    UPDATE_ACTIVE_LABEL_ID = '@@UPDATE_ACTIVE_LABEL_ID',\n    UPDATE_HIGHLIGHTED_LABEL_ID = '@@UPDATE_HIGHLIGHTED_LABEL_ID',\n    UPDATE_LABEL_NAMES = '@@UPDATE_LABEL_NAMES',\n    UPDATE_FIRST_LABEL_CREATED_FLAG = '@@UPDATE_FIRST_LABEL_CREATED_FLAG',\n\n    // NOTIFICATIONS\n    SUBMIT_NEW_NOTIFICATION = '@@SUBMIT_NEW_NOTIFICATION',\n    DELETE_NOTIFICATION_BY_ID = '@@DELETE_NOTIFICATION_BY_ID'\n}\n","import {zip} from \"lodash\";\n\nexport type ImageMap = { [s: string]: HTMLImageElement; };\n\nexport class ImageRepository {\n    private static repository: ImageMap = {};\n\n    public static storeImage(id: string, image: HTMLImageElement) {\n        ImageRepository.repository[id] = image;\n    }\n\n    public static storeImages(ids: string[], images: HTMLImageElement[]) {\n        zip(ids, images).forEach((pair: [string, HTMLImageElement]) => {\n            ImageRepository.storeImage(...pair);\n        })\n    }\n\n    public static getById(uuid: string): HTMLImageElement {\n        return ImageRepository.repository[uuid];\n    }\n}","import {LabelsActionTypes, ImageData, LabelName} from './types';\nimport {Action} from '../Actions';\nimport {LabelType} from '../../data/enums/LabelType';\n\nexport function updateActiveImageIndex(activeImageIndex: number): LabelsActionTypes {\n    return {\n        type: Action.UPDATE_ACTIVE_IMAGE_INDEX,\n        payload: {\n            activeImageIndex,\n        },\n    };\n}\n\nexport function updateActiveLabelNameId(activeLabelNameId: string): LabelsActionTypes {\n    return {\n        type: Action.UPDATE_ACTIVE_LABEL_NAME_ID,\n        payload: {\n            activeLabelNameId,\n        },\n    };\n}\n\nexport function updateActiveLabelId(activeLabelId: string): LabelsActionTypes {\n    return {\n        type: Action.UPDATE_ACTIVE_LABEL_ID,\n        payload: {\n            activeLabelId,\n        },\n    };\n}\n\nexport function updateHighlightedLabelId(highlightedLabelId: string): LabelsActionTypes {\n    return {\n        type: Action.UPDATE_HIGHLIGHTED_LABEL_ID,\n        payload: {\n            highlightedLabelId,\n        },\n    };\n}\n\nexport function updateActiveLabelType(activeLabelType: LabelType): LabelsActionTypes {\n    return {\n        type: Action.UPDATE_ACTIVE_LABEL_TYPE,\n        payload: {\n            activeLabelType,\n        },\n    };\n}\n\nexport function updateImageDataById(id: string, newImageData: ImageData): LabelsActionTypes {\n    return {\n        type: Action.UPDATE_IMAGE_DATA_BY_ID,\n        payload: {\n            id,\n            newImageData\n        },\n    };\n}\n\nexport function addImageData(imageData: ImageData[]): LabelsActionTypes {\n    return {\n        type: Action.ADD_IMAGES_DATA,\n        payload: {\n            imageData,\n        },\n    };\n}\n\nexport function updateImageData(imageData: ImageData[]): LabelsActionTypes {\n    return {\n        type: Action.UPDATE_IMAGES_DATA,\n        payload: {\n            imageData,\n        },\n    };\n}\n\nexport function updateLabelNames(labels: LabelName[]): LabelsActionTypes {\n    return {\n        type: Action.UPDATE_LABEL_NAMES,\n        payload: {\n            labels\n        }\n    }\n}\n\nexport function updateFirstLabelCreatedFlag(firstLabelCreatedFlag: boolean): LabelsActionTypes {\n    return {\n        type: Action.UPDATE_FIRST_LABEL_CREATED_FLAG,\n        payload: {\n            firstLabelCreatedFlag\n        }\n    }\n}\n","export class FileUtil {\n    public static loadImage(fileData: File): Promise<HTMLImageElement> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst url = URL.createObjectURL(fileData);\n            const image = new Image();\n\t\t\timage.src = url;\n\t\t\timage.onload = () => resolve(image);\n\t\t\timage.onerror = reject;\n\t\t})\n    }\n\n    public static loadImages(fileData: File[]): Promise<HTMLImageElement[]> {\n        return new Promise((resolve, reject) => {\n            const promises: Promise<HTMLImageElement>[] = fileData.map((fileData: File) => FileUtil.loadImage(fileData))\n            Promise\n                .all(promises)\n                .then((values: HTMLImageElement[]) => resolve(values))\n                .catch((error) => reject(error));\n        });\n    }\n\n    public static readFile(fileData: File): Promise<string> {\n        return new Promise((resolve, reject) => {\n            let reader = new FileReader();\n            reader.onloadend = (event: any) => {\n                resolve(event.target.result);\n            };\n            reader.onerror = reject;\n            reader.readAsText(fileData);\n        })\n    }\n\n    public static readFiles(fileData: File[]): Promise<string[]> {\n        return new Promise((resolve, reject) => {\n            const promises: Promise<string>[] = fileData.map((fileData: File) => FileUtil.readFile(fileData))\n            Promise\n                .all(promises)\n                .then((values: string[]) => resolve(values))\n                .catch((error) => reject(error));\n        });\n    }\n\n    public static extractFileExtension(name: string): string | null {\n        const parts = name.split(\".\");\n        return parts.length > 1 ? parts[parts.length - 1] : null;\n    }\n\n    public static extractFileName(name: string): string | null {\n        const splitPath = name.split(\".\");\n        let fName = \"\";\n        for(const idx of Array(splitPath.length - 1).keys()){\n            if(fName === \"\") fName += splitPath[idx];\n            else fName += \".\" + splitPath[idx];\n        }\n        return fName;\n    }\n}\n","export enum ContextType {\n    EDITOR = \"EDITOR\",\n    LEFT_NAVBAR = \"LEFT_NAVBAR\",\n    RIGHT_NAVBAR = \"RIGHT_NAVBAR\",\n    POPUP = \"POPUP\",\n    DROPDOWN = \"DROPDOWN\"\n}","import {store} from '../..';\n\nexport class AISelector {\n    public static getSuggestedLabelList(): string[] {\n        return store.getState().ai.suggestedLabelList;\n    }\n\n    public static getRejectedSuggestedLabelList(): string[] {\n        return store.getState().ai.rejectedSuggestedLabelList;\n    }\n\n    public static isAIObjectDetectorModelLoaded(): boolean {\n        return store.getState().ai.isObjectDetectorLoaded;\n    }\n\n    public static isAIPoseDetectorModelLoaded(): boolean {\n        return store.getState().ai.isPoseDetectorLoaded;\n    }\n\n    public static isAIDisabled(): boolean {\n        return store.getState().ai.isAIDisabled;\n    }\n}\n","import {Settings} from \"../../settings/Settings\";\nimport {AISelector} from \"../../store/selectors/AISelector\";\n\nexport class CSSHelper {\n    public static getLeadingColor(): string {\n        return AISelector.isAIObjectDetectorModelLoaded() ||\n            AISelector.isAIPoseDetectorModelLoaded() ? Settings.PRIMARY_COLOR : Settings.SECONDARY_COLOR;\n    }\n}","import classNames from \"classnames\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { ClipLoader } from \"react-spinners\";\nimport { ImageLoadManager } from \"../../../../logic/imageRepository/ImageLoadManager\";\nimport { IRect } from \"../../../../interfaces/IRect\";\nimport { ISize } from \"../../../../interfaces/ISize\";\nimport { ImageRepository } from \"../../../../logic/imageRepository/ImageRepository\";\nimport { AppState } from \"../../../../store\";\nimport { updateImageDataById } from \"../../../../store/labels/actionCreators\";\nimport { ImageData } from \"../../../../store/labels/types\";\nimport { FileUtil } from \"../../../../utils/FileUtil\";\nimport { RectUtil } from \"../../../../utils/RectUtil\";\nimport './ImagePreview.scss';\nimport { CSSHelper } from \"../../../../logic/helpers/CSSHelper\";\n\ninterface IProps {\n    imageData: ImageData;\n    style: React.CSSProperties;\n    size: ISize;\n    isScrolling?: boolean;\n    isChecked?: boolean;\n    onClick?: () => any;\n    isSelected?: boolean;\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\n}\n\ninterface IState {\n    image: HTMLImageElement;\n}\n\nclass ImagePreview extends React.Component<IProps, IState> {\n    private isLoading: boolean = false;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            image: null,\n        }\n    }\n\n    public componentDidMount(): void {\n        ImageLoadManager.addAndRun(this.loadImage(this.props.imageData, this.props.isScrolling));\n    }\n\n    public componentWillUpdate(nextProps: Readonly<IProps>, nextState: Readonly<IState>, nextContext: any): void {\n        if (this.props.imageData.id !== nextProps.imageData.id) {\n            if (nextProps.imageData.loadStatus) {\n                ImageLoadManager.addAndRun(this.loadImage(nextProps.imageData, nextProps.isScrolling));\n            }\n            else {\n                this.setState({ image: null });\n            }\n        }\n\n        if (this.props.isScrolling && !nextProps.isScrolling) {\n            ImageLoadManager.addAndRun(this.loadImage(nextProps.imageData, false));\n        }\n    }\n\n    shouldComponentUpdate(nextProps: Readonly<IProps>, nextState: Readonly<IState>, nextContext: any): boolean {\n        return (\n            this.props.imageData.id !== nextProps.imageData.id ||\n            this.state.image !== nextState.image ||\n            this.props.isSelected !== nextProps.isSelected ||\n            this.props.isChecked !== nextProps.isChecked\n        )\n    }\n\n    private loadImage = async (imageData: ImageData, isScrolling: boolean) => {\n        if (imageData.loadStatus) {\n            const image = ImageRepository.getById(imageData.id);\n            if (this.state.image !== image) {\n                this.setState({ image });\n            }\n        }\n        else if (!isScrolling || !this.isLoading) {\n            this.isLoading = true;\n            const saveLoadedImagePartial = (image: HTMLImageElement) => this.saveLoadedImage(image, imageData);\n            FileUtil.loadImage(imageData.fileData)\n                .then((image: HTMLImageElement) => saveLoadedImagePartial(image))\n                .catch((error) => this.handleLoadImageError())\n        }\n    };\n\n    private saveLoadedImage = (image: HTMLImageElement, imageData: ImageData) => {\n        imageData.loadStatus = true;\n        this.props.updateImageDataById(imageData.id, imageData);\n        ImageRepository.storeImage(imageData.id, image);\n        if (imageData.id === this.props.imageData.id) {\n            this.setState({ image });\n            this.isLoading = false;\n        }\n    };\n\n    private getStyle = () => {\n        const { size } = this.props;\n\n        const containerRect: IRect = {\n            x: 0.15 * size.width,\n            y: 0.15 * size.height,\n            width: 0.7 * size.width,\n            height: 0.7 * size.height\n        };\n\n        const imageRect: IRect = {\n            x: 0,\n            y: 0,\n            width: this.state.image.width,\n            height: this.state.image.height\n        };\n\n        const imageRatio = RectUtil.getRatio(imageRect);\n        const imagePosition: IRect = RectUtil.fitInsideRectWithRatio(containerRect, imageRatio);\n\n        return {\n            width: imagePosition.width,\n            height: imagePosition.height,\n            left: imagePosition.x,\n            top: imagePosition.y\n        }\n    };\n\n    private handleLoadImageError = () => { };\n\n    private getClassName = () => {\n        return classNames(\n            \"ImagePreview\",\n            {\n                \"selected\": this.props.isSelected,\n            }\n        );\n    };\n\n    public render() {\n        const {\n            isChecked,\n            style,\n            onClick\n        } = this.props;\n\n        return (\n            <div\n                className={this.getClassName()}\n                style={style}\n                onClick={onClick ? onClick : undefined}\n            >\n                {(!!this.state.image) ?\n                    [\n                        <div\n                            className=\"Foreground\"\n                            key={\"Foreground\"}\n                            style={this.getStyle()}\n                        >\n                            <img\n                                className=\"Image\"\n                                draggable={false}\n                                src={this.state.image.src}\n                                alt={this.state.image.alt}\n                                style={{ ...this.getStyle(), left: 0, top: 0 }}\n                            />\n                            {isChecked && <img\n                                className=\"CheckBox\"\n                                draggable={false}\n                                src={\"/ico/ok.png\"}\n                                alt={\"checkbox\"}\n                            />}\n                        </div>,\n                        <div\n                            className=\"Background\"\n                            key={\"Background\"}\n                            style={this.getStyle()}\n                        />\n                    ] :\n                    <ClipLoader\n                        size={30}\n                        color={CSSHelper.getLeadingColor()}\n                        loading={true}\n                    />}\n            </div>)\n    }\n}\n\nconst mapDispatchToProps = {\n    updateImageDataById\n};\n\nconst mapStateToProps = (state: AppState) => ({});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ImagePreview);","import {ISize} from '../../interfaces/ISize';\nimport {GeneralActionTypes, ProjectData} from './types';\nimport {Action} from '../Actions';\nimport {PopupWindowType} from '../../data/enums/PopupWindowType';\nimport {CustomCursorStyle} from '../../data/enums/CustomCursorStyle';\nimport {ContextType} from '../../data/enums/ContextType';\n\nexport function updateWindowSize(windowSize: ISize): GeneralActionTypes {\n    return {\n        type: Action.UPDATE_WINDOW_SIZE,\n        payload: {\n            windowSize,\n        },\n    };\n}\n\nexport function updateActivePopupType(activePopupType: PopupWindowType): GeneralActionTypes {\n    return {\n        type: Action.UPDATE_ACTIVE_POPUP_TYPE,\n        payload: {\n            activePopupType,\n        }\n    }\n}\n\nexport function updateCustomCursorStyle(customCursorStyle: CustomCursorStyle): GeneralActionTypes {\n    return {\n        type: Action.UPDATE_CUSTOM_CURSOR_STYLE,\n        payload: {\n            customCursorStyle,\n        }\n    }\n}\n\nexport function updateActiveContext(activeContext: ContextType): GeneralActionTypes {\n    return {\n        type: Action.UPDATE_CONTEXT,\n        payload: {\n            activeContext,\n        },\n    };\n}\n\nexport function updatePreventCustomCursorStatus(preventCustomCursor: boolean): GeneralActionTypes {\n    return {\n        type: Action.UPDATE_PREVENT_CUSTOM_CURSOR_STATUS,\n        payload: {\n            preventCustomCursor,\n        },\n    };\n}\n\nexport function updateImageDragModeStatus(imageDragMode: boolean): GeneralActionTypes {\n    return {\n        type: Action.UPDATE_IMAGE_DRAG_MODE_STATUS,\n        payload: {\n            imageDragMode,\n        },\n    };\n}\n\nexport function updateCrossHairVisibleStatus(crossHairVisible: boolean): GeneralActionTypes {\n    return {\n        type: Action.UPDATE_CROSS_HAIR_VISIBLE_STATUS,\n        payload: {\n            crossHairVisible,\n        },\n    };\n}\n\nexport function updateProjectData(projectData: ProjectData): GeneralActionTypes {\n    return {\n        type: Action.UPDATE_PROJECT_DATA,\n        payload: {\n            projectData,\n        },\n    };\n}\n\nexport function updateZoom(zoom: number): GeneralActionTypes {\n    return {\n        type: Action.UPDATE_ZOOM,\n        payload: {\n            zoom,\n        },\n    };\n}\n\nexport function updatePerClassColorationStatus(enablePerClassColoration: boolean): GeneralActionTypes {\n    return {\n        type: Action.UPDATE_ENABLE_PER_CLASS_COLORATION_STATUS,\n        payload: {\n            enablePerClassColoration,\n        },\n    };\n}\n","import {PrimaryEditorRenderEngine} from \"../logic/render/PrimaryEditorRenderEngine\";\nimport {BaseRenderEngine} from \"../logic/render/BaseRenderEngine\";\nimport {IRect} from \"../interfaces/IRect\";\nimport {IPoint} from \"../interfaces/IPoint\";\nimport {ISize} from \"../interfaces/ISize\";\nimport Scrollbars from \"react-custom-scrollbars\";\nimport {ViewPortHelper} from \"../logic/helpers/ViewPortHelper\";\n\nexport class EditorModel {\n    public static editor: HTMLDivElement;\n    public static canvas: HTMLCanvasElement;\n    public static mousePositionIndicator: HTMLDivElement;\n    public static cursor: HTMLDivElement;\n    public static viewPortScrollbars: Scrollbars;\n    public static image: HTMLImageElement;\n\n    public static primaryRenderingEngine: PrimaryEditorRenderEngine;\n    public static supportRenderingEngine: BaseRenderEngine;\n\n    public static viewPortHelper: ViewPortHelper;\n\n    public static isLoading: boolean = false;\n    public static viewPortActionsDisabled: boolean = false;\n    public static mousePositionOnViewPortContent: IPoint;\n    public static viewPortSize: ISize;\n\n    // x and y describe the dimension of the margin that remains constant regardless of the scale of the image\n    // width and height describes the render image size for 100% scale\n    public static defaultRenderImageRect: IRect;\n}","export class UnitUtil {\n\n    public static deg2rad(angleDeg:number) {\n        return(angleDeg * Math.PI/180);\n    }\n\n    public static rad2deg(angleRad:number) {\n        return(angleRad * 180/Math.PI);\n    }\n}","export enum CustomCursorStyle {\n    DEFAULT = \"DEFAULT\",\n    MOVE = \"MOVE\",\n    RESIZE = \"RESIZE\",\n    ADD = \"ADD\",\n    CANCEL = \"CANCEL\",\n    CLOSE = \"CLOSE\",\n    GRAB = \"GRAB\",\n    GRABBING = \"GRABBING\"\n}","\nimport {IPoint} from '../interfaces/IPoint';\nimport {IRect} from '../interfaces/IRect';\nimport {UnitUtil} from './UnitUtil';\n\nexport class DrawUtil {\n\n    public static clearCanvas(canvas:HTMLCanvasElement): void {\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n\n    public static drawLine(canvas:HTMLCanvasElement, startPoint:IPoint, endPoint:IPoint, color:string = '#111111', thickness:number = 1): void {\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\n        ctx.save();\n        ctx.strokeStyle = color;\n        ctx.lineWidth = thickness;\n        ctx.lineCap = 'round';\n        ctx.beginPath();\n        ctx.moveTo(startPoint.x, startPoint.y);\n        ctx.lineTo(endPoint.x + 1, endPoint.y + 1);\n        ctx.stroke();\n        ctx.restore();\n    }\n\n    public static drawRect(canvas:HTMLCanvasElement, rect:IRect, color:string = '#fff', thickness:number = 1): void {\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\n        ctx.save();\n        ctx.strokeStyle = color;\n        ctx.lineWidth = thickness;\n        ctx.beginPath();\n        ctx.rect(rect.x, rect.y, rect.width, rect.height);\n        ctx.stroke();\n        ctx.restore();\n    }\n\n    public static drawRectWithFill(canvas:HTMLCanvasElement, rect:IRect, color:string = '#fff'): void {\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\n        ctx.save();\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.rect(rect.x, rect.y, rect.width, rect.height);\n        ctx.fill();\n        ctx.restore();\n    }\n\n    public static shadeEverythingButRect(canvas:HTMLCanvasElement, rect:IRect, color:string = 'rgba(0, 0, 0, 0.7)'): void {\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\n        ctx.save();\n        ctx.fillStyle = color;\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.globalCompositeOperation = 'destination-out';\n        ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n        ctx.restore();\n    }\n\n    public static drawCircleWithFill(canvas:HTMLCanvasElement, anchorPoint:IPoint, radius:number, color:string = '#ffffff'):void {\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\n        ctx.save();\n        const startAngleRad = UnitUtil.deg2rad(0);\n        const endAngleRad = UnitUtil.deg2rad(360);\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.arc(anchorPoint.x, anchorPoint.y, radius, startAngleRad, endAngleRad, false);\n        ctx.fill();\n        ctx.restore();\n    }\n\n    public static drawCircle(canvas:HTMLCanvasElement, anchorPoint:IPoint, radius:number, startAngleDeg:number, endAngleDeg:number, thickness:number = 20, color:string = '#ffffff'): void {\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\n        const startAngleRad = UnitUtil.deg2rad(startAngleDeg);\n        const endAngleRad = UnitUtil.deg2rad(endAngleDeg);\n        ctx.save();\n        ctx.strokeStyle = color;\n        ctx.lineWidth = thickness;\n        ctx.beginPath();\n        ctx.arc(anchorPoint.x, anchorPoint.y, radius, startAngleRad, endAngleRad, false);\n        ctx.stroke();\n        ctx.restore();\n    }\n\n    public static drawPolygon(canvas:HTMLCanvasElement, anchors: IPoint[], color:string = '#fff', thickness:number = 1): void {\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\n        ctx.save();\n        ctx.strokeStyle = color;\n        ctx.lineWidth = thickness;\n        ctx.beginPath();\n        ctx.moveTo(anchors[0].x, anchors[0].y);\n        for (let i = 1; i < anchors.length; i ++) {\n            ctx.lineTo(anchors[i].x, anchors[i].y);\n        }\n        ctx.closePath();\n        ctx.stroke();\n        ctx.restore();\n    }\n\n    public static drawPolygonWithFill(canvas:HTMLCanvasElement, anchors: IPoint[], color:string = '#fff'): void {\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\n        ctx.save();\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.moveTo(anchors[0].x, anchors[0].y);\n        for (let i = 1; i < anchors.length; i ++) {\n            ctx.lineTo(anchors[i].x, anchors[i].y);\n        }\n        ctx.closePath();\n        ctx.fill();\n        ctx.restore();\n    }\n\n    public static drawText(canvas:HTMLCanvasElement, text:string, textSize:number, anchorPoint:IPoint, color:string = '#ffffff', bold:boolean = false, align:string = 'center'):void {\n        const ctx:CanvasRenderingContext2D = canvas.getContext('2d');\n        ctx.save();\n        ctx.fillStyle = color;\n        ctx.textAlign = align as CanvasTextAlign;\n        ctx.textBaseline='middle';\n        ctx.font = (bold ? 'bold ' : '') + textSize + 'px Arial';\n        ctx.fillText(text, anchorPoint.x, anchorPoint.y);\n        ctx.restore();\n    }\n\n    public static hexToRGB(hex: string, alpha: number | null = null): string {\n        const r = parseInt(hex.slice(1, 3), 16);\n        const g = parseInt(hex.slice(3, 5), 16);\n        const b = parseInt(hex.slice(5, 7), 16);\n\n        if (alpha !== null) {\n            return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + alpha + ')';\n        } else {\n            return 'rgb(' + r + ', ' + g + ', ' + b + ')';\n        }\n    }\n}\n","import {IPoint} from \"../interfaces/IPoint\";\n\nexport class PointUtil {\n    public static equals(p1: IPoint, p2: IPoint): boolean {\n        return p1.x === p2.x && p1.y === p2.y;\n    }\n\n    public static add(p1: IPoint, p2: IPoint): IPoint {\n        return {\n            x: p1.x + p2.x,\n            y: p1.y + p2.y\n        }\n    }\n\n    public static subtract(p1: IPoint, p2: IPoint): IPoint {\n        return {\n            x: p1.x - p2.x,\n            y: p1.y - p2.y\n        }\n    }\n\n    public static multiply(p1: IPoint, factor: number) {\n        return {\n            x: p1.x * factor,\n            y: p1.y * factor\n        }\n    }\n}","import {ISize} from '../interfaces/ISize';\nimport {Settings} from './Settings';\n\nexport class RenderEngineSettings {\n    public static readonly LINE_THICKNESS: number = 2;\n    public static readonly lineActiveColor: string = Settings.PRIMARY_COLOR;\n    public static readonly defaultLineColor: string = '#ffffff';\n    public static readonly CROSS_HAIR_LINE_COLOR: string = '#ffffff';\n    public static readonly crossHairPadding: number = 25;\n    public static readonly anchorSize: ISize = {\n        width: Settings.RESIZE_HANDLE_DIMENSION_PX,\n        height: Settings.RESIZE_HANDLE_DIMENSION_PX\n    };\n    public static readonly anchorHoverSize: ISize = {\n        width: Settings.RESIZE_HANDLE_HOVER_DIMENSION_PX,\n        height: Settings.RESIZE_HANDLE_HOVER_DIMENSION_PX\n    };\n    public static readonly suggestedAnchorDetectionSize: ISize = {\n        width: 100,\n        height: 100\n    };\n    public static readonly defaultAnchorColor: string = '#ffffff';\n    public static readonly inactiveAnchorColor: string = Settings.DARK_THEME_SECOND_COLOR;\n\n    public static readonly DEFAULT_ANCHOR_COLOR: string = '#ffffff';\n    public static readonly ACTIVE_ANCHOR_COLOR: string = Settings.SECONDARY_COLOR;\n    public static readonly INACTIVE_ANCHOR_COLOR: string = Settings.DARK_THEME_SECOND_COLOR;\n\n    public static readonly DEFAULT_LINE_COLOR: string = '#ffffff';\n    public static readonly ACTIVE_LINE_COLOR: string = Settings.PRIMARY_COLOR;\n    public static readonly INACTIVE_LINE_COLOR: string = '#ffffff';\n}\n","import {store} from '../..';\nimport {ImageData, LabelLine, LabelName, LabelPoint, LabelPolygon, LabelRect} from '../labels/types';\nimport {find} from 'lodash';\nimport {LabelType} from '../../data/enums/LabelType';\n\nexport class LabelsSelector {\n    public static getLabelNames(): LabelName[] {\n        return store.getState().labels.labels;\n    }\n\n    public static getLabelNameById(id: string): LabelName | undefined {\n        const labelName: LabelName[] = LabelsSelector.getLabelNames()\n        return find(labelName, {id});\n    }\n\n    public static getActiveLabelNameId(): string {\n        return store.getState().labels.activeLabelNameId;\n    }\n\n    public static getActiveLabelType(): LabelType {\n        return store.getState().labels.activeLabelType;\n    }\n\n    public static getImagesData(): ImageData[] {\n        return store.getState().labels.imagesData;\n    }\n\n    public static getActiveImageIndex(): number {\n        return store.getState().labels.activeImageIndex;\n    }\n\n    public static getActiveImageData(): ImageData | null {\n        const activeImageIndex: number | null = LabelsSelector.getActiveImageIndex();\n\n        if (activeImageIndex === null)\n            return null;\n\n        return LabelsSelector.getImageDataByIndex(activeImageIndex);\n    }\n\n    public static getImageDataByIndex(index: number): ImageData {\n        const imagesData: ImageData[] = LabelsSelector.getImagesData();\n        return imagesData[index];\n    }\n\n    public static getImageDataById(id: string): ImageData {\n        const imagesData: ImageData[] = LabelsSelector.getImagesData();\n        return find(imagesData, {id});\n    }\n\n    public static getActiveLabelId(): string | null {\n        return store.getState().labels.activeLabelId;\n    }\n\n    public static getHighlightedLabelId(): string | null {\n        return store.getState().labels.highlightedLabelId;\n    }\n\n    public static getActiveRectLabel(): LabelRect | null {\n        const activeLabelId: string | null = LabelsSelector.getActiveLabelId();\n\n        if (activeLabelId === null)\n            return null;\n\n        return find(LabelsSelector.getActiveImageData().labelRects, {id: activeLabelId});\n    }\n\n    public static getActivePointLabel(): LabelPoint | null {\n        const activeLabelId: string | null = LabelsSelector.getActiveLabelId();\n\n        if (activeLabelId === null)\n            return null;\n\n        return find(LabelsSelector.getActiveImageData().labelPoints, {id: activeLabelId});\n    }\n\n    public static getActivePolygonLabel(): LabelPolygon | null {\n        const activeLabelId: string | null = LabelsSelector.getActiveLabelId();\n\n        if (activeLabelId === null)\n            return null;\n\n        return find(LabelsSelector.getActiveImageData().labelPolygons, {id: activeLabelId});\n    }\n\n    public static getActiveLineLabel(): LabelLine | null {\n        const activeLabelId: string | null = LabelsSelector.getActiveLabelId();\n\n        if (activeLabelId === null)\n            return null;\n\n        return find(LabelsSelector.getActiveImageData().labelLines, {id: activeLabelId});\n    }\n}\n","export enum EventType {\n    RESIZE = \"resize\",\n    MOUSE_UP = \"mouseup\",\n    MOUSE_DOWN = \"mousedown\",\n    MOUSE_MOVE = \"mousemove\",\n    MOUSE_WHEEL = \"wheel\",\n    KEY_DOWN = \"keydown\",\n    KEY_PRESS = \"keypress\",\n    KEY_UP = \"keyup\",\n    FOCUS = \"focus\"\n}","import {EventType} from \"../data/enums/EventType\";\n\nexport class MouseEventUtil {\n    public static getEventType(event: Event): EventType | null {\n        if (!event) return null;\n\n        switch (event.type) {\n            case EventType.MOUSE_DOWN:\n                return EventType.MOUSE_DOWN;\n            case EventType.MOUSE_UP:\n                return EventType.MOUSE_UP;\n            case EventType.MOUSE_MOVE:\n                return EventType.MOUSE_MOVE;\n            default:\n                return null;\n        }\n    }\n}","export enum LabelStatus {\n    ACCEPTED = \"ACCEPTED\",\n    REJECTED = \"REJECTED\",\n    UNDECIDED = \"UNDECIDED\"\n}","import {store} from '../..';\nimport {PopupWindowType} from '../../data/enums/PopupWindowType';\nimport {ContextType} from '../../data/enums/ContextType';\nimport {CustomCursorStyle} from '../../data/enums/CustomCursorStyle';\nimport {ProjectType} from '../../data/enums/ProjectType';\n\nexport class GeneralSelector {\n    public static getActivePopupType(): PopupWindowType {\n        return store.getState().general.activePopupType;\n    }\n\n    public static getActiveContext(): ContextType {\n        return store.getState().general.activeContext;\n    }\n\n    public static getPreventCustomCursorStatus(): boolean {\n        return store.getState().general.preventCustomCursor;\n    }\n\n    public static getImageDragModeStatus(): boolean {\n        return store.getState().general.imageDragMode;\n    }\n\n    public static getCrossHairVisibleStatus(): boolean {\n        return store.getState().general.crossHairVisible;\n    }\n\n    public static getCustomCursorStyle(): CustomCursorStyle {\n        return store.getState().general.customCursorStyle;\n    }\n\n    public static getProjectName(): string {\n        return store.getState().general.projectData.name;\n    }\n\n    public static getProjectType(): ProjectType {\n        return store.getState().general.projectData.type;\n    }\n\n    public static getZoom(): number {\n        return store.getState().general.zoom;\n    }\n\n    public static getEnablePerClassColorationStatus(): boolean {\n        return store.getState().general.enablePerClassColoration\n    }\n}\n","import {EditorData} from '../../data/EditorData';\nimport {MouseEventUtil} from '../../utils/MouseEventUtil';\nimport {EventType} from '../../data/enums/EventType';\nimport {LabelType} from '../../data/enums/LabelType';\nimport {GeneralSelector} from '../../store/selectors/GeneralSelector';\nimport {RenderEngineSettings} from '../../settings/RenderEngineSettings';\nimport {LabelName} from '../../store/labels/types';\nimport {LabelsSelector} from '../../store/selectors/LabelsSelector';\n\nexport abstract class BaseRenderEngine {\n    protected readonly canvas: HTMLCanvasElement;\n    public labelType: LabelType;\n\n    protected constructor(canvas: HTMLCanvasElement) {\n        this.canvas = canvas;\n    }\n\n    public update(data: EditorData): void {\n        if (!!data.event) {\n            switch (MouseEventUtil.getEventType(data.event)) {\n                case EventType.MOUSE_MOVE:\n                    this.mouseMoveHandler(data);\n                    break;\n                case EventType.MOUSE_UP:\n                    this.mouseUpHandler(data);\n                    break;\n                case EventType.MOUSE_DOWN:\n                    this.mouseDownHandler(data);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    protected abstract mouseDownHandler(data: EditorData): void;\n    protected abstract mouseMoveHandler(data: EditorData): void;\n    protected abstract mouseUpHandler(data: EditorData): void;\n\n    abstract render(data: EditorData): void;\n\n    abstract isInProgress(): boolean;\n\n    protected static resolveLabelLineColor(labelId: string, isActive: boolean): string {\n        const perClassColor: boolean = GeneralSelector.getEnablePerClassColorationStatus();\n        if (perClassColor) {\n            const labelName: LabelName | null = LabelsSelector.getLabelNameById(labelId);\n            return labelName ? labelName.color : RenderEngineSettings.DEFAULT_LINE_COLOR;\n        } else {\n            return isActive ? RenderEngineSettings.ACTIVE_LINE_COLOR : RenderEngineSettings.INACTIVE_LINE_COLOR;\n        }\n    }\n\n    protected static resolveLabelAnchorColor(isActive: boolean): string {\n        const perClassColor: boolean = GeneralSelector.getEnablePerClassColorationStatus();\n        if (perClassColor) {\n            return RenderEngineSettings.DEFAULT_ANCHOR_COLOR;\n        } else {\n            return isActive ? RenderEngineSettings.ACTIVE_ANCHOR_COLOR : RenderEngineSettings.INACTIVE_ANCHOR_COLOR;\n        }\n    }\n}\n","import {ILine} from \"../interfaces/ILine\";\nimport {IPoint} from \"../interfaces/IPoint\";\n\nexport class LineUtil {\n    public static getDistanceFromLine(l: ILine, p: IPoint): number {\n        if (l.start.x !== l.end.x || l.start.y !== l.end.y) {\n            const nom: number = Math.abs((l.end.y - l.start.y) * p.x - (l.end.x - l.start.x) * p.y + l.end.x * l.start.y - l.end.y * l.start.x);\n            const denom: number = Math.sqrt(Math.pow(l.end.y - l.start.y, 2) + Math.pow(l.end.x - l.start.x, 2));\n            return nom / denom;\n        }\n        return null;\n    }\n\n    public static getCenter(l: ILine): IPoint {\n        return {\n            x: (l.start.x + l.end.x) / 2,\n            y: (l.start.y + l.end.y) / 2\n        }\n    }\n\n    public static getPoints(l: ILine): IPoint[] {\n        return [l.start, l.end]\n    }\n}","import {EditorData} from \"../data/EditorData\";\nimport {RectUtil} from \"./RectUtil\";\nimport {store} from \"../index\";\nimport {CustomCursorStyle} from \"../data/enums/CustomCursorStyle\";\nimport {updateCustomCursorStyle} from \"../store/general/actionCreators\";\nimport {IPoint} from \"../interfaces/IPoint\";\nimport {PointUtil} from \"./PointUtil\";\nimport {IRect} from \"../interfaces/IRect\";\nimport {ILine} from \"../interfaces/ILine\";\nimport {LineUtil} from \"./LineUtil\";\nimport {ISize} from \"../interfaces/ISize\";\n\nexport class RenderEngineUtil {\n    public static calculateImageScale(data: EditorData): number {\n        return data.realImageSize.width / data.viewPortContentImageRect.width;\n    }\n\n    public static isMouseOverImage(data: EditorData): boolean {\n        return RectUtil.isPointInside(data.viewPortContentImageRect, data.mousePositionOnViewPortContent);\n    }\n\n    public static isMouseOverCanvas(data: EditorData): boolean {\n        return RectUtil.isPointInside({x: 0, y: 0, ...data.viewPortContentSize}, data.mousePositionOnViewPortContent);\n    }\n\n    public static transferPointFromImageToViewPortContent(point: IPoint, data: EditorData): IPoint {\n        const scale = RenderEngineUtil.calculateImageScale(data);\n        return PointUtil.add(PointUtil.multiply(point, 1/scale), data.viewPortContentImageRect);\n    }\n\n    public static transferPolygonFromImageToViewPortContent(polygon: IPoint[], data: EditorData): IPoint[] {\n        return polygon.map((point: IPoint) => RenderEngineUtil.transferPointFromImageToViewPortContent(point, data));\n    }\n\n    public static transferLineFromImageToViewPortContent(line: ILine, data: EditorData): ILine {\n        return {\n            start: RenderEngineUtil.transferPointFromImageToViewPortContent(line.start, data),\n            end: RenderEngineUtil.transferPointFromImageToViewPortContent(line.end, data)\n        }\n    }\n\n    public static transferPointFromViewPortContentToImage(point: IPoint, data: EditorData): IPoint {\n        const scale = RenderEngineUtil.calculateImageScale(data);\n        return PointUtil.multiply(PointUtil.subtract(point, data.viewPortContentImageRect), scale);\n    }\n\n    public static transferPolygonFromViewPortContentToImage(polygon: IPoint[], data: EditorData): IPoint[] {\n        return polygon.map((point: IPoint) => RenderEngineUtil.transferPointFromViewPortContentToImage(point, data));\n    }\n\n    public static transferLineFromViewPortContentToImage(line: ILine, data: EditorData): ILine {\n        return {\n            start: RenderEngineUtil.transferPointFromViewPortContentToImage(line.start, data),\n            end: RenderEngineUtil.transferPointFromViewPortContentToImage(line.end, data)\n        }\n    }\n\n    public static transferRectFromViewPortContentToImage(rect: IRect, data: EditorData): IRect {\n        const scale = RenderEngineUtil.calculateImageScale(data);\n        return RectUtil.translate(RectUtil.scaleRect(rect, 1/scale), data.viewPortContentImageRect);\n    }\n\n    public static transferRectFromImageToViewPortContent(rect: IRect, data: EditorData): IRect {\n        const scale = RenderEngineUtil.calculateImageScale(data);\n        const translation: IPoint = {\n            x: - data.viewPortContentImageRect.x,\n            y: - data.viewPortContentImageRect.y\n        };\n\n        return RectUtil.scaleRect(RectUtil.translate(rect, translation), scale);\n    }\n\n    public static wrapDefaultCursorStyleInCancel(data: EditorData) {\n        if (RectUtil.isPointInside(data.viewPortContentImageRect, data.mousePositionOnViewPortContent)) {\n            store.dispatch(updateCustomCursorStyle(CustomCursorStyle.DEFAULT));\n        } else {\n            store.dispatch(updateCustomCursorStyle(CustomCursorStyle.CANCEL));\n        }\n    }\n\n    public static setValueBetweenPixels(value: number): number {\n        return Math.floor(value) + 0.5;\n    }\n\n    public static setPointBetweenPixels(point: IPoint): IPoint {\n        return {\n            x: RenderEngineUtil.setValueBetweenPixels(point.x),\n            y: RenderEngineUtil.setValueBetweenPixels(point.y)\n        }\n    }\n\n    public static setRectBetweenPixels(rect: IRect): IRect {\n        const topLeft: IPoint = {\n            x: rect.x,\n            y: rect.y\n        };\n        const bottomRight: IPoint = {\n            x: rect.x + rect.width,\n            y: rect.y + rect.height\n        };\n        const topLeftBetweenPixels = RenderEngineUtil.setPointBetweenPixels(topLeft);\n        const bottomRightBetweenPixels = RenderEngineUtil.setPointBetweenPixels(bottomRight);\n        return {\n            x: topLeftBetweenPixels.x,\n            y: topLeftBetweenPixels.y,\n            width: bottomRightBetweenPixels.x - topLeftBetweenPixels.x,\n            height: bottomRightBetweenPixels.y - topLeftBetweenPixels.y\n        }\n    }\n\n    public static isMouseOverLine(mouse: IPoint, l: ILine, radius: number): boolean {\n        const minX: number = Math.min(l.start.x, l.end.x);\n        const maxX: number = Math.max(l.start.x, l.end.x);\n        const minY: number = Math.min(l.start.y, l.end.y);\n        const maxY: number = Math.max(l.start.y, l.end.y);\n\n        return (minX - radius <= mouse.x && maxX + radius >= mouse.x) &&\n            (minY - radius <= mouse.y && maxY + radius >= mouse.y) &&\n            LineUtil.getDistanceFromLine(l, mouse) < radius;\n    }\n\n    public static isMouseOverAnchor(mouse: IPoint, anchor: IPoint, size: ISize): boolean {\n        if (!mouse || !anchor) return null;\n        return RectUtil.isPointInside(RectUtil.getRectWithCenterAndSize(anchor, size), mouse);\n    }\n}","import {LabelName, LabelPolygon, LabelRect} from '../store/labels/types';\nimport { v4 as uuidv4 } from 'uuid';\nimport {find} from 'lodash';\nimport {IRect} from '../interfaces/IRect';\nimport {LabelStatus} from '../data/enums/LabelStatus';\nimport {IPoint} from '../interfaces/IPoint';\nimport { sample } from 'lodash';\nimport {Settings} from '../settings/Settings';\n\nexport class LabelUtil {\n    public static createLabelName(name: string): LabelName {\n        return {\n            id: uuidv4(),\n            name,\n            color: sample(Settings.LABEL_COLORS_PALETTE)\n        }\n    }\n\n    public static createLabelRect(labelId: string, rect: IRect): LabelRect {\n        return {\n            id: uuidv4(),\n            labelId,\n            rect,\n            isCreatedByAI: false,\n            status: LabelStatus.ACCEPTED,\n            suggestedLabel: null\n        }\n    }\n\n    public static createLabelPolygon(labelId: string, vertices: IPoint[]): LabelPolygon {\n        return {\n            id: uuidv4(),\n            labelId,\n            vertices\n        }\n    }\n\n    public static labelNamesIdsDiff(oldLabelNames: LabelName[], newLabelNames: LabelName[]): string[] {\n        return oldLabelNames.reduce((missingIds: string[], labelName: LabelName) => {\n            if (!find(newLabelNames, { 'id': labelName.id })) {\n                missingIds.push(labelName.id);\n            }\n            return missingIds\n        }, [])\n    }\n}\n","import {IPoint} from '../../interfaces/IPoint';\nimport {IRect} from '../../interfaces/IRect';\nimport {RectUtil} from '../../utils/RectUtil';\nimport {DrawUtil} from '../../utils/DrawUtil';\nimport {store} from '../..';\nimport {ImageData, LabelRect} from '../../store/labels/types';\nimport {\n    updateActiveLabelId,\n    updateFirstLabelCreatedFlag,\n    updateHighlightedLabelId,\n    updateImageDataById\n} from '../../store/labels/actionCreators';\nimport {PointUtil} from '../../utils/PointUtil';\nimport {RectAnchor} from '../../data/RectAnchor';\nimport {RenderEngineSettings} from '../../settings/RenderEngineSettings';\nimport {updateCustomCursorStyle} from '../../store/general/actionCreators';\nimport {CustomCursorStyle} from '../../data/enums/CustomCursorStyle';\nimport {LabelsSelector} from '../../store/selectors/LabelsSelector';\nimport {EditorData} from '../../data/EditorData';\nimport {BaseRenderEngine} from './BaseRenderEngine';\nimport {RenderEngineUtil} from '../../utils/RenderEngineUtil';\nimport {LabelType} from '../../data/enums/LabelType';\nimport {EditorActions} from '../actions/EditorActions';\nimport {GeneralSelector} from '../../store/selectors/GeneralSelector';\nimport {LabelStatus} from '../../data/enums/LabelStatus';\nimport {LabelUtil} from '../../utils/LabelUtil';\n\nexport class RectRenderEngine extends BaseRenderEngine {\n\n    // =================================================================================================================\n    // STATE\n    // =================================================================================================================\n\n    private startCreateRectPoint: IPoint;\n    private startResizeRectAnchor: RectAnchor;\n\n    public constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n        this.labelType = LabelType.RECT;\n    }\n\n    // =================================================================================================================\n    // EVENT HANDLERS\n    // =================================================================================================================\n\n    public mouseDownHandler = (data: EditorData) => {\n        const isMouseOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\n        const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\n        if (isMouseOverCanvas) {\n            const rectUnderMouse: LabelRect = this.getRectUnderMouse(data);\n            if (!!rectUnderMouse) {\n                const rect: IRect = this.calculateRectRelativeToActiveImage(rectUnderMouse.rect, data);\n                const anchorUnderMouse: RectAnchor = this.getAnchorUnderMouseByRect(rect, data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\n                if (!!anchorUnderMouse && rectUnderMouse.status === LabelStatus.ACCEPTED) {\n                    store.dispatch(updateActiveLabelId(rectUnderMouse.id));\n                    this.startRectResize(anchorUnderMouse);\n                } else {\n                    if (!!LabelsSelector.getHighlightedLabelId())\n                        store.dispatch(updateActiveLabelId(LabelsSelector.getHighlightedLabelId()));\n                    else\n                        this.startRectCreation(data.mousePositionOnViewPortContent);\n                }\n            } else if (isMouseOverImage) {\n\n                this.startRectCreation(data.mousePositionOnViewPortContent);\n            }\n        }\n    };\n\n    public mouseUpHandler = (data: EditorData) => {\n        if (!!data.viewPortContentImageRect) {\n            const mousePositionSnapped: IPoint = RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\n            const activeLabelRect: LabelRect = LabelsSelector.getActiveRectLabel();\n\n            if (!!this.startCreateRectPoint && !PointUtil.equals(this.startCreateRectPoint, mousePositionSnapped)) {\n\n                const minX: number = Math.min(this.startCreateRectPoint.x, mousePositionSnapped.x);\n                const minY: number = Math.min(this.startCreateRectPoint.y, mousePositionSnapped.y);\n                const maxX: number = Math.max(this.startCreateRectPoint.x, mousePositionSnapped.x);\n                const maxY: number = Math.max(this.startCreateRectPoint.y, mousePositionSnapped.y);\n\n                const rect = {x: minX, y: minY, width: maxX - minX, height: maxY - minY};\n                this.addRectLabel(RenderEngineUtil.transferRectFromImageToViewPortContent(rect, data));\n            }\n\n            if (!!this.startResizeRectAnchor && !!activeLabelRect) {\n                const rect: IRect = this.calculateRectRelativeToActiveImage(activeLabelRect.rect, data);\n                const startAnchorPosition: IPoint = PointUtil.add(this.startResizeRectAnchor.position,\n                    data.viewPortContentImageRect);\n                const delta: IPoint = PointUtil.subtract(mousePositionSnapped, startAnchorPosition);\n                const resizeRect: IRect = RectUtil.resizeRect(rect, this.startResizeRectAnchor.type, delta);\n                const scale: number = RenderEngineUtil.calculateImageScale(data);\n                const scaledRect: IRect = RectUtil.scaleRect(resizeRect, scale);\n\n                const imageData = LabelsSelector.getActiveImageData();\n                imageData.labelRects = imageData.labelRects.map((labelRect: LabelRect) => {\n                    if (labelRect.id === activeLabelRect.id) {\n                        return {\n                            ...labelRect,\n                            rect: scaledRect\n                        };\n                    }\n                    return labelRect;\n                });\n                store.dispatch(updateImageDataById(imageData.id, imageData));\n            }\n        }\n        this.endRectTransformation()\n    };\n\n    public mouseMoveHandler = (data: EditorData) => {\n        if (!!data.viewPortContentImageRect && !!data.mousePositionOnViewPortContent) {\n            const isOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\n            if (isOverImage && !this.startResizeRectAnchor) {\n                const labelRect: LabelRect = this.getRectUnderMouse(data);\n                if (!!labelRect && !this.isInProgress()) {\n                    if (LabelsSelector.getHighlightedLabelId() !== labelRect.id) {\n                        store.dispatch(updateHighlightedLabelId(labelRect.id))\n                    }\n                } else {\n                    if (LabelsSelector.getHighlightedLabelId() !== null) {\n                        store.dispatch(updateHighlightedLabelId(null))\n                    }\n                }\n            }\n        }\n    };\n\n    // =================================================================================================================\n    // RENDERING\n    // =================================================================================================================\n\n    public render(data: EditorData) {\n        const activeLabelId: string = LabelsSelector.getActiveLabelId();\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\n        if (imageData) {\n            imageData.labelRects.forEach((labelRect: LabelRect) => {\n                if (labelRect.status === LabelStatus.ACCEPTED && labelRect.id === activeLabelId) {\n                    this.drawActiveRect(labelRect, data)\n                } else {\n                    this.drawInactiveRect(labelRect, data);\n                }\n            });\n            this.drawCurrentlyCreatedRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\n            this.updateCursorStyle(data);\n        }\n    }\n\n    private drawCurrentlyCreatedRect(mousePosition: IPoint, imageRect: IRect) {\n        if (!!this.startCreateRectPoint) {\n            const mousePositionSnapped: IPoint = RectUtil.snapPointToRect(mousePosition, imageRect);\n            const activeRect: IRect = {\n                x: this.startCreateRectPoint.x,\n                y: this.startCreateRectPoint.y,\n                width: mousePositionSnapped.x - this.startCreateRectPoint.x,\n                height: mousePositionSnapped.y - this.startCreateRectPoint.y\n            };\n            const activeRectBetweenPixels = RenderEngineUtil.setRectBetweenPixels(activeRect);\n            const lineColor: string = BaseRenderEngine.resolveLabelLineColor(null, true)\n            DrawUtil.drawRect(this.canvas, activeRectBetweenPixels, lineColor, RenderEngineSettings.LINE_THICKNESS);\n        }\n    }\n\n    private drawInactiveRect(labelRect: LabelRect, data: EditorData) {\n        const rectOnImage: IRect = RenderEngineUtil.transferRectFromViewPortContentToImage(labelRect.rect, data)\n        const highlightedLabelId: string = LabelsSelector.getHighlightedLabelId()\n        const displayAsActive: boolean = labelRect.status === LabelStatus.ACCEPTED && labelRect.id === highlightedLabelId;\n        const lineColor: string = BaseRenderEngine.resolveLabelLineColor(labelRect.labelId, displayAsActive)\n        const anchorColor: string = BaseRenderEngine.resolveLabelAnchorColor(displayAsActive);\n        this.renderRect(rectOnImage, displayAsActive, lineColor, anchorColor);\n    }\n\n    private drawActiveRect(labelRect: LabelRect, data: EditorData) {\n        let rect: IRect = this.calculateRectRelativeToActiveImage(labelRect.rect, data);\n        if (!!this.startResizeRectAnchor) {\n            const startAnchorPosition: IPoint = PointUtil.add(this.startResizeRectAnchor.position, data.viewPortContentImageRect);\n            const endAnchorPositionSnapped: IPoint = RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\n            const delta = PointUtil.subtract(endAnchorPositionSnapped, startAnchorPosition);\n            rect = RectUtil.resizeRect(rect, this.startResizeRectAnchor.type, delta);\n        }\n        const rectOnImage: IRect = RectUtil.translate(rect, data.viewPortContentImageRect);\n        const lineColor: string = BaseRenderEngine.resolveLabelLineColor(labelRect.labelId, true)\n        const anchorColor: string = BaseRenderEngine.resolveLabelAnchorColor(true);\n        this.renderRect(rectOnImage, true, lineColor, anchorColor);\n    }\n\n    private renderRect(rectOnImage: IRect, isActive: boolean, lineColor: string, anchorColor: string) {\n        const rectBetweenPixels = RenderEngineUtil.setRectBetweenPixels(rectOnImage);\n        DrawUtil.drawRectWithFill(this.canvas, rectBetweenPixels, DrawUtil.hexToRGB(lineColor, 0.2));\n        DrawUtil.drawRect(this.canvas, rectBetweenPixels, lineColor, RenderEngineSettings.LINE_THICKNESS);\n        if (isActive) {\n            const handleCenters: IPoint[] = RectUtil.mapRectToAnchors(rectOnImage).map((rectAnchor: RectAnchor) => rectAnchor.position);\n            handleCenters.forEach((center: IPoint) => {\n                const handleRect: IRect = RectUtil.getRectWithCenterAndSize(center, RenderEngineSettings.anchorSize);\n                const handleRectBetweenPixels: IRect = RenderEngineUtil.setRectBetweenPixels(handleRect);\n                DrawUtil.drawRectWithFill(this.canvas, handleRectBetweenPixels, anchorColor);\n            })\n        }\n    }\n\n    private updateCursorStyle(data: EditorData) {\n        if (!!this.canvas && !!data.mousePositionOnViewPortContent && !GeneralSelector.getImageDragModeStatus()) {\n            const rectUnderMouse: LabelRect = this.getRectUnderMouse(data);\n            const rectAnchorUnderMouse: RectAnchor = this.getAnchorUnderMouse(data);\n            if ((!!rectAnchorUnderMouse && rectUnderMouse && rectUnderMouse.status === LabelStatus.ACCEPTED) || !!this.startResizeRectAnchor) {\n                store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\n                return;\n            }\n            else if (RenderEngineUtil.isMouseOverCanvas(data)) {\n                if (!RenderEngineUtil.isMouseOverImage(data) && !!this.startCreateRectPoint)\n                    store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\n                else\n                    RenderEngineUtil.wrapDefaultCursorStyleInCancel(data);\n                this.canvas.style.cursor = 'none';\n            } else {\n                this.canvas.style.cursor = 'default';\n            }\n        }\n    }\n\n    // =================================================================================================================\n    // HELPERS\n    // =================================================================================================================\n\n    public isInProgress(): boolean {\n        return !!this.startCreateRectPoint || !!this.startResizeRectAnchor;\n    }\n\n    private calculateRectRelativeToActiveImage(rect: IRect, data: EditorData):IRect {\n        const scale: number = RenderEngineUtil.calculateImageScale(data);\n        return RectUtil.scaleRect(rect, 1/scale);\n    }\n\n    private addRectLabel = (rect: IRect) => {\n        const activeLabelId = LabelsSelector.getActiveLabelNameId();\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\n        const labelRect: LabelRect = LabelUtil.createLabelRect(activeLabelId, rect);\n        imageData.labelRects.push(labelRect);\n        store.dispatch(updateImageDataById(imageData.id, imageData));\n        store.dispatch(updateFirstLabelCreatedFlag(true));\n        store.dispatch(updateActiveLabelId(labelRect.id));\n    };\n\n    private getRectUnderMouse(data: EditorData): LabelRect {\n        const activeRectLabel: LabelRect = LabelsSelector.getActiveRectLabel();\n        if (!!activeRectLabel && this.isMouseOverRectEdges(activeRectLabel.rect, data)) {\n            return activeRectLabel;\n        }\n\n        const labelRects: LabelRect[] = LabelsSelector.getActiveImageData().labelRects;\n        for (let i = 0; i < labelRects.length; i++) {\n            if (this.isMouseOverRectEdges(labelRects[i].rect, data)) {\n                return labelRects[i];\n            }\n        }\n        return null;\n    }\n\n    private isMouseOverRectEdges(rect: IRect, data: EditorData): boolean {\n        const rectOnImage: IRect = RectUtil.translate(\n            this.calculateRectRelativeToActiveImage(rect, data), data.viewPortContentImageRect);\n\n        const outerRectDelta: IPoint = {\n            x: RenderEngineSettings.anchorHoverSize.width / 2,\n            y: RenderEngineSettings.anchorHoverSize.height / 2\n        };\n        const outerRect: IRect = RectUtil.expand(rectOnImage, outerRectDelta);\n\n        const innerRectDelta: IPoint = {\n            x: - RenderEngineSettings.anchorHoverSize.width / 2,\n            y: - RenderEngineSettings.anchorHoverSize.height / 2\n        };\n        const innerRect: IRect = RectUtil.expand(rectOnImage, innerRectDelta);\n\n        return (RectUtil.isPointInside(outerRect, data.mousePositionOnViewPortContent) &&\n            !RectUtil.isPointInside(innerRect, data.mousePositionOnViewPortContent));\n    }\n\n    private getAnchorUnderMouseByRect(rect: IRect, mousePosition: IPoint, imageRect: IRect): RectAnchor {\n        const rectAnchors: RectAnchor[] = RectUtil.mapRectToAnchors(rect);\n        for (let i = 0; i < rectAnchors.length; i++) {\n            const anchorRect: IRect = RectUtil.translate(RectUtil.getRectWithCenterAndSize(rectAnchors[i].position, RenderEngineSettings.anchorHoverSize), imageRect);\n            if (!!mousePosition && RectUtil.isPointInside(anchorRect, mousePosition)) {\n                return rectAnchors[i];\n            }\n        }\n        return null;\n    }\n\n    private getAnchorUnderMouse(data: EditorData): RectAnchor {\n        const labelRects: LabelRect[] = LabelsSelector.getActiveImageData().labelRects;\n        for (let i = 0; i < labelRects.length; i++) {\n            const rect: IRect = this.calculateRectRelativeToActiveImage(labelRects[i].rect, data);\n            const rectAnchor = this.getAnchorUnderMouseByRect(rect, data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\n            if (!!rectAnchor) return rectAnchor;\n        }\n        return null;\n    }\n\n    private startRectCreation(mousePosition: IPoint) {\n        this.startCreateRectPoint = mousePosition;\n        store.dispatch(updateActiveLabelId(null));\n        EditorActions.setViewPortActionsDisabledStatus(true);\n    }\n\n    private startRectResize(activatedAnchor: RectAnchor) {\n        this.startResizeRectAnchor = activatedAnchor;\n        EditorActions.setViewPortActionsDisabledStatus(true);\n    }\n\n    private endRectTransformation() {\n        this.startCreateRectPoint = null;\n        this.startResizeRectAnchor = null;\n        EditorActions.setViewPortActionsDisabledStatus(false);\n    }\n}\n","import React from \"react\";\nimport {IPoint} from \"../interfaces/IPoint\";\nimport {IRect} from \"../interfaces/IRect\";\nimport {ISize} from \"../interfaces/ISize\";\n\nexport class CanvasUtil {\n    public static getMousePositionOnCanvasFromEvent(event: React.MouseEvent<HTMLCanvasElement, MouseEvent> | MouseEvent, canvas: HTMLCanvasElement): IPoint {\n        if (!!canvas && !!event) {\n            const canvasRect: ClientRect | DOMRect = canvas.getBoundingClientRect();\n            return {\n                x: event.clientX - canvasRect.left,\n                y: event.clientY - canvasRect.top\n            }\n        }\n        return null;\n    }\n\n    public static getClientRect(canvas: HTMLCanvasElement): IRect {\n        if (!!canvas) {\n            const canvasRect: ClientRect | DOMRect = canvas.getBoundingClientRect();\n            return {\n                x: canvasRect.left,\n                y: canvasRect.top,\n                width: canvasRect.width,\n                height: canvasRect.height\n            }\n        }\n        return null;\n    }\n\n    public static getSize(canvas: HTMLCanvasElement): ISize {\n        if (!!canvas) {\n            const canvasRect: ClientRect | DOMRect = canvas.getBoundingClientRect();\n            return {\n                width: canvasRect.width,\n                height: canvasRect.height\n            }\n        }\n        return null;\n    }\n}","import {IRect} from '../../interfaces/IRect';\nimport {RenderEngineSettings} from '../../settings/RenderEngineSettings';\nimport {IPoint} from '../../interfaces/IPoint';\nimport {CanvasUtil} from '../../utils/CanvasUtil';\nimport {store} from '../../index';\nimport {ImageData, LabelPoint} from '../../store/labels/types';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n    updateActiveLabelId,\n    updateFirstLabelCreatedFlag,\n    updateHighlightedLabelId,\n    updateImageDataById\n} from '../../store/labels/actionCreators';\nimport {RectUtil} from '../../utils/RectUtil';\nimport {DrawUtil} from '../../utils/DrawUtil';\nimport {updateCustomCursorStyle} from '../../store/general/actionCreators';\nimport {CustomCursorStyle} from '../../data/enums/CustomCursorStyle';\nimport {LabelsSelector} from '../../store/selectors/LabelsSelector';\nimport {EditorData} from '../../data/EditorData';\nimport {BaseRenderEngine} from './BaseRenderEngine';\nimport {RenderEngineUtil} from '../../utils/RenderEngineUtil';\nimport {LabelType} from '../../data/enums/LabelType';\nimport {EditorActions} from '../actions/EditorActions';\nimport {EditorModel} from '../../staticModels/EditorModel';\nimport {GeneralSelector} from '../../store/selectors/GeneralSelector';\nimport {LabelStatus} from '../../data/enums/LabelStatus';\nimport {Settings} from '../../settings/Settings';\n\nexport class PointRenderEngine extends BaseRenderEngine {\n\n    // =================================================================================================================\n    // STATE\n    // =================================================================================================================\n\n    public constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n        this.labelType = LabelType.POINT;\n    }\n\n    // =================================================================================================================\n    // EVENT HANDLERS\n    // =================================================================================================================\n\n    public mouseDownHandler(data: EditorData): void {\n        const isMouseOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\n        const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\n\n        if (isMouseOverCanvas) {\n            const labelPoint: LabelPoint = this.getLabelPointUnderMouse(data.mousePositionOnViewPortContent, data);\n            if (!!labelPoint) {\n                const pointOnCanvas: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(labelPoint.point, data);\n                const pointBetweenPixels = RenderEngineUtil.setPointBetweenPixels(pointOnCanvas);\n                const handleRect: IRect = RectUtil.getRectWithCenterAndSize(pointBetweenPixels, RenderEngineSettings.anchorHoverSize);\n                if (RectUtil.isPointInside(handleRect, data.mousePositionOnViewPortContent)) {\n                    store.dispatch(updateActiveLabelId(labelPoint.id));\n                    EditorActions.setViewPortActionsDisabledStatus(true);\n                    return;\n                } else {\n                    store.dispatch(updateActiveLabelId(null));\n                    const pointOnImage: IPoint = RenderEngineUtil.transferPointFromViewPortContentToImage(data.mousePositionOnViewPortContent, data);\n                    this.addPointLabel(pointOnImage);\n                }\n            } else if (isMouseOverImage) {\n                const pointOnImage: IPoint = RenderEngineUtil.transferPointFromViewPortContentToImage(data.mousePositionOnViewPortContent, data);\n                this.addPointLabel(pointOnImage);\n            }\n        }\n    }\n\n    public mouseUpHandler(data: EditorData): void {\n        if (this.isInProgress()) {\n            const activeLabelPoint: LabelPoint = LabelsSelector.getActivePointLabel();\n            const pointSnapped: IPoint = RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\n            const pointOnImage: IPoint = RenderEngineUtil.transferPointFromViewPortContentToImage(pointSnapped, data);\n            const imageData = LabelsSelector.getActiveImageData();\n\n            imageData.labelPoints = imageData.labelPoints.map((labelPoint: LabelPoint) => {\n                if (labelPoint.id === activeLabelPoint.id) {\n                    return {\n                        ...labelPoint,\n                        point: pointOnImage\n                    };\n                }\n                return labelPoint;\n            });\n            store.dispatch(updateImageDataById(imageData.id, imageData));\n        }\n        EditorActions.setViewPortActionsDisabledStatus(false);\n    }\n\n    public mouseMoveHandler(data: EditorData): void {\n        const isOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\n        if (isOverImage) {\n            const labelPoint: LabelPoint = this.getLabelPointUnderMouse(data.mousePositionOnViewPortContent, data);\n            if (!!labelPoint) {\n                if (LabelsSelector.getHighlightedLabelId() !== labelPoint.id) {\n                    store.dispatch(updateHighlightedLabelId(labelPoint.id))\n                }\n            } else {\n                if (LabelsSelector.getHighlightedLabelId() !== null) {\n                    store.dispatch(updateHighlightedLabelId(null))\n                }\n            }\n        }\n    }\n\n    // =================================================================================================================\n    // RENDERING\n    // =================================================================================================================\n\n    public render(data: EditorData): void {\n        const activeLabelId: string = LabelsSelector.getActiveLabelId();\n        const highlightedLabelId: string = LabelsSelector.getHighlightedLabelId();\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\n        if (imageData) {\n            imageData.labelPoints.forEach((labelPoint: LabelPoint) => {\n                if (labelPoint.id === activeLabelId) {\n                    if (this.isInProgress()) {\n                        const pointSnapped: IPoint = RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\n                        const pointBetweenPixels: IPoint = RenderEngineUtil.setPointBetweenPixels(pointSnapped);\n                        const anchorColor: string = BaseRenderEngine.resolveLabelAnchorColor(true);\n                        DrawUtil.drawCircleWithFill(this.canvas, pointBetweenPixels, Settings.RESIZE_HANDLE_DIMENSION_PX/2, anchorColor)\n                    } else {\n                        this.renderPoint(labelPoint, true, data);\n                    }\n                } else {\n                    this.renderPoint(labelPoint, labelPoint.id === activeLabelId || labelPoint.id === highlightedLabelId, data);\n                }\n            });\n        }\n        this.updateCursorStyle(data);\n    }\n\n    private renderPoint(labelPoint: LabelPoint, isActive: boolean, data: EditorData) {\n        const pointOnImage: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(labelPoint.point, data);\n        const pointBetweenPixels = RenderEngineUtil.setPointBetweenPixels(pointOnImage);\n        const anchorColor: string = BaseRenderEngine.resolveLabelAnchorColor(isActive);\n        DrawUtil.drawCircleWithFill(this.canvas, pointBetweenPixels, Settings.RESIZE_HANDLE_DIMENSION_PX/2, anchorColor)\n    }\n\n    private updateCursorStyle(data: EditorData) {\n        if (!!this.canvas && !!data.mousePositionOnViewPortContent && !GeneralSelector.getImageDragModeStatus()) {\n            const labelPoint: LabelPoint = this.getLabelPointUnderMouse(data.mousePositionOnViewPortContent, data);\n            if (!!labelPoint && labelPoint.status === LabelStatus.ACCEPTED) {\n                const pointOnCanvas: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(labelPoint.point, data);\n                const pointBetweenPixels = RenderEngineUtil.setPointBetweenPixels(pointOnCanvas);\n                const handleRect: IRect = RectUtil.getRectWithCenterAndSize(pointBetweenPixels, RenderEngineSettings.anchorHoverSize);\n                if (RectUtil.isPointInside(handleRect, data.mousePositionOnViewPortContent)) {\n                    store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\n                    return;\n                }\n            } else if (this.isInProgress()) {\n                store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\n                return;\n            }\n\n            if (RectUtil.isPointInside({x: 0, y: 0, ...CanvasUtil.getSize(this.canvas)}, data.mousePositionOnViewPortContent)) {\n                RenderEngineUtil.wrapDefaultCursorStyleInCancel(data);\n                this.canvas.style.cursor = 'none';\n            } else {\n                this.canvas.style.cursor = 'default';\n            }\n        }\n    }\n\n    // =================================================================================================================\n    // HELPERS\n    // =================================================================================================================\n\n    public isInProgress(): boolean {\n        return EditorModel.viewPortActionsDisabled;\n    }\n\n    private getLabelPointUnderMouse(mousePosition: IPoint, data: EditorData): LabelPoint {\n        const labelPoints: LabelPoint[] = LabelsSelector.getActiveImageData().labelPoints;\n        for (let i = 0; i < labelPoints.length; i++) {\n            const pointOnCanvas: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(labelPoints[i].point, data);\n            const handleRect: IRect = RectUtil.getRectWithCenterAndSize(pointOnCanvas, RenderEngineSettings.anchorHoverSize);\n            if (RectUtil.isPointInside(handleRect, mousePosition)) {\n                return labelPoints[i];\n            }\n        }\n        return null;\n    }\n\n    private addPointLabel = (point: IPoint) => {\n        const activeLabelId = LabelsSelector.getActiveLabelNameId();\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\n        const labelPoint: LabelPoint = {\n            id: uuidv4(),\n            labelId: activeLabelId,\n            point,\n            isCreatedByAI: false,\n            status: LabelStatus.ACCEPTED,\n            suggestedLabel: null\n        };\n        imageData.labelPoints.push(labelPoint);\n        store.dispatch(updateImageDataById(imageData.id, imageData));\n        store.dispatch(updateFirstLabelCreatedFlag(true));\n        store.dispatch(updateActiveLabelId(labelPoint.id));\n    };\n}\n","import {store} from '../../index';\nimport {RectUtil} from '../../utils/RectUtil';\nimport {updateCustomCursorStyle} from '../../store/general/actionCreators';\nimport {CustomCursorStyle} from '../../data/enums/CustomCursorStyle';\nimport {EditorData} from '../../data/EditorData';\nimport {BaseRenderEngine} from './BaseRenderEngine';\nimport {RenderEngineSettings} from '../../settings/RenderEngineSettings';\nimport {IPoint} from '../../interfaces/IPoint';\nimport {ILine} from '../../interfaces/ILine';\nimport {DrawUtil} from '../../utils/DrawUtil';\nimport {IRect} from '../../interfaces/IRect';\nimport {ImageData, LabelPolygon} from '../../store/labels/types';\nimport {LabelsSelector} from '../../store/selectors/LabelsSelector';\nimport {\n    updateActiveLabelId,\n    updateFirstLabelCreatedFlag,\n    updateHighlightedLabelId,\n    updateImageDataById\n} from '../../store/labels/actionCreators';\nimport {LineUtil} from '../../utils/LineUtil';\nimport {MouseEventUtil} from '../../utils/MouseEventUtil';\nimport {EventType} from '../../data/enums/EventType';\nimport {RenderEngineUtil} from '../../utils/RenderEngineUtil';\nimport {LabelType} from '../../data/enums/LabelType';\nimport {EditorActions} from '../actions/EditorActions';\nimport {GeneralSelector} from '../../store/selectors/GeneralSelector';\nimport {Settings} from '../../settings/Settings';\nimport {LabelUtil} from '../../utils/LabelUtil';\n\nexport class PolygonRenderEngine extends BaseRenderEngine {\n\n    // =================================================================================================================\n    // STATE\n    // =================================================================================================================\n\n    private activePath: IPoint[] = [];\n    private resizeAnchorIndex: number = null;\n    private suggestedAnchorPositionOnCanvas: IPoint = null;\n    private suggestedAnchorIndexInPolygon: number = null;\n\n    public constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n        this.labelType = LabelType.POLYGON;\n    }\n\n    // =================================================================================================================\n    // EVENT HANDLERS\n    // =================================================================================================================\n\n    public update(data: EditorData): void {\n        if (!!data.event) {\n            switch (MouseEventUtil.getEventType(data.event)) {\n                case EventType.MOUSE_MOVE:\n                    this.mouseMoveHandler(data);\n                    break;\n                case EventType.MOUSE_UP:\n                    this.mouseUpHandler(data);\n                    break;\n                case EventType.MOUSE_DOWN:\n                    this.mouseDownHandler(data);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    public mouseDownHandler(data: EditorData): void {\n        const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\n        if (isMouseOverCanvas) {\n            if (this.isCreationInProgress()) {\n                const isMouseOverStartAnchor: boolean = RenderEngineUtil.isMouseOverAnchor(\n                    data.mousePositionOnViewPortContent, this.activePath[0], RenderEngineSettings.anchorSize);\n                if (isMouseOverStartAnchor) {\n                    this.addLabelAndFinishCreation(data);\n                } else  {\n                    this.updateActivelyCreatedLabel(data);\n                }\n            } else {\n                const polygonUnderMouse: LabelPolygon = this.getPolygonUnderMouse(data);\n                if (!!polygonUnderMouse) {\n                    const anchorIndex: number = polygonUnderMouse.vertices.reduce(\n                        (indexUnderMouse: number, anchor: IPoint, index: number) => {\n                        if (indexUnderMouse === null) {\n                            const anchorOnCanvas: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(anchor, data);\n                            if (this.isMouseOverAnchor(data.mousePositionOnViewPortContent, anchorOnCanvas)) {\n                                return index;\n                            }\n                        }\n                        return indexUnderMouse;\n                    }, null);\n\n                    if (anchorIndex !== null) {\n                        this.startExistingLabelResize(data, polygonUnderMouse.id, anchorIndex);\n                    } else {\n                        store.dispatch(updateActiveLabelId(polygonUnderMouse.id));\n                        const isMouseOverNewAnchor: boolean = this.isMouseOverAnchor(data.mousePositionOnViewPortContent, this.suggestedAnchorPositionOnCanvas);\n                        if (isMouseOverNewAnchor) {\n                            this.addSuggestedAnchorToPolygonLabel(data);\n                        }\n                    }\n                } else {\n                    this.updateActivelyCreatedLabel(data);\n                }\n            }\n        }\n    }\n\n    public mouseUpHandler(data: EditorData): void {\n        if (this.isResizeInProgress())\n            this.endExistingLabelResize(data);\n    }\n\n    public mouseMoveHandler(data: EditorData): void {\n        if (!!data.viewPortContentImageRect && !!data.mousePositionOnViewPortContent) {\n            const isOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\n            if (isOverImage && !this.isCreationInProgress()) {\n                const labelPolygon: LabelPolygon = this.getPolygonUnderMouse(data);\n                if (!!labelPolygon && !this.isResizeInProgress()) {\n                    if (LabelsSelector.getHighlightedLabelId() !== labelPolygon.id) {\n                        store.dispatch(updateHighlightedLabelId(labelPolygon.id))\n                    }\n                    const pathOnCanvas: IPoint[] = RenderEngineUtil.transferPolygonFromImageToViewPortContent(labelPolygon.vertices, data);\n                    const linesOnCanvas: ILine[] = this.mapPointsToLines(pathOnCanvas.concat(pathOnCanvas[0]));\n\n                    for (let j = 0; j < linesOnCanvas.length; j++) {\n                        const mouseOverLine = RenderEngineUtil.isMouseOverLine(\n                            data.mousePositionOnViewPortContent,\n                            linesOnCanvas[j],\n                            RenderEngineSettings.anchorHoverSize.width / 2\n                        )\n                        if (mouseOverLine) {\n                            this.suggestedAnchorPositionOnCanvas = LineUtil.getCenter(linesOnCanvas[j]);\n                            this.suggestedAnchorIndexInPolygon = j + 1;\n                            break;\n                        }\n                    }\n                } else {\n                    if (LabelsSelector.getHighlightedLabelId() !== null) {\n                        store.dispatch(updateHighlightedLabelId(null));\n                        this.discardSuggestedPoint();\n                    }\n                }\n            }\n        }\n    }\n\n    // =================================================================================================================\n    // RENDERING\n    // =================================================================================================================\n\n    public render(data: EditorData): void {\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\n        if (imageData) {\n            this.drawExistingLabels(data);\n            this.drawActivelyCreatedLabel(data);\n            this.drawActivelyResizeLabel(data);\n            this.updateCursorStyle(data);\n            this.drawSuggestedAnchor(data);\n        }\n    }\n\n    private updateCursorStyle(data: EditorData) {\n        if (!!this.canvas && !!data.mousePositionOnViewPortContent && !GeneralSelector.getImageDragModeStatus()) {\n            const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\n            if (isMouseOverCanvas) {\n                if (this.isCreationInProgress()) {\n                    const isMouseOverStartAnchor: boolean = this.isMouseOverAnchor(data.mousePositionOnViewPortContent, this.activePath[0]);\n                    if (isMouseOverStartAnchor && this.activePath.length > 2)\n                        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.CLOSE));\n                    else\n                        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.DEFAULT));\n                } else {\n                    const anchorUnderMouse: IPoint = this.getAnchorUnderMouse(data);\n                    const isMouseOverNewAnchor: boolean = this.isMouseOverAnchor(data.mousePositionOnViewPortContent, this.suggestedAnchorPositionOnCanvas);\n                    if (!!isMouseOverNewAnchor) {\n                        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.ADD));\n                    } else if (this.isResizeInProgress()) {\n                        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\n                    } else if (!!anchorUnderMouse) {\n                        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\n                    } else {\n                        RenderEngineUtil.wrapDefaultCursorStyleInCancel(data);\n                    }\n                }\n                this.canvas.style.cursor = 'none';\n            } else {\n                this.canvas.style.cursor = 'default';\n            }\n        }\n    }\n\n    private drawActivelyCreatedLabel(data: EditorData) {\n        const standardizedPoints: IPoint[] = this.activePath.map((point: IPoint) => RenderEngineUtil.setPointBetweenPixels(point));\n        const path = standardizedPoints.concat(data.mousePositionOnViewPortContent);\n        const lines: ILine[] = this.mapPointsToLines(path);\n        const lineColor: string = BaseRenderEngine.resolveLabelLineColor(null, true)\n        const anchorColor: string = BaseRenderEngine.resolveLabelAnchorColor(true)\n        DrawUtil.drawPolygonWithFill(this.canvas, path, DrawUtil.hexToRGB(lineColor, 0.2));\n        lines.forEach((line: ILine) => {\n            DrawUtil.drawLine(this.canvas, line.start, line.end, lineColor, RenderEngineSettings.LINE_THICKNESS);\n        });\n        standardizedPoints.forEach((point: IPoint) => {\n            DrawUtil.drawCircleWithFill(this.canvas, point, Settings.RESIZE_HANDLE_DIMENSION_PX/2, anchorColor);\n        })\n    }\n\n    private drawActivelyResizeLabel(data: EditorData) {\n        const activeLabelPolygon: LabelPolygon = LabelsSelector.getActivePolygonLabel();\n        if (!!activeLabelPolygon && this.isResizeInProgress()) {\n            const snappedMousePosition: IPoint = RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\n            const polygonOnCanvas: IPoint[] = activeLabelPolygon.vertices.map((point: IPoint, index: number) => {\n                return index === this.resizeAnchorIndex ? snappedMousePosition : RenderEngineUtil.transferPointFromImageToViewPortContent(point, data);\n            });\n            this.drawPolygon(activeLabelPolygon.labelId, polygonOnCanvas, true);\n        }\n    }\n\n    private drawExistingLabels(data: EditorData) {\n        const activeLabelId: string = LabelsSelector.getActiveLabelId();\n        const highlightedLabelId: string = LabelsSelector.getHighlightedLabelId();\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\n        imageData.labelPolygons.forEach((labelPolygon: LabelPolygon) => {\n            const isActive: boolean = labelPolygon.id === activeLabelId || labelPolygon.id === highlightedLabelId;\n            const pathOnCanvas: IPoint[] = RenderEngineUtil.transferPolygonFromImageToViewPortContent(labelPolygon.vertices, data);\n            if (!(labelPolygon.id === activeLabelId && this.isResizeInProgress())) {\n                this.drawPolygon(labelPolygon.labelId, pathOnCanvas, isActive);\n            }\n        });\n    }\n\n    private drawPolygon(labelId: string | null, polygon: IPoint[], isActive: boolean) {\n        const lineColor: string = BaseRenderEngine.resolveLabelLineColor(labelId, true)\n        const anchorColor: string = BaseRenderEngine.resolveLabelAnchorColor(true)\n        const standardizedPoints: IPoint[] = polygon.map((point: IPoint) => RenderEngineUtil.setPointBetweenPixels(point));\n        if (isActive) {\n            DrawUtil.drawPolygonWithFill(this.canvas, standardizedPoints, DrawUtil.hexToRGB(lineColor, 0.2));\n        }\n        DrawUtil.drawPolygon(this.canvas, standardizedPoints, lineColor, RenderEngineSettings.LINE_THICKNESS);\n        if (isActive) {\n            standardizedPoints.forEach((point: IPoint) => {\n                DrawUtil.drawCircleWithFill(this.canvas, point, Settings.RESIZE_HANDLE_DIMENSION_PX/2, anchorColor);\n            })\n        }\n    }\n\n    private drawSuggestedAnchor(data: EditorData) {\n        const anchorColor: string = BaseRenderEngine.resolveLabelAnchorColor(true)\n        if (this.suggestedAnchorPositionOnCanvas) {\n            const suggestedAnchorRect: IRect = RectUtil\n                .getRectWithCenterAndSize(this.suggestedAnchorPositionOnCanvas, RenderEngineSettings.suggestedAnchorDetectionSize);\n            const isMouseOverSuggestedAnchor: boolean = RectUtil.isPointInside(suggestedAnchorRect, data.mousePositionOnViewPortContent);\n\n            if (isMouseOverSuggestedAnchor) {\n                DrawUtil.drawCircleWithFill(\n                    this.canvas, this.suggestedAnchorPositionOnCanvas, Settings.RESIZE_HANDLE_DIMENSION_PX/2, anchorColor);\n            }\n        }\n    }\n\n    // =================================================================================================================\n    // CREATION\n    // =================================================================================================================\n\n    private updateActivelyCreatedLabel(data: EditorData) {\n        if (this.isCreationInProgress()) {\n            const mousePositionSnapped: IPoint = RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\n            this.activePath.push(mousePositionSnapped);\n        } else {\n            const isMouseOverImage: boolean = RectUtil.isPointInside(data.viewPortContentImageRect, data.mousePositionOnViewPortContent);\n            if (isMouseOverImage) {\n                EditorActions.setViewPortActionsDisabledStatus(true);\n                this.activePath.push(data.mousePositionOnViewPortContent);\n                store.dispatch(updateActiveLabelId(null));\n            }\n        }\n    }\n\n    public cancelLabelCreation() {\n        this.activePath = [];\n        EditorActions.setViewPortActionsDisabledStatus(false);\n    }\n\n    private finishLabelCreation() {\n        this.activePath = [];\n        EditorActions.setViewPortActionsDisabledStatus(false);\n    }\n\n    public addLabelAndFinishCreation(data: EditorData) {\n        if (this.isCreationInProgress() && this.activePath.length > 2) {\n            const polygonOnImage: IPoint[] = RenderEngineUtil.transferPolygonFromViewPortContentToImage(this.activePath, data);\n            this.addPolygonLabel(polygonOnImage);\n            this.finishLabelCreation();\n        }\n    }\n\n    private addPolygonLabel(polygon: IPoint[]) {\n        const activeLabelId = LabelsSelector.getActiveLabelNameId();\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\n        const labelPolygon: LabelPolygon = LabelUtil.createLabelPolygon(activeLabelId, polygon);\n        imageData.labelPolygons.push(labelPolygon);\n        store.dispatch(updateImageDataById(imageData.id, imageData));\n        store.dispatch(updateFirstLabelCreatedFlag(true));\n        store.dispatch(updateActiveLabelId(labelPolygon.id));\n    };\n\n    // =================================================================================================================\n    // TRANSFER\n    // =================================================================================================================\n\n    private startExistingLabelResize(data: EditorData, labelId: string, anchorIndex: number) {\n        store.dispatch(updateActiveLabelId(labelId));\n        this.resizeAnchorIndex = anchorIndex;\n        EditorActions.setViewPortActionsDisabledStatus(true);\n    }\n\n    private endExistingLabelResize(data: EditorData) {\n        this.applyResizeToPolygonLabel(data);\n        this.resizeAnchorIndex = null;\n        EditorActions.setViewPortActionsDisabledStatus(false);\n    }\n\n    private applyResizeToPolygonLabel(data: EditorData) {\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\n        const activeLabel: LabelPolygon = LabelsSelector.getActivePolygonLabel();\n        imageData.labelPolygons = imageData.labelPolygons.map((polygon: LabelPolygon) => {\n            if (polygon.id !== activeLabel.id) {\n                return polygon\n            } else {\n                return {\n                    ...polygon,\n                    vertices: polygon.vertices.map((value: IPoint, index: number) => {\n                        if (index !== this.resizeAnchorIndex) {\n                            return value;\n                        } else {\n                            const snappedMousePosition: IPoint =\n                                RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\n                            return RenderEngineUtil.transferPointFromViewPortContentToImage(snappedMousePosition, data);\n                        }\n                    })\n                }\n            }\n        });\n        store.dispatch(updateImageDataById(imageData.id, imageData));\n        store.dispatch(updateActiveLabelId(activeLabel.id));\n    }\n\n    private discardSuggestedPoint(): void {\n        this.suggestedAnchorIndexInPolygon = null;\n        this.suggestedAnchorPositionOnCanvas = null;\n    }\n\n    // =================================================================================================================\n    // UPDATE\n    // =================================================================================================================\n\n    private addSuggestedAnchorToPolygonLabel(data: EditorData) {\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\n        const activeLabel: LabelPolygon = LabelsSelector.getActivePolygonLabel();\n        const newAnchorPositionOnImage: IPoint =\n            RenderEngineUtil.transferPointFromViewPortContentToImage(this.suggestedAnchorPositionOnCanvas, data);\n        const insert = (arr, index, newItem) => [...arr.slice(0, index), newItem, ...arr.slice(index)];\n\n        const newImageData: ImageData = {\n            ...imageData,\n            labelPolygons: imageData.labelPolygons.map((polygon: LabelPolygon) => {\n                if (polygon.id !== activeLabel.id) {\n                    return polygon\n                } else {\n                    return {\n                        ...polygon,\n                        vertices: insert(polygon.vertices, this.suggestedAnchorIndexInPolygon, newAnchorPositionOnImage)\n                    }\n                }\n            })\n        };\n\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\n        this.startExistingLabelResize(data, activeLabel.id, this.suggestedAnchorIndexInPolygon);\n        this.discardSuggestedPoint();\n    }\n\n    // =================================================================================================================\n    // VALIDATORS\n    // =================================================================================================================\n\n    public isInProgress(): boolean {\n        return this.isCreationInProgress() || this.isResizeInProgress();\n    }\n\n    private isCreationInProgress(): boolean {\n        return this.activePath !== null && this.activePath.length !== 0;\n    }\n\n    private isResizeInProgress(): boolean {\n        return this.resizeAnchorIndex !== null;\n    }\n\n    private isMouseOverAnchor(mouse: IPoint, anchor: IPoint): boolean {\n        if (!mouse || !anchor) return null;\n        return RectUtil.isPointInside(RectUtil.getRectWithCenterAndSize(anchor, RenderEngineSettings.anchorSize), mouse);\n    }\n\n    // =================================================================================================================\n    // MAPPERS\n    // =================================================================================================================\n\n    private mapPointsToLines(points: IPoint[]): ILine[] {\n        const lines: ILine[] = [];\n        for (let i = 0; i < points.length - 1; i++) {\n            lines.push({start: points[i], end: points[i + 1]})\n        }\n        return lines;\n    }\n\n    // =================================================================================================================\n    // GETTERS\n    // =================================================================================================================\n\n    private getPolygonUnderMouse(data: EditorData): LabelPolygon {\n        const labelPolygons: LabelPolygon[] = LabelsSelector.getActiveImageData().labelPolygons;\n        for (let i = 0; i < labelPolygons.length; i++) {\n            const pathOnCanvas: IPoint[] = RenderEngineUtil.transferPolygonFromImageToViewPortContent(labelPolygons[i].vertices, data);\n            const linesOnCanvas: ILine[] = this.mapPointsToLines(pathOnCanvas.concat(pathOnCanvas[0]));\n\n            for (let j = 0; j < linesOnCanvas.length; j++) {\n                const mouseOverLine = RenderEngineUtil.isMouseOverLine(\n                    data.mousePositionOnViewPortContent,\n                    linesOnCanvas[j],\n                    RenderEngineSettings.anchorHoverSize.width / 2\n                )\n                if (mouseOverLine)\n                    return labelPolygons[i];\n            }\n            for (let j = 0; j < pathOnCanvas.length; j ++) {\n                if (this.isMouseOverAnchor(data.mousePositionOnViewPortContent, pathOnCanvas[j]))\n                    return labelPolygons[i];\n            }\n        }\n        return null;\n    }\n\n    private getAnchorUnderMouse(data: EditorData): IPoint {\n        const labelPolygons: LabelPolygon[] = LabelsSelector.getActiveImageData().labelPolygons;\n        for (let i = 0; i < labelPolygons.length; i++) {\n            const pathOnCanvas: IPoint[] = RenderEngineUtil.transferPolygonFromImageToViewPortContent(labelPolygons[i].vertices, data);\n            for (let j = 0; j < pathOnCanvas.length; j ++) {\n                if (this.isMouseOverAnchor(data.mousePositionOnViewPortContent, pathOnCanvas[j]))\n                    return pathOnCanvas[j];\n            }\n        }\n        return null;\n    }\n}\n","export class ViewPointSettings {\n    public static readonly CANVAS_MIN_MARGIN_PX: number = 20;\n    public static readonly MIN_ZOOM: number = 1;\n    public static readonly MAX_ZOOM: number = 4;\n    public static readonly ZOOM_STEP: number = 0.1;\n    public static readonly TRANSLATION_STEP_PX: number = 20;\n}","import {ISize} from \"../interfaces/ISize\";\n\nexport class ImageUtil {\n    public static getSize(image: HTMLImageElement): ISize {\n        if (!image) return null;\n        return {\n            width: image.width,\n            height: image.height\n        }\n    }\n}","export enum ProjectType {\n    IMAGE_RECOGNITION = 'IMAGE_RECOGNITION',\n    OBJECT_DETECTION = 'OBJECT_DETECTION'\n}\n","import {ISize} from \"../interfaces/ISize\";\n\nexport class SizeUtil {\n    public static scale(size: ISize, scale: number): ISize {\n        return {\n            width: size.width * scale,\n            height: size.height * scale\n        }\n    }\n}","import {Direction} from \"../data/enums/Direction\";\nimport {IPoint} from \"../interfaces/IPoint\";\n\nexport class DirectionUtil {\n    public static convertDirectionToVector(direction: Direction): IPoint {\n        switch (direction) {\n            case Direction.RIGHT:\n                return {x: 1, y: 0};\n            case Direction.LEFT:\n                return {x: -1, y: 0};\n            case Direction.TOP:\n                return {x: 0, y: 1};\n            case Direction.BOTTOM:\n                return {x: 0, y: -1};\n            case Direction.TOP_RIGHT:\n                return {x: 1, y: 1};\n            case Direction.TOP_LEFT:\n                return {x: -1, y: 1};\n            case Direction.BOTTOM_RIGHT:\n                return {x: 1, y: -1};\n            case Direction.BOTTOM_LEFT:\n                return {x: -1, y: -1};\n            case Direction.CENTER:\n                return {x: 0, y: 0};\n            default:\n                return null;\n        }\n    }\n}","import {EditorModel} from '../../staticModels/EditorModel';\nimport {NumberUtil} from '../../utils/NumberUtil';\nimport {ViewPointSettings} from '../../settings/ViewPointSettings';\nimport {ISize} from '../../interfaces/ISize';\nimport {IRect} from '../../interfaces/IRect';\nimport {ImageUtil} from '../../utils/ImageUtil';\nimport {RectUtil} from '../../utils/RectUtil';\nimport {IPoint} from '../../interfaces/IPoint';\nimport {PointUtil} from '../../utils/PointUtil';\nimport {SizeUtil} from '../../utils/SizeUtil';\nimport {EditorActions} from './EditorActions';\nimport {Direction} from '../../data/enums/Direction';\nimport {DirectionUtil} from '../../utils/DirectionUtil';\nimport {GeneralSelector} from '../../store/selectors/GeneralSelector';\nimport {store} from '../../index';\nimport {updateZoom} from '../../store/general/actionCreators';\n\nexport class ViewPortActions {\n    public static updateViewPortSize() {\n        if (!!EditorModel.editor) {\n            EditorModel.viewPortSize = {\n                width: EditorModel.editor.offsetWidth,\n                height: EditorModel.editor.offsetHeight\n            }\n        }\n    }\n\n    public static updateDefaultViewPortImageRect() {\n        if (!!EditorModel.viewPortSize && !!EditorModel.image) {\n            const minMargin: IPoint = {\n                x: ViewPointSettings.CANVAS_MIN_MARGIN_PX,\n                y: ViewPointSettings.CANVAS_MIN_MARGIN_PX\n            };\n            const realImageRect: IRect = {x: 0, y: 0, ...ImageUtil.getSize(EditorModel.image)};\n            const viewPortWithMarginRect: IRect = {x: 0, y: 0, ...EditorModel.viewPortSize};\n            const viewPortWithoutMarginRect: IRect = RectUtil\n                .expand(viewPortWithMarginRect, PointUtil.multiply(minMargin, -1));\n            EditorModel.defaultRenderImageRect = RectUtil\n                .fitInsideRectWithRatio(viewPortWithoutMarginRect, RectUtil.getRatio(realImageRect));\n        }\n    }\n\n    public static calculateViewPortContentSize(): ISize {\n        if (!!EditorModel.viewPortSize && !!EditorModel.image) {\n            const defaultViewPortImageRect: IRect = EditorModel.defaultRenderImageRect;\n            const scaledImageSize: ISize = SizeUtil\n                .scale(EditorModel.defaultRenderImageRect, GeneralSelector.getZoom());\n            return {\n                width: scaledImageSize.width + 2 * defaultViewPortImageRect.x,\n                height: scaledImageSize.height + 2 * defaultViewPortImageRect.y\n            }\n        } else {\n            return null;\n        }\n    }\n\n    public static calculateViewPortContentImageRect(): IRect {\n        if (!!EditorModel.viewPortSize && !!EditorModel.image) {\n            const defaultViewPortImageRect: IRect = EditorModel.defaultRenderImageRect;\n            const viewPortContentSize: ISize = ViewPortActions.calculateViewPortContentSize();\n            return {\n                ...defaultViewPortImageRect,\n                width: viewPortContentSize.width - 2 * defaultViewPortImageRect.x,\n                height: viewPortContentSize.height - 2 * defaultViewPortImageRect.y\n            }\n        } else {\n            return null;\n        }\n    }\n\n    public static resizeCanvas(newCanvasSize: ISize) {\n        if (!!newCanvasSize && !!EditorModel.canvas) {\n            EditorModel.canvas.width = newCanvasSize.width;\n            EditorModel.canvas.height = newCanvasSize.height;\n        }\n    };\n\n    public static resizeViewPortContent() {\n        const viewPortContentSize = ViewPortActions.calculateViewPortContentSize();\n        if (viewPortContentSize) {\n            ViewPortActions.resizeCanvas(viewPortContentSize);\n        }\n    }\n\n    public static calculateAbsoluteScrollPosition(relativePosition: IPoint): IPoint {\n        const viewPortContentSize = ViewPortActions.calculateViewPortContentSize();\n        const viewPortSize = EditorModel.viewPortSize;\n        return {\n            x: relativePosition.x * (viewPortContentSize.width - viewPortSize.width),\n            y: relativePosition.y * (viewPortContentSize.height - viewPortSize.height)\n        };\n    }\n\n    public static getRelativeScrollPosition(): IPoint {\n        if (!!EditorModel.viewPortScrollbars) {\n            const values = EditorModel.viewPortScrollbars.getValues();\n            return {\n                x: values.left,\n                y: values.top\n            }\n        } else {\n            return null;\n        }\n    }\n\n    public static getAbsoluteScrollPosition(): IPoint {\n        if (!!EditorModel.viewPortScrollbars) {\n            const values = EditorModel.viewPortScrollbars.getValues();\n            return {\n                x: values.scrollLeft,\n                y: values.scrollTop\n            }\n        } else {\n            return null;\n        }\n    }\n\n    public static setScrollPosition(position: IPoint) {\n        EditorModel.viewPortScrollbars.scrollLeft(position.x);\n        EditorModel.viewPortScrollbars.scrollTop(position.y);\n    }\n\n    public static translateViewPortPosition(direction: Direction) {\n        if (EditorModel.viewPortActionsDisabled || GeneralSelector.getZoom() === ViewPointSettings.MIN_ZOOM) return;\n\n        const directionVector: IPoint = DirectionUtil.convertDirectionToVector(direction);\n        const translationVector: IPoint = PointUtil.multiply(directionVector, ViewPointSettings.TRANSLATION_STEP_PX);\n        const currentScrollPosition = ViewPortActions.getAbsoluteScrollPosition();\n        const nextScrollPosition = PointUtil.add(currentScrollPosition, translationVector);\n        ViewPortActions.setScrollPosition(nextScrollPosition);\n        EditorModel.mousePositionOnViewPortContent = PointUtil\n            .add(EditorModel.mousePositionOnViewPortContent, translationVector);\n        EditorActions.fullRender();\n    }\n\n    public static zoomIn() {\n        if (EditorModel.viewPortActionsDisabled) return;\n\n        const currentZoom: number = GeneralSelector.getZoom();\n        const currentRelativeScrollPosition: IPoint = ViewPortActions.getRelativeScrollPosition();\n        const nextRelativeScrollPosition = currentZoom === 1 ? {x: 0.5, y: 0.5} : currentRelativeScrollPosition;\n        ViewPortActions.setZoom(currentZoom + ViewPointSettings.ZOOM_STEP);\n        ViewPortActions.resizeViewPortContent();\n        ViewPortActions.setScrollPosition(ViewPortActions.calculateAbsoluteScrollPosition(nextRelativeScrollPosition));\n        EditorActions.fullRender();\n    }\n\n    public static zoomOut() {\n        if (EditorModel.viewPortActionsDisabled) return;\n\n        const currentZoom: number = GeneralSelector.getZoom();\n        const currentRelativeScrollPosition: IPoint = ViewPortActions.getRelativeScrollPosition();\n        ViewPortActions.setZoom(currentZoom - ViewPointSettings.ZOOM_STEP);\n        ViewPortActions.resizeViewPortContent();\n        ViewPortActions.setScrollPosition(ViewPortActions\n            .calculateAbsoluteScrollPosition(currentRelativeScrollPosition));\n        EditorActions.fullRender();\n    }\n\n    public static setDefaultZoom() {\n        const currentRelativeScrollPosition: IPoint = ViewPortActions.getRelativeScrollPosition();\n        ViewPortActions.setZoom(ViewPointSettings.MIN_ZOOM);\n        ViewPortActions.resizeViewPortContent();\n        ViewPortActions.setScrollPosition(ViewPortActions\n            .calculateAbsoluteScrollPosition(currentRelativeScrollPosition));\n        EditorActions.fullRender();\n    }\n\n    public static setOneForOneZoom() {\n        const currentZoom: number = GeneralSelector.getZoom();\n        const currentRelativeScrollPosition: IPoint = ViewPortActions.getRelativeScrollPosition();\n        const nextRelativeScrollPosition = currentZoom === 1 ? {x: 0.5, y: 0.5} : currentRelativeScrollPosition;\n        const nextZoom: number = EditorModel.image.width / EditorModel.defaultRenderImageRect.width\n        ViewPortActions.setZoom(nextZoom);\n        ViewPortActions.resizeViewPortContent();\n        ViewPortActions.setScrollPosition(ViewPortActions.calculateAbsoluteScrollPosition(nextRelativeScrollPosition));\n        EditorActions.fullRender();\n    }\n\n    public static setZoom(value: number) {\n        const currentZoom: number = GeneralSelector.getZoom();\n        const isNewValueValid: boolean = NumberUtil.isValueInRange(\n            value, ViewPointSettings.MIN_ZOOM, ViewPointSettings.MAX_ZOOM);\n        if (isNewValueValid && value !== currentZoom) {\n            store.dispatch(updateZoom(value));\n        }\n    }\n}\n","import {IRect} from '../../interfaces/IRect';\nimport {BaseRenderEngine} from './BaseRenderEngine';\nimport {EditorData} from '../../data/EditorData';\nimport {EditorModel} from '../../staticModels/EditorModel';\nimport {ViewPortActions} from '../actions/ViewPortActions';\nimport {DrawUtil} from '../../utils/DrawUtil';\nimport {RenderEngineUtil} from '../../utils/RenderEngineUtil';\nimport {RenderEngineSettings} from '../../settings/RenderEngineSettings';\nimport {IPoint} from '../../interfaces/IPoint';\nimport {GeneralSelector} from '../../store/selectors/GeneralSelector';\nimport {ProjectType} from '../../data/enums/ProjectType';\nimport {PopupWindowType} from '../../data/enums/PopupWindowType';\n\nexport class PrimaryEditorRenderEngine extends BaseRenderEngine {\n\n    public constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n    }\n\n    // =================================================================================================================\n    // EVENT HANDLERS\n    // =================================================================================================================\n\n    public mouseMoveHandler(data: EditorData): void {}\n    public mouseDownHandler(data: EditorData): void {}\n    public mouseUpHandler(data: EditorData): void {}\n\n    // =================================================================================================================\n    // RENDERING\n    // =================================================================================================================\n\n    public render(data: EditorData): void {\n        this.drawImage(EditorModel.image, ViewPortActions.calculateViewPortContentImageRect());\n        this.renderCrossHair(data);\n    }\n\n    public renderCrossHair(data: EditorData): void {\n        if (!this.shouldRenderCrossHair(data)) return;\n\n        const mouse = RenderEngineUtil.setPointBetweenPixels(data.mousePositionOnViewPortContent);\n        const drawLine = (startPoint: IPoint, endPoint: IPoint) => {\n            DrawUtil.drawLine(this.canvas, startPoint, endPoint, RenderEngineSettings.CROSS_HAIR_LINE_COLOR, 2)\n        }\n        drawLine(\n            {x: mouse.x, y: 0},\n            {x: mouse.x - 1, y: mouse.y - RenderEngineSettings.crossHairPadding}\n        )\n        drawLine(\n            {x: mouse.x, y: mouse.y + RenderEngineSettings.crossHairPadding},\n            {x: mouse.x - 1, y: data.viewPortContentSize.height}\n        )\n        drawLine(\n            {x: 0, y: mouse.y},\n            {x: mouse.x - RenderEngineSettings.crossHairPadding, y: mouse.y - 1}\n        )\n        drawLine(\n            {x: mouse.x + RenderEngineSettings.crossHairPadding, y: mouse.y},\n            {x: data.viewPortContentSize.width, y: mouse.y - 1}\n        )\n    }\n\n    public shouldRenderCrossHair(data: EditorData): boolean {\n        const isCrossHairVisible = GeneralSelector.getCrossHairVisibleStatus();\n        const isImageInDragMode = GeneralSelector.getImageDragModeStatus();\n        const projectType: ProjectType = GeneralSelector.getProjectType();\n        const activePopupType: PopupWindowType = GeneralSelector.getActivePopupType();\n        const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\n        const isCustomCursorBlocked =  GeneralSelector.getPreventCustomCursorStatus();\n\n        return [\n            !!this.canvas,\n            isCrossHairVisible,\n            !isImageInDragMode,\n            projectType !== ProjectType.IMAGE_RECOGNITION,\n            !activePopupType,\n            isMouseOverCanvas,\n            !isCustomCursorBlocked\n        ].every(Boolean)\n    }\n\n    public drawImage(image: HTMLImageElement, imageRect: IRect) {\n        if (!!image && !!this.canvas) {\n            const ctx = this.canvas.getContext('2d');\n            ctx.drawImage(image, imageRect.x, imageRect.y, imageRect.width, imageRect.height);\n        }\n    }\n\n    isInProgress(): boolean {\n        return false;\n    }\n}\n","export enum LineAnchorType {\n    START = \"START\",\n    END = \"END\"\n}","import {EditorData} from \"../../data/EditorData\";\nimport {MouseEventUtil} from \"../../utils/MouseEventUtil\";\nimport {EventType} from \"../../data/enums/EventType\";\nimport {store} from \"../../index\";\nimport {updateCustomCursorStyle} from \"../../store/general/actionCreators\";\nimport {CustomCursorStyle} from \"../../data/enums/CustomCursorStyle\";\nimport {EditorModel} from \"../../staticModels/EditorModel\";\nimport {IPoint} from \"../../interfaces/IPoint\";\nimport {PointUtil} from \"../../utils/PointUtil\";\nimport {ViewPortActions} from \"../actions/ViewPortActions\";\n\nexport class ViewPortHelper {\n    private startScrollPosition: IPoint;\n    private mouseStartPosition: IPoint;\n\n    public update(data: EditorData): void {\n        if (!!data.event) {\n            switch (MouseEventUtil.getEventType(data.event)) {\n                case EventType.MOUSE_MOVE:\n                    this.mouseMoveHandler(data);\n                    break;\n                case EventType.MOUSE_UP:\n                    this.mouseUpHandler(data);\n                    break;\n                case EventType.MOUSE_DOWN:\n                    this.mouseDownHandler(data);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    private mouseDownHandler(data: EditorData) {\n        const event = data.event as MouseEvent;\n        this.startScrollPosition = data.absoluteViewPortContentScrollPosition;\n        this.mouseStartPosition = {x: event.screenX, y: event.screenY};\n\n        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.GRABBING));\n        EditorModel.canvas.style.cursor = \"none\";\n    }\n\n    private mouseUpHandler(data: EditorData) {\n        this.startScrollPosition = null;\n        this.mouseStartPosition = null;\n        store.dispatch(updateCustomCursorStyle(CustomCursorStyle.GRAB));\n        EditorModel.canvas.style.cursor = \"none\";\n    }\n\n    private mouseMoveHandler(data: EditorData) {\n        if (!!this.startScrollPosition && !!this.mouseStartPosition) {\n            const event = data.event as MouseEvent;\n            const currentMousePosition: IPoint = {x: event.screenX, y: event.screenY};\n            const mousePositionDelta: IPoint = PointUtil.subtract(currentMousePosition, this.mouseStartPosition);\n            const nextScrollPosition = PointUtil.subtract(this.startScrollPosition, mousePositionDelta);\n            ViewPortActions.setScrollPosition(nextScrollPosition);\n            store.dispatch(updateCustomCursorStyle(CustomCursorStyle.GRABBING));\n        } else {\n            store.dispatch(updateCustomCursorStyle(CustomCursorStyle.GRAB));\n        }\n        EditorModel.canvas.style.cursor = \"none\";\n    }\n}","import {BaseRenderEngine} from './BaseRenderEngine';\nimport {RenderEngineSettings} from '../../settings/RenderEngineSettings';\nimport {LabelType} from '../../data/enums/LabelType';\nimport {EditorData} from '../../data/EditorData';\nimport {RenderEngineUtil} from '../../utils/RenderEngineUtil';\nimport {ImageData, LabelLine} from '../../store/labels/types';\nimport {IPoint} from '../../interfaces/IPoint';\nimport {RectUtil} from '../../utils/RectUtil';\nimport {store} from '../../index';\nimport {\n    updateActiveLabelId,\n    updateFirstLabelCreatedFlag,\n    updateHighlightedLabelId,\n    updateImageDataById\n} from '../../store/labels/actionCreators';\nimport {EditorActions} from '../actions/EditorActions';\nimport {LabelsSelector} from '../../store/selectors/LabelsSelector';\nimport {DrawUtil} from '../../utils/DrawUtil';\nimport {GeneralSelector} from '../../store/selectors/GeneralSelector';\nimport { v4 as uuidv4 } from 'uuid';\nimport {ILine} from '../../interfaces/ILine';\nimport {LineUtil} from '../../utils/LineUtil';\nimport {updateCustomCursorStyle} from '../../store/general/actionCreators';\nimport {CustomCursorStyle} from '../../data/enums/CustomCursorStyle';\nimport {LineAnchorType} from '../../data/enums/LineAnchorType';\nimport {Settings} from '../../settings/Settings';\n\nexport class LineRenderEngine extends BaseRenderEngine {\n\n    // =================================================================================================================\n    // STATE\n    // =================================================================================================================\n\n    private lineCreationStartPoint: IPoint;\n    private lineUpdateAnchorType: LineAnchorType;\n\n    public constructor(canvas: HTMLCanvasElement) {\n        super(canvas);\n        this.labelType = LabelType.LINE;\n    }\n\n    // =================================================================================================================\n    // EVENT HANDLERS\n    // =================================================================================================================\n\n    public mouseDownHandler(data: EditorData): void {\n        const isMouseOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\n        const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\n        const anchorTypeUnderMouse = this.getAnchorTypeUnderMouse(data);\n        const labelLineUnderMouse: LabelLine = this.getLineUnderMouse(data);\n\n        if (isMouseOverCanvas) {\n            if (!!anchorTypeUnderMouse && !this.isResizeInProgress()) {\n                const labelLine: LabelLine = this.getLineUnderMouse(data);\n                this.startExistingLabelUpdate(labelLine.id, anchorTypeUnderMouse)\n            } else if (!!labelLineUnderMouse) {\n                store.dispatch(updateActiveLabelId(labelLineUnderMouse.id));\n            } else if (!this.isInProgress() && isMouseOverImage) {\n                this.startNewLabelCreation(data)\n            } else if (this.isInProgress()) {\n                this.finishNewLabelCreation(data);\n            }\n        }\n    }\n\n    public mouseUpHandler(data: EditorData): void {\n        if (this.isResizeInProgress()) {\n            this.endExistingLabelUpdate(data)\n        }\n    }\n\n    public mouseMoveHandler(data: EditorData): void {\n        const isOverImage: boolean = RenderEngineUtil.isMouseOverImage(data);\n        if (isOverImage) {\n            const labelLine: LabelLine = this.getLineUnderMouse(data);\n            if (!!labelLine) {\n                if (LabelsSelector.getHighlightedLabelId() !== labelLine.id) {\n                    store.dispatch(updateHighlightedLabelId(labelLine.id))\n                }\n            } else {\n                if (LabelsSelector.getHighlightedLabelId() !== null) {\n                    store.dispatch(updateHighlightedLabelId(null));\n                }\n            }\n        }\n    }\n\n    // =================================================================================================================\n    // RENDERING\n    // =================================================================================================================\n\n    public render(data: EditorData): void {\n        this.drawExistingLabels(data);\n        this.drawActivelyCreatedLabel(data)\n        this.drawActivelyResizeLabel(data)\n        this.updateCursorStyle(data);\n    }\n\n    private drawExistingLabels(data: EditorData) {\n        const activeLabelId: string = LabelsSelector.getActiveLabelId();\n        const highlightedLabelId: string = LabelsSelector.getHighlightedLabelId();\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\n        imageData.labelLines.forEach((labelLine: LabelLine) => {\n            const isActive: boolean = labelLine.id === activeLabelId || labelLine.id === highlightedLabelId;\n            const lineOnCanvas = RenderEngineUtil.transferLineFromImageToViewPortContent(labelLine.line, data)\n            if (!(labelLine.id === activeLabelId && this.isResizeInProgress())) {\n                this.drawLine(labelLine.labelId, lineOnCanvas, isActive)\n            }\n        });\n    }\n\n    private drawActivelyCreatedLabel(data: EditorData) {\n        if (this.isInProgress()) {\n            const line = {start: this.lineCreationStartPoint, end: data.mousePositionOnViewPortContent}\n            DrawUtil.drawLine(this.canvas, line.start, line.end, RenderEngineSettings.lineActiveColor, RenderEngineSettings.LINE_THICKNESS);\n            DrawUtil.drawCircleWithFill(this.canvas, this.lineCreationStartPoint, Settings.RESIZE_HANDLE_DIMENSION_PX/2, RenderEngineSettings.defaultAnchorColor)\n        }\n    }\n\n    private drawActivelyResizeLabel(data: EditorData) {\n        const activeLabelLine: LabelLine = LabelsSelector.getActiveLineLabel();\n        if (!!activeLabelLine && this.isResizeInProgress()) {\n            const snappedMousePosition: IPoint =\n                RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\n            const lineOnCanvas = RenderEngineUtil.transferLineFromImageToViewPortContent(activeLabelLine.line, data)\n            const lineToDraw = {\n                start: this.lineUpdateAnchorType === LineAnchorType.START ? snappedMousePosition : lineOnCanvas.start,\n                end: this.lineUpdateAnchorType === LineAnchorType.END ? snappedMousePosition : lineOnCanvas.end\n            }\n            this.drawLine(activeLabelLine.labelId, lineToDraw, true)\n        }\n    }\n\n    private updateCursorStyle(data: EditorData) {\n        if (!!this.canvas && !!data.mousePositionOnViewPortContent && !GeneralSelector.getImageDragModeStatus()) {\n            const isMouseOverCanvas: boolean = RenderEngineUtil.isMouseOverCanvas(data);\n            if (isMouseOverCanvas) {\n                const anchorTypeUnderMouse = this.getAnchorTypeUnderMouse(data);\n                if (!this.isInProgress() && !!anchorTypeUnderMouse) {\n                    store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\n                } else if (this.isResizeInProgress()) {\n                    store.dispatch(updateCustomCursorStyle(CustomCursorStyle.MOVE));\n                } else {\n                    RenderEngineUtil.wrapDefaultCursorStyleInCancel(data);\n                }\n                this.canvas.style.cursor = 'none';\n            } else {\n                this.canvas.style.cursor = 'default';\n            }\n        }\n    }\n\n    private drawLine(labelId: string, line: ILine, isActive: boolean) {\n        const lineColor: string = BaseRenderEngine.resolveLabelLineColor(labelId, isActive)\n        const anchorColor = BaseRenderEngine.resolveLabelAnchorColor(isActive)\n        const standardizedLine: ILine = {\n            start: RenderEngineUtil.setPointBetweenPixels(line.start),\n            end: RenderEngineUtil.setPointBetweenPixels(line.end)\n        }\n        DrawUtil.drawLine(this.canvas, standardizedLine.start, standardizedLine.end, lineColor, RenderEngineSettings.LINE_THICKNESS);\n        if (isActive) {\n\n            LineUtil\n                .getPoints(line)\n                .forEach((point: IPoint) => DrawUtil.drawCircleWithFill(this.canvas, point,\n                    Settings.RESIZE_HANDLE_DIMENSION_PX/2, anchorColor))\n        }\n    }\n\n    // =================================================================================================================\n    // VALIDATORS\n    // =================================================================================================================\n\n    public isInProgress(): boolean {\n        return !!this.lineCreationStartPoint\n    }\n\n    public isResizeInProgress(): boolean {\n        return !!this.lineUpdateAnchorType;\n    }\n\n    private isMouseOverAnchor(mouse: IPoint, anchor: IPoint): boolean {\n        if (!mouse || !anchor) return null;\n        return RectUtil.isPointInside(RectUtil.getRectWithCenterAndSize(anchor, RenderEngineSettings.anchorSize), mouse);\n    }\n\n    // =================================================================================================================\n    // CREATION\n    // =================================================================================================================\n\n    private startNewLabelCreation = (data: EditorData) => {\n        this.lineCreationStartPoint = RenderEngineUtil.setPointBetweenPixels(data.mousePositionOnViewPortContent)\n        EditorActions.setViewPortActionsDisabledStatus(true);\n    }\n\n    private finishNewLabelCreation = (data: EditorData) => {\n        const mousePositionOnCanvasSnapped: IPoint = RectUtil.snapPointToRect(\n            data.mousePositionOnViewPortContent, data.viewPortContentImageRect\n        );\n        const lineOnCanvas = {start: this.lineCreationStartPoint, end: mousePositionOnCanvasSnapped}\n        const lineOnImage = RenderEngineUtil.transferLineFromViewPortContentToImage(lineOnCanvas, data);\n        const activeLabelId = LabelsSelector.getActiveLabelNameId();\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\n        const labelLine: LabelLine = {\n            id: uuidv4(),\n            labelId: activeLabelId,\n            line: lineOnImage\n        };\n        imageData.labelLines.push(labelLine);\n        store.dispatch(updateImageDataById(imageData.id, imageData));\n        store.dispatch(updateFirstLabelCreatedFlag(true));\n        store.dispatch(updateActiveLabelId(labelLine.id));\n        this.lineCreationStartPoint = null\n        EditorActions.setViewPortActionsDisabledStatus(false);\n    };\n\n    public cancelLabelCreation() {\n        this.lineCreationStartPoint = null\n        EditorActions.setViewPortActionsDisabledStatus(false);\n    }\n\n    // =================================================================================================================\n    // UPDATE\n    // =================================================================================================================\n\n    private startExistingLabelUpdate(labelId: string, anchorType: LineAnchorType) {\n        store.dispatch(updateActiveLabelId(labelId));\n        this.lineUpdateAnchorType = anchorType;\n        EditorActions.setViewPortActionsDisabledStatus(true);\n    }\n\n    private endExistingLabelUpdate(data: EditorData) {\n        this.applyUpdateToLineLabel(data);\n        this.lineUpdateAnchorType = null;\n        EditorActions.setViewPortActionsDisabledStatus(false);\n    }\n\n    private applyUpdateToLineLabel(data: EditorData) {\n        const imageData: ImageData = LabelsSelector.getActiveImageData();\n        const activeLabel: LabelLine = LabelsSelector.getActiveLineLabel();\n        imageData.labelLines = imageData.labelLines.map((lineLabel: LabelLine) => {\n            if (lineLabel.id !== activeLabel.id) {\n                return lineLabel\n            } else {\n                const snappedMousePosition: IPoint =\n                    RectUtil.snapPointToRect(data.mousePositionOnViewPortContent, data.viewPortContentImageRect);\n                const mousePositionOnImage = RenderEngineUtil.transferPointFromViewPortContentToImage(\n                    snappedMousePosition, data\n                );\n                return {\n                    ...lineLabel,\n                    line: {\n                        start: this.lineUpdateAnchorType === LineAnchorType.START ? mousePositionOnImage : lineLabel.line.start,\n                        end: this.lineUpdateAnchorType === LineAnchorType.END ? mousePositionOnImage : lineLabel.line.end\n                    }\n                }\n            }\n        });\n\n        store.dispatch(updateImageDataById(imageData.id, imageData));\n        store.dispatch(updateActiveLabelId(activeLabel.id));\n    }\n\n    // =================================================================================================================\n    // GETTERS\n    // =================================================================================================================\n\n    private getLineUnderMouse(data: EditorData): LabelLine {\n        const labelLines: LabelLine[] = LabelsSelector.getActiveImageData().labelLines;\n        for (let i = 0; i < labelLines.length; i++) {\n            const lineOnCanvas: ILine = RenderEngineUtil.transferLineFromImageToViewPortContent(labelLines[i].line, data);\n            const mouseOverLine = RenderEngineUtil.isMouseOverLine(\n                data.mousePositionOnViewPortContent,\n                lineOnCanvas,\n                RenderEngineSettings.anchorHoverSize.width / 2\n            )\n            if (mouseOverLine) return labelLines[i]\n        }\n        return null;\n    }\n\n    private getAnchorTypeUnderMouse(data: EditorData): LineAnchorType {\n        const labelLines: LabelLine[] = LabelsSelector.getActiveImageData().labelLines;\n        for (let i = 0; i < labelLines.length; i++) {\n            const lineOnCanvas: ILine = RenderEngineUtil.transferLineFromImageToViewPortContent(labelLines[i].line, data);\n            if (this.isMouseOverAnchor(data.mousePositionOnViewPortContent, lineOnCanvas.start)) {\n                return LineAnchorType.START\n            }\n            if (this.isMouseOverAnchor(data.mousePositionOnViewPortContent, lineOnCanvas.end)) {\n                return LineAnchorType.END\n            }\n        }\n        return null;\n    }\n}\n","import {LabelType} from \"../../data/enums/LabelType\";\nimport {EditorModel} from \"../../staticModels/EditorModel\";\nimport {RectRenderEngine} from \"../render/RectRenderEngine\";\nimport {PointRenderEngine} from \"../render/PointRenderEngine\";\nimport {PolygonRenderEngine} from \"../render/PolygonRenderEngine\";\nimport {IRect} from \"../../interfaces/IRect\";\nimport {RectUtil} from \"../../utils/RectUtil\";\nimport {EditorData} from \"../../data/EditorData\";\nimport {CanvasUtil} from \"../../utils/CanvasUtil\";\nimport React from \"react\";\nimport {IPoint} from \"../../interfaces/IPoint\";\nimport {DrawUtil} from \"../../utils/DrawUtil\";\nimport {PrimaryEditorRenderEngine} from \"../render/PrimaryEditorRenderEngine\";\nimport {ContextManager} from \"../context/ContextManager\";\nimport {PointUtil} from \"../../utils/PointUtil\";\nimport {ViewPortActions} from \"./ViewPortActions\";\nimport {ISize} from \"../../interfaces/ISize\";\nimport {ImageUtil} from \"../../utils/ImageUtil\";\nimport {GeneralSelector} from \"../../store/selectors/GeneralSelector\";\nimport {ViewPortHelper} from \"../helpers/ViewPortHelper\";\nimport {CustomCursorStyle} from \"../../data/enums/CustomCursorStyle\";\nimport {LineRenderEngine} from \"../render/LineRenderEngine\";\n\nexport class EditorActions {\n\n    // =================================================================================================================\n    // RENDER ENGINES\n    // =================================================================================================================\n\n    public static mountSupportRenderingEngine(activeLabelType: LabelType) {\n        switch (activeLabelType) {\n            case LabelType.RECT:\n                EditorModel.supportRenderingEngine = new RectRenderEngine(EditorModel.canvas);\n                break;\n            case LabelType.POINT:\n                EditorModel.supportRenderingEngine = new PointRenderEngine(EditorModel.canvas);\n                break;\n            case LabelType.LINE:\n                EditorModel.supportRenderingEngine = new LineRenderEngine(EditorModel.canvas);\n                break;\n            case LabelType.POLYGON:\n                EditorModel.supportRenderingEngine = new PolygonRenderEngine(EditorModel.canvas);\n                break;\n            default:\n                EditorModel.supportRenderingEngine = null;\n                break;\n        }\n    };\n\n    public static swapSupportRenderingEngine(activeLabelType: LabelType) {\n        EditorActions.mountSupportRenderingEngine(activeLabelType);\n    };\n\n    public static mountRenderEnginesAndHelpers(activeLabelType: LabelType) {\n        EditorModel.viewPortHelper = new ViewPortHelper();\n        EditorModel.primaryRenderingEngine = new PrimaryEditorRenderEngine(EditorModel.canvas);\n        EditorActions.mountSupportRenderingEngine(activeLabelType);\n    }\n\n    // =================================================================================================================\n    // RENDER\n    // =================================================================================================================\n\n    public static fullRender() {\n        DrawUtil.clearCanvas(EditorModel.canvas);\n        EditorModel.primaryRenderingEngine.render(EditorActions.getEditorData());\n        EditorModel.supportRenderingEngine && EditorModel.supportRenderingEngine.render(EditorActions.getEditorData());\n    }\n\n    // =================================================================================================================\n    // SETTERS\n    // =================================================================================================================\n\n    public static setLoadingStatus(status: boolean) {\n        EditorModel.isLoading = status;\n    }\n    public static setActiveImage(image: HTMLImageElement) {\n        EditorModel.image = image;\n    }\n\n    public static setViewPortActionsDisabledStatus(status: boolean) {\n        EditorModel.viewPortActionsDisabled = status;\n    }\n\n    // =================================================================================================================\n    // GETTERS\n    // =================================================================================================================\n\n    public static getEditorData(event?: Event): EditorData {\n        return {\n            mousePositionOnViewPortContent: EditorModel.mousePositionOnViewPortContent,\n            viewPortContentSize: CanvasUtil.getSize(EditorModel.canvas),\n            activeKeyCombo: ContextManager.getActiveCombo(),\n            event: event,\n            zoom: GeneralSelector.getZoom(),\n            viewPortSize: EditorModel.viewPortSize,\n            defaultRenderImageRect: EditorModel.defaultRenderImageRect,\n            viewPortContentImageRect: ViewPortActions.calculateViewPortContentImageRect(),\n            realImageSize: ImageUtil.getSize(EditorModel.image),\n            absoluteViewPortContentScrollPosition: ViewPortActions.getAbsoluteScrollPosition()\n        }\n    }\n\n    // =================================================================================================================\n    // HELPERS\n    // =================================================================================================================\n\n    public static updateMousePositionIndicator(event: React.MouseEvent<HTMLCanvasElement, MouseEvent> | MouseEvent) {\n        if (!EditorModel.image || !EditorModel.canvas) {\n            EditorModel.mousePositionIndicator.style.display = \"none\";\n            EditorModel.cursor.style.display = \"none\";\n            return;\n        }\n\n        const mousePositionOverViewPortContent: IPoint = CanvasUtil.getMousePositionOnCanvasFromEvent(event, EditorModel.canvas);\n        const viewPortContentScrollPosition: IPoint = ViewPortActions.getAbsoluteScrollPosition();\n        const viewPortContentImageRect: IRect = ViewPortActions.calculateViewPortContentImageRect();\n        const mousePositionOverViewPort: IPoint = PointUtil.subtract(mousePositionOverViewPortContent, viewPortContentScrollPosition);\n        const isMouseOverImage: boolean = RectUtil.isPointInside(viewPortContentImageRect, mousePositionOverViewPortContent);\n        const isMouseOverViewPort: boolean = RectUtil.isPointInside({x: 0, y: 0, ...EditorModel.viewPortSize}, mousePositionOverViewPort);\n\n        if (isMouseOverViewPort && !GeneralSelector.getPreventCustomCursorStatus()) {\n            EditorModel.cursor.style.left = mousePositionOverViewPort.x + \"px\";\n            EditorModel.cursor.style.top = mousePositionOverViewPort.y + \"px\";\n            EditorModel.cursor.style.display = \"block\";\n\n            if (isMouseOverImage && ![CustomCursorStyle.GRAB, CustomCursorStyle.GRABBING].includes(GeneralSelector.getCustomCursorStyle())) {\n                const imageSize: ISize = ImageUtil.getSize(EditorModel.image);\n                const scale: number = imageSize.width / viewPortContentImageRect.width;\n                const mousePositionOverImage: IPoint = PointUtil.multiply(\n                    PointUtil.subtract(mousePositionOverViewPortContent, viewPortContentImageRect), scale);\n                const text: string = \"x: \" + Math.round(mousePositionOverImage.x) + \", y: \" + Math.round(mousePositionOverImage.y);\n\n                EditorModel.mousePositionIndicator.innerHTML = text;\n                EditorModel.mousePositionIndicator.style.left = (mousePositionOverViewPort.x + 15) + \"px\";\n                EditorModel.mousePositionIndicator.style.top = (mousePositionOverViewPort.y + 15) + \"px\";\n                EditorModel.mousePositionIndicator.style.display = \"block\";\n            } else {\n                EditorModel.mousePositionIndicator.style.display = \"none\";\n            }\n        } else {\n            EditorModel.cursor.style.display = \"none\";\n            EditorModel.mousePositionIndicator.style.display = \"none\";\n        }\n    };\n}","import {HotKeyAction} from \"../../data/HotKeyAction\";\n\nexport class BaseContext {\n    public static actions: HotKeyAction[] = [];\n\n    public static getActions(): HotKeyAction[] {\n        return this.actions;\n    }\n}","import { LabelsSelector } from \"../../store/selectors/LabelsSelector\";\nimport { store } from \"../../index\";\nimport {\n  updateActiveImageIndex,\n  updateActiveLabelId,\n  updateActiveLabelNameId,\n  updateImageDataById,\n} from \"../../store/labels/actionCreators\";\nimport { ViewPortActions } from \"./ViewPortActions\";\nimport { EditorModel } from \"../../staticModels/EditorModel\";\nimport { LabelType } from \"../../data/enums/LabelType\";\nimport {\n  ImageData,\n  LabelLine,\n  LabelPoint,\n  LabelPolygon,\n  LabelRect,\n} from \"../../store/labels/types\";\nimport { LabelStatus } from \"../../data/enums/LabelStatus\";\nimport { remove } from \"lodash\";\n\nexport class ImageActions {\n  public static getPreviousImage(): void {\n    const currentImageIndex: number = LabelsSelector.getActiveImageIndex();\n    ImageActions.getImageByIndex(currentImageIndex - 1);\n  }\n\n  public static getNextImage(): void {\n    const currentImageIndex: number = LabelsSelector.getActiveImageIndex();\n    ImageActions.getImageByIndex(currentImageIndex + 1);\n  }\n\n  public static getImageByIndex(index: number): void {\n    if (EditorModel.viewPortActionsDisabled) return;\n\n    const imageCount: number = LabelsSelector.getImagesData().length;\n\n    if (index < 0 || index > imageCount - 1) {\n      return;\n    } else {\n      ViewPortActions.setZoom(1);\n      store.dispatch(updateActiveImageIndex(index));\n      store.dispatch(updateActiveLabelId(null));\n    }\n  }\n\n  public static setActiveLabelOnActiveImage(labelIndex: number): void {\n    const labelNames = LabelsSelector.getLabelNames();\n    if (labelNames.length < labelIndex + 1) {\n      return;\n    }\n\n    const imageData: ImageData = LabelsSelector.getActiveImageData();\n    store.dispatch(\n      updateImageDataById(\n        imageData.id,\n        ImageActions.mapNewImageData(imageData, labelIndex)\n      )\n    );\n    store.dispatch(updateActiveLabelNameId(labelNames[1].id));\n  }\n\n  private static mapNewImageData(\n    imageData: ImageData,\n    labelIndex: number\n  ): ImageData {\n    const labelType: LabelType = LabelsSelector.getActiveLabelType();\n    const labelNames = LabelsSelector.getLabelNames();\n    let newImageData: ImageData = {\n      ...imageData,\n    };\n    switch (labelType) {\n      case LabelType.POINT:\n        const point = LabelsSelector.getActivePointLabel();\n        newImageData.labelPoints = imageData.labelPoints.map(\n          (labelPoint: LabelPoint) => {\n            if (labelPoint.id === point.id) {\n              return {\n                ...labelPoint,\n                labelId: labelNames[labelIndex].id,\n                status: LabelStatus.ACCEPTED,\n              };\n            }\n            return labelPoint;\n          }\n        );\n        store.dispatch(updateActiveLabelId(point.id));\n        break;\n      case LabelType.LINE:\n        const line = LabelsSelector.getActiveLineLabel();\n        newImageData.labelLines = imageData.labelLines.map(\n          (labelLine: LabelLine) => {\n            if (labelLine.id === line.id) {\n              return {\n                ...labelLine,\n                labelId: labelNames[labelIndex].id,\n                status: LabelStatus.ACCEPTED,\n              };\n            }\n            return labelLine;\n          }\n        );\n        store.dispatch(updateActiveLabelId(line.id));\n        break;\n      case LabelType.RECT:\n        const rect = LabelsSelector.getActiveRectLabel();\n        newImageData.labelRects = imageData.labelRects.map(\n          (labelRectangle: LabelRect) => {\n            if (labelRectangle.id === rect.id) {\n              return {\n                ...labelRectangle,\n                labelId: labelNames[labelIndex].id,\n                status: LabelStatus.ACCEPTED,\n              };\n            }\n            return labelRectangle;\n          }\n        );\n        store.dispatch(updateActiveLabelId(rect.id));\n        break;\n      case LabelType.POLYGON:\n        const polygon = LabelsSelector.getActivePolygonLabel();\n        newImageData.labelPolygons = imageData.labelPolygons.map(\n          (labelPolygon: LabelPolygon) => {\n            if (labelPolygon.id === polygon.id) {\n              return {\n                ...labelPolygon,\n                labelId: labelNames[labelIndex].id,\n                status: LabelStatus.ACCEPTED,\n              };\n            }\n            return labelPolygon;\n          }\n        );\n        store.dispatch(updateActiveLabelId(polygon.id));\n        break;\n      case LabelType.IMAGE_RECOGNITION:\n        const labelId: string = labelNames[labelIndex].id;\n        if (imageData.labelNameIds.includes(labelId)) {\n          newImageData.labelNameIds = remove(\n            imageData.labelNameIds,\n            (element: string) => element !== labelId\n          );\n        } else {\n          newImageData.labelNameIds = imageData.labelNameIds.concat(labelId);\n        }\n        break;\n    }\n\n    return newImageData;\n  }\n}\n","import {MobileDeviceData} from \"../data/MobileDeviceData\";\nimport MobileDetect from 'mobile-detect'\n\nexport class PlatformUtil {\n    public static getMobileDeviceData(userAgent: string): MobileDeviceData {\n        const mobileDetect = new MobileDetect(userAgent);\n        return {\n            manufacturer: mobileDetect.mobile(),\n            browser: mobileDetect.userAgent(),\n            os: mobileDetect.os()\n        }\n    }\n\n    public static isMac(userAgent: string): boolean {\n        return !!userAgent.toLowerCase().match(\"mac\");\n    }\n\n    public static isSafari(userAgent: string): boolean {\n        return !!userAgent.toLowerCase().match(\"safari\");\n    }\n\n    public static isFirefox(userAgent: string): boolean {\n        return !!userAgent.toLowerCase().match(\"firefox\");\n    }\n}","import {LabelsSelector} from '../../store/selectors/LabelsSelector';\nimport {ImageData, LabelLine, LabelName, LabelPoint, LabelPolygon, LabelRect} from '../../store/labels/types';\nimport {filter} from 'lodash';\nimport {store} from '../../index';\nimport {updateImageData, updateImageDataById} from '../../store/labels/actionCreators';\nimport {LabelType} from '../../data/enums/LabelType';\n\nexport class LabelActions {\n    public static deleteActiveLabel() {\n        const activeImageData: ImageData = LabelsSelector.getActiveImageData();\n        const activeLabelId: string = LabelsSelector.getActiveLabelId();\n        LabelActions.deleteImageLabelById(activeImageData.id, activeLabelId);\n    }\n\n    public static deleteImageLabelById(imageId: string, labelId: string) {\n        switch (LabelsSelector.getActiveLabelType()) {\n            case LabelType.POINT:\n                LabelActions.deletePointLabelById(imageId, labelId);\n                break;\n            case LabelType.RECT:\n                LabelActions.deleteRectLabelById(imageId, labelId);\n                break;\n            case LabelType.POLYGON:\n                LabelActions.deletePolygonLabelById(imageId, labelId);\n                break;\n        }\n    }\n\n    public static deleteRectLabelById(imageId: string, labelRectId: string) {\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\n        const newImageData = {\n            ...imageData,\n            labelRects: filter(imageData.labelRects, (currentLabel: LabelRect) => {\n                return currentLabel.id !== labelRectId;\n            })\n        };\n        store.dispatch(updateImageDataById(imageData.id, newImageData));\n    }\n\n    public static deletePointLabelById(imageId: string, labelPointId: string) {\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\n        const newImageData = {\n            ...imageData,\n            labelPoints: filter(imageData.labelPoints, (currentLabel: LabelPoint) => {\n                return currentLabel.id !== labelPointId;\n            })\n        };\n        store.dispatch(updateImageDataById(imageData.id, newImageData));\n    }\n\n    public static deleteLineLabelById(imageId: string, labelLineId: string) {\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\n        const newImageData = {\n            ...imageData,\n            labelLines: filter(imageData.labelLines, (currentLabel: LabelLine) => {\n                return currentLabel.id !== labelLineId;\n            })\n        };\n        store.dispatch(updateImageDataById(imageData.id, newImageData));\n    }\n\n    public static deletePolygonLabelById(imageId: string, labelPolygonId: string) {\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\n        const newImageData = {\n            ...imageData,\n            labelPolygons: filter(imageData.labelPolygons, (currentLabel: LabelPolygon) => {\n                return currentLabel.id !== labelPolygonId;\n            })\n        };\n        store.dispatch(updateImageDataById(imageData.id, newImageData));\n    }\n\n    public static removeLabelNames(labelNamesIds: string[]) {\n        const imagesData: ImageData[] = LabelsSelector.getImagesData();\n        const newImagesData: ImageData[] = imagesData.map((imageData: ImageData) => {\n            return LabelActions.removeLabelNamesFromImageData(imageData, labelNamesIds);\n        });\n        store.dispatch(updateImageData(newImagesData))\n    }\n\n    private static removeLabelNamesFromImageData(imageData: ImageData, labelNamesIds: string[]): ImageData {\n        return {\n            ...imageData,\n            labelRects: imageData.labelRects.map((labelRect: LabelRect) => {\n                if (labelNamesIds.includes(labelRect.id)) {\n                    return {\n                        ...labelRect,\n                        id: null\n                    }\n                } else {\n                    return labelRect\n                }\n            }),\n            labelPoints: imageData.labelPoints.map((labelPoint: LabelPoint) => {\n                if (labelNamesIds.includes(labelPoint.id)) {\n                    return {\n                        ...labelPoint,\n                        id: null\n                    }\n                } else {\n                    return labelPoint\n                }\n            }),\n            labelPolygons: imageData.labelPolygons.map((labelPolygon: LabelPolygon) => {\n                if (labelNamesIds.includes(labelPolygon.id)) {\n                    return {\n                        ...labelPolygon,\n                        id: null\n                    }\n                } else {\n                    return labelPolygon\n                }\n            }),\n            labelNameIds: imageData.labelNameIds.filter((labelNameId: string) => {\n                return !labelNamesIds.includes(labelNameId)\n            })\n        }\n    }\n\n    public static labelExistsInLabelNames(label: string): boolean {\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\n        return labelNames\n            .map((labelName: LabelName) => labelName.name)\n            .includes(label)\n    }\n}\n","import {HotKeyAction} from \"../../data/HotKeyAction\";\nimport {EditorModel} from \"../../staticModels/EditorModel\";\nimport {LabelType} from \"../../data/enums/LabelType\";\nimport {EditorData} from \"../../data/EditorData\";\nimport {EditorActions} from \"../actions/EditorActions\";\nimport {PolygonRenderEngine} from \"../render/PolygonRenderEngine\";\nimport {BaseContext} from \"./BaseContext\";\nimport {ImageActions} from \"../actions/ImageActions\";\nimport {ViewPortActions} from \"../actions/ViewPortActions\";\nimport {Direction} from \"../../data/enums/Direction\";\nimport {PlatformUtil} from \"../../utils/PlatformUtil\";\nimport {LabelActions} from \"../actions/LabelActions\";\nimport {LineRenderEngine} from \"../render/LineRenderEngine\";\n\nexport class EditorContext extends BaseContext {\n    public static actions: HotKeyAction[] = [\n        {\n            keyCombo: [\"Enter\"],\n            action: (event: KeyboardEvent) => {\n                if (EditorModel.supportRenderingEngine && EditorModel.supportRenderingEngine.labelType === LabelType.POLYGON) {\n                    const editorData: EditorData = EditorActions.getEditorData();\n                    (EditorModel.supportRenderingEngine as PolygonRenderEngine).addLabelAndFinishCreation(editorData);\n                }\n                EditorActions.fullRender();\n            }\n        },\n        {\n            keyCombo: [\"Escape\"],\n            action: (event: KeyboardEvent) => {\n                if (EditorModel.supportRenderingEngine) {\n                    switch (EditorModel.supportRenderingEngine.labelType) {\n                        case LabelType.POLYGON:\n                            (EditorModel.supportRenderingEngine as PolygonRenderEngine).cancelLabelCreation();\n                            break;\n                        case LabelType.LINE:\n                            (EditorModel.supportRenderingEngine as LineRenderEngine).cancelLabelCreation();\n                            break;\n                    }\n                }\n                EditorActions.fullRender();\n            }\n        },\n        {\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"ArrowLeft\"] : [\"Control\", \"ArrowLeft\"],\n            action: (event: KeyboardEvent) => {\n                ImageActions.getPreviousImage()\n            }\n        },\n        {\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"ArrowRight\"] : [\"Control\", \"ArrowRight\"],\n            action: (event: KeyboardEvent) => {\n                ImageActions.getNextImage();\n            }\n        },\n        {\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"+\"] : [\"Control\", \"+\"],\n            action: (event: KeyboardEvent) => {\n                ViewPortActions.zoomIn();\n            }\n        },\n        {\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"-\"] : [\"Control\", \"-\"],\n            action: (event: KeyboardEvent) => {\n                ViewPortActions.zoomOut();\n            }\n        },\n        {\n            keyCombo: [\"ArrowRight\"],\n            action: (event: KeyboardEvent) => {\n                event.preventDefault();\n                ViewPortActions.translateViewPortPosition(Direction.RIGHT);\n            }\n        },\n        {\n            keyCombo: [\"ArrowLeft\"],\n            action: (event: KeyboardEvent) => {\n                event.preventDefault();\n                ViewPortActions.translateViewPortPosition(Direction.LEFT);\n            }\n        },\n        {\n            keyCombo: [\"ArrowUp\"],\n            action: (event: KeyboardEvent) => {\n                event.preventDefault();\n                ViewPortActions.translateViewPortPosition(Direction.BOTTOM);\n            }\n        },\n        {\n            keyCombo: [\"ArrowDown\"],\n            action: (event: KeyboardEvent) => {\n                event.preventDefault();\n                ViewPortActions.translateViewPortPosition(Direction.TOP);\n            }\n        },\n        {\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Backspace\"] : [\"Delete\"],\n            action: (event: KeyboardEvent) => {\n                LabelActions.deleteActiveLabel();\n            }\n        },\n        {\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"0\"] : [\"Control\", \"0\"],\n            action: (event: KeyboardEvent) => {\n                ImageActions.setActiveLabelOnActiveImage(0);\n                EditorActions.fullRender();\n            }\n        },\n        {\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"1\"] : [\"Control\", \"1\"],\n            action: (event: KeyboardEvent) => {\n                ImageActions.setActiveLabelOnActiveImage(1);\n                EditorActions.fullRender();\n            }\n        },\n        {\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"2\"] : [\"Control\", \"2\"],\n            action: (event: KeyboardEvent) => {\n                ImageActions.setActiveLabelOnActiveImage(2);\n                EditorActions.fullRender();\n            }\n        },\n        {\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"3\"] : [\"Control\", \"3\"],\n            action: (event: KeyboardEvent) => {\n                ImageActions.setActiveLabelOnActiveImage(3);\n                EditorActions.fullRender();\n            }\n        },\n        {\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"4\"] : [\"Control\", \"4\"],\n            action: (event: KeyboardEvent) => {\n                ImageActions.setActiveLabelOnActiveImage(4);\n                EditorActions.fullRender();\n            }\n        },\n        {\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"5\"] : [\"Control\", \"5\"],\n            action: (event: KeyboardEvent) => {\n                ImageActions.setActiveLabelOnActiveImage(5);\n                EditorActions.fullRender();\n            }\n        },\n        {\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"6\"] : [\"Control\", \"6\"],\n            action: (event: KeyboardEvent) => {\n                ImageActions.setActiveLabelOnActiveImage(6);\n                EditorActions.fullRender();\n            }\n        },\n        {\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"7\"] : [\"Control\", \"7\"],\n            action: (event: KeyboardEvent) => {\n                ImageActions.setActiveLabelOnActiveImage(7);\n                EditorActions.fullRender();\n            }\n        },\n        {\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"8\"] : [\"Control\", \"8\"],\n            action: (event: KeyboardEvent) => {\n                ImageActions.setActiveLabelOnActiveImage(8);\n                EditorActions.fullRender();\n            }\n        },\n        {\n            keyCombo: PlatformUtil.isMac(window.navigator.userAgent) ? [\"Alt\", \"9\"] : [\"Control\", \"9\"],\n            action: (event: KeyboardEvent) => {\n                ImageActions.setActiveLabelOnActiveImage(9);\n                EditorActions.fullRender();\n            }\n        }\n    ];\n}","import {ContextManager} from \"../context/ContextManager\";\nimport {store} from \"../../index\";\nimport {updateActivePopupType} from \"../../store/general/actionCreators\";\n\nexport class PopupActions {\n    public static close() {\n        store.dispatch(updateActivePopupType(null));\n        ContextManager.restoreCtx();\n    }\n}","import {HotKeyAction} from \"../../data/HotKeyAction\";\nimport {PopupWindowType} from \"../../data/enums/PopupWindowType\";\nimport {GeneralSelector} from \"../../store/selectors/GeneralSelector\";\nimport {BaseContext} from \"./BaseContext\";\nimport {PopupActions} from \"../actions/PopupActions\";\nimport {Settings} from \"../../settings/Settings\";\n\nexport class PopupContext extends BaseContext {\n    public static actions: HotKeyAction[] = [\n        {\n            keyCombo: [\"Escape\"],\n            action: (event: KeyboardEvent) => {\n                const popupType: PopupWindowType = GeneralSelector.getActivePopupType();\n                const canBeClosed: boolean = Settings.CLOSEABLE_POPUPS.includes(popupType);\n                if (canBeClosed) {\n                    PopupActions.close();\n                }\n            }\n        }\n    ];\n}","import {ContextType} from \"../../data/enums/ContextType\";\nimport {HotKeyAction} from \"../../data/HotKeyAction\";\nimport {store} from \"../../index\";\nimport {updateActiveContext} from \"../../store/general/actionCreators\";\nimport {xor, isEmpty} from \"lodash\";\nimport {EditorContext} from \"./EditorContext\";\nimport {PopupContext} from \"./PopupContext\";\nimport {GeneralSelector} from \"../../store/selectors/GeneralSelector\";\nimport {EventType} from \"../../data/enums/EventType\";\n\nexport class ContextManager {\n    private static activeCombo: string[] = [];\n    private static actions: HotKeyAction[] = [];\n    private static contextHistory: ContextType[] = [];\n\n    public static getActiveCombo(): string[] {\n        return ContextManager.activeCombo;\n    }\n\n    public static init(): void {\n        window.addEventListener(EventType.KEY_DOWN, ContextManager.onDown);\n        window.addEventListener(EventType.KEY_UP, ContextManager.onUp);\n        window.addEventListener(EventType.FOCUS, ContextManager.onFocus);\n    }\n\n    public static switchCtx(context: ContextType): void {\n        const activeCtx: ContextType = GeneralSelector.getActiveContext();\n\n        if (activeCtx !== context) {\n            ContextManager.contextHistory.push(activeCtx);\n            ContextManager.updateCtx(context);\n        }\n    }\n\n    private static updateCtx(context: ContextType): void {\n        store.dispatch(updateActiveContext(context));\n        switch (context) {\n            case ContextType.EDITOR:\n                ContextManager.actions = EditorContext.getActions();\n                break;\n            case ContextType.POPUP:\n                ContextManager.actions = PopupContext.getActions();\n                break;\n            default:\n                ContextManager.actions = [];\n        }\n    }\n\n    public static restoreCtx(): void {\n        ContextManager.updateCtx(ContextManager.contextHistory.pop());\n    }\n\n    private static onDown(event: KeyboardEvent): void {\n        const keyCode: string = ContextManager.getKeyCodeFromEvent(event);\n        if (!ContextManager.isInCombo(keyCode)) {\n            ContextManager.addToCombo(keyCode);\n        }\n        ContextManager.execute(event);\n    }\n\n    private static onUp(event: KeyboardEvent): void {\n        const keyCode: string = ContextManager.getKeyCodeFromEvent(event);\n        ContextManager.removeFromCombo(keyCode);\n    }\n\n    public static onFocus() {\n        ContextManager.activeCombo = [];\n    }\n\n    private static execute(event: KeyboardEvent): void {\n        for (let i = 0; i < ContextManager.actions.length; i++) {\n            const hotKey: HotKeyAction = ContextManager.actions[i];\n            if (ContextManager.matchCombo(ContextManager.activeCombo, hotKey.keyCombo)) {\n                hotKey.action(event);\n            }\n        }\n    }\n\n    private static isInCombo(keyCode: string): boolean {\n        return ContextManager.activeCombo.indexOf(keyCode) >= 0;\n    }\n\n    private static addToCombo(keyCode: string): void {\n        ContextManager.activeCombo.push(keyCode);\n    }\n\n    private static removeFromCombo(keyCode: string): void {\n        const index: number = ContextManager.activeCombo.indexOf(keyCode);\n        if (index >= 0) {\n            ContextManager.activeCombo.splice(index, 1);\n        }\n    }\n\n    private static getKeyCodeFromEvent(event: KeyboardEvent): string {\n        return event.key;\n    }\n\n    private static matchCombo(combo1: string[], combo2: string[]): boolean {\n        return isEmpty(xor(combo1, combo2))\n    }\n}","import React from 'react';\nimport {connect} from \"react-redux\";\nimport {LabelType} from \"../../../../data/enums/LabelType\";\nimport {ISize} from \"../../../../interfaces/ISize\";\nimport {AppState} from \"../../../../store\";\nimport {ImageData, LabelPoint, LabelRect} from \"../../../../store/labels/types\";\nimport {VirtualList} from \"../../../Common/VirtualList/VirtualList\";\nimport ImagePreview from \"../ImagePreview/ImagePreview\";\nimport './ImagesList.scss';\nimport {ContextManager} from \"../../../../logic/context/ContextManager\";\nimport {ContextType} from \"../../../../data/enums/ContextType\";\nimport {ImageActions} from \"../../../../logic/actions/ImageActions\";\nimport {EventType} from \"../../../../data/enums/EventType\";\nimport {LabelStatus} from \"../../../../data/enums/LabelStatus\";\n\ninterface IProps {\n    activeImageIndex: number;\n    imagesData: ImageData[];\n    activeLabelType: LabelType;\n}\n\ninterface IState {\n    size: ISize;\n}\n\nclass ImagesList extends React.Component<IProps, IState> {\n    private imagesListRef: HTMLDivElement;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            size: null,\n        }\n    }\n\n    public componentDidMount(): void {\n        this.updateListSize();\n        window.addEventListener(EventType.RESIZE, this.updateListSize);\n    }\n\n    public componentWillUnmount(): void {\n        window.removeEventListener(EventType.RESIZE, this.updateListSize);\n    }\n\n    private updateListSize = () => {\n        if (!this.imagesListRef)\n            return;\n\n        const listBoundingBox = this.imagesListRef.getBoundingClientRect();\n        this.setState({\n            size: {\n                width: listBoundingBox.width,\n                height: listBoundingBox.height\n            }\n        })\n    };\n\n    private isImageChecked = (index:number): boolean => {\n        const imageData = this.props.imagesData[index]\n        switch (this.props.activeLabelType) {\n            case LabelType.LINE:\n                return imageData.labelLines.length > 0\n            case LabelType.IMAGE_RECOGNITION:\n                return imageData.labelNameIds.length > 0\n            case LabelType.POINT:\n                return imageData.labelPoints\n                    .filter((labelPoint: LabelPoint) => labelPoint.status === LabelStatus.ACCEPTED)\n                    .length > 0\n            case LabelType.POLYGON:\n                return imageData.labelPolygons.length > 0\n            case LabelType.RECT:\n                return imageData.labelRects\n                    .filter((labelRect: LabelRect) => labelRect.status === LabelStatus.ACCEPTED)\n                    .length > 0\n        }\n    };\n\n    private onClickHandler = (index: number) => {\n        ImageActions.getImageByIndex(index)\n    };\n\n    private renderImagePreview = (index: number, isScrolling: boolean, isVisible: boolean, style: React.CSSProperties) => {\n        return <ImagePreview\n            key={index}\n            style={style}\n            size={{width: 150, height: 150}}\n            isScrolling={isScrolling}\n            isChecked={this.isImageChecked(index)}\n            imageData={this.props.imagesData[index]}\n            onClick={() => this.onClickHandler(index)}\n            isSelected={this.props.activeImageIndex === index}\n        />\n    };\n\n    public render() {\n        const { size } = this.state;\n        return(\n            <div\n                className=\"ImagesList\"\n                ref={ref => this.imagesListRef = ref}\n                onClick={() => ContextManager.switchCtx(ContextType.LEFT_NAVBAR)}\n            >\n                {!!size && <VirtualList\n                    size={size}\n                    childSize={{width: 150, height: 150}}\n                    childCount={this.props.imagesData.length}\n                    childRender={this.renderImagePreview}\n                    overScanHeight={200}\n                />}\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = {};\n\nconst mapStateToProps = (state: AppState) => ({\n    activeImageIndex: state.labels.activeImageIndex,\n    imagesData: state.labels.imagesData,\n    activeLabelType: state.labels.activeLabelType\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ImagesList);","import {LabelType} from '../enums/LabelType';\nimport {ProjectType} from '../enums/ProjectType';\n\nexport interface ILabelToolkit {\n    labelType: LabelType;\n    headerText: string;\n    imageSrc: string;\n    imageAlt: string;\n    projectType: ProjectType;\n}\n\nexport const LabelToolkitData: ILabelToolkit[] = [\n    {\n        labelType: LabelType.IMAGE_RECOGNITION,\n        headerText: 'Image recognition',\n        imageSrc: '/ico/object.png',\n        imageAlt: 'object',\n        projectType: ProjectType.IMAGE_RECOGNITION,\n    },\n    {\n        labelType: LabelType.RECT,\n        headerText: 'Rect',\n        imageSrc: '/ico/rectangle.png',\n        imageAlt: 'rectangle',\n        projectType: ProjectType.OBJECT_DETECTION,\n    },\n    {\n        labelType: LabelType.POINT,\n        headerText: 'Point',\n        imageSrc: '/ico/point.png',\n        imageAlt: 'point',\n        projectType: ProjectType.OBJECT_DETECTION,\n    },\n    {\n        labelType: LabelType.LINE,\n        headerText: 'Line',\n        imageSrc: '/ico/line.png',\n        imageAlt: 'line',\n        projectType: ProjectType.OBJECT_DETECTION,\n    },\n    {\n        labelType: LabelType.POLYGON,\n        headerText: 'Polygon',\n        imageSrc: '/ico/polygon.png',\n        imageAlt: 'polygon',\n        projectType: ProjectType.OBJECT_DETECTION,\n    },\n];","import * as React from 'react';\nimport {ISize} from \"../../../interfaces/ISize\";\nimport './ImageButton.scss';\nimport classNames from \"classnames\";\nimport {LegacyRef} from \"react\";\n\nexport interface ImageButtonProps extends React.HTMLProps<HTMLDivElement> {\n    buttonSize:ISize,\n    padding?:number;\n    image:string,\n    imageAlt:string,\n    href?:string\n    onClick?:() => any;\n    style?:React.CSSProperties\n    isActive?:boolean;\n    isDisabled?:boolean;\n    externalClassName?:string;\n}\n\nexport const ImageButton = React.forwardRef((props: ImageButtonProps, ref: LegacyRef<HTMLDivElement>) => {\n    const {buttonSize, padding, image, imageAlt, href, onClick, style, isActive, isDisabled, externalClassName} = props;\n    const imagePadding:number = !!padding ? padding : 10;\n\n    const onClickHandler = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        event.stopPropagation();\n        !!onClick && onClick();\n    };\n\n    const buttonStyle:React.CSSProperties = {\n        ...style,\n        width: buttonSize.width,\n        height: buttonSize.height\n    };\n\n    const imageStyle:React.CSSProperties = {\n        maxWidth: buttonSize.width - imagePadding,\n        maxHeight: buttonSize.height - imagePadding\n    };\n\n    const getClassName = () => {\n        return classNames(\n            \"ImageButton\",\n            externalClassName,\n            {\n                \"active\": isActive,\n                \"disabled\": isDisabled,\n            }\n        );\n    };\n    \n    return(\n        <div\n            className={getClassName()}\n            style={buttonStyle}\n            onClick={onClickHandler}\n            ref={ref}\n        >\n            {!!href && <a href={href} style={imageStyle} target=\"_blank\" rel=\"noopener noreferrer\">\n                <img\n                    draggable={false}\n                    alt={imageAlt}\n                    src={image}\n                    style={imageStyle}\n                />\n            </a>}\n            {!href && <img\n                draggable={false}\n                alt={imageAlt}\n                src={image}\n                style={imageStyle}\n            />}\n        </div>\n    );\n});\n","import React from 'react';\nimport {ISize} from \"../../../../interfaces/ISize\";\nimport './LabelInputField.scss';\nimport classNames from \"classnames\";\nimport {ImageButton} from \"../../../Common/ImageButton/ImageButton\";\nimport {IRect} from \"../../../../interfaces/IRect\";\nimport {IPoint} from \"../../../../interfaces/IPoint\";\nimport {RectUtil} from \"../../../../utils/RectUtil\";\nimport {AppState} from \"../../../../store\";\nimport {connect} from \"react-redux\";\nimport {updateActiveLabelId, updateHighlightedLabelId} from \"../../../../store/labels/actionCreators\";\nimport Scrollbars from 'react-custom-scrollbars';\nimport {EventType} from \"../../../../data/enums/EventType\";\nimport {LabelName} from \"../../../../store/labels/types\";\nimport {LabelsSelector} from \"../../../../store/selectors/LabelsSelector\";\nimport {PopupWindowType} from \"../../../../data/enums/PopupWindowType\";\nimport {updateActivePopupType} from \"../../../../store/general/actionCreators\";\n\ninterface IProps {\n    size: ISize;\n    isActive: boolean;\n    isHighlighted: boolean;\n    id: string;\n    value: LabelName;\n    options: LabelName[];\n    onDelete: (id: string) => any;\n    onSelectLabel: (labelRectId: string, labelNameId: string) => any;\n    updateHighlightedLabelId: (highlightedLabelId: string) => any;\n    updateActiveLabelId: (highlightedLabelId: string) => any;\n    updateActivePopupType: (activePopupType: PopupWindowType) => any;\n}\n\ninterface IState {\n    animate: boolean;\n    isOpen: boolean;\n}\n\nclass LabelInputField extends React.Component<IProps, IState> {\n    private dropdownOptionHeight: number = 30;\n    private dropdownOptionCount: number = 6;\n    private dropdownMargin: number = 4;\n    private dropdownLabel: HTMLDivElement;\n    private dropdown: HTMLDivElement;\n\n    public constructor(props) {\n        super(props);\n        this.state = {\n            animate: false,\n            isOpen: false\n        }\n    }\n\n    public componentDidMount(): void {\n        requestAnimationFrame(() => {\n            this.setState({ animate: true });\n        });\n    }\n\n    private getClassName() {\n        return classNames(\n            \"LabelInputField\",\n            {\n                \"loaded\": this.state.animate,\n                \"active\": this.props.isActive,\n                \"highlighted\": this.props.isHighlighted\n            }\n        );\n    }\n\n    private openDropdown = () => {\n        if (LabelsSelector.getLabelNames().length === 0) {\n            this.props.updateActivePopupType(PopupWindowType.UPDATE_LABEL);\n        } else {\n            this.setState({isOpen: true});\n            window.addEventListener(EventType.MOUSE_DOWN, this.closeDropdown);\n        }\n    };\n\n    private closeDropdown = (event: MouseEvent) => {\n        const mousePosition: IPoint = {x: event.clientX, y: event.clientY};\n        const clientRect = this.dropdown.getBoundingClientRect();\n        const dropDownRect: IRect = {\n            x: clientRect.left,\n            y: clientRect.top,\n            width: clientRect.width,\n            height: clientRect.height\n        };\n\n        if (!RectUtil.isPointInside(dropDownRect, mousePosition)) {\n            this.setState({isOpen: false});\n            window.removeEventListener(EventType.MOUSE_DOWN, this.closeDropdown)\n        }\n    };\n\n    private getDropdownStyle = ():React.CSSProperties => {\n        const clientRect = this.dropdownLabel.getBoundingClientRect();\n        const height: number = Math.min(this.props.options.length, this.dropdownOptionCount) * this.dropdownOptionHeight;\n        const style = {\n            width: clientRect.width,\n            height: height,\n            left: clientRect.left\n        };\n\n        if (window.innerHeight * 2/3 < clientRect.top)\n            return Object.assign(style, {top: clientRect.top - this.dropdownMargin - height});\n        else\n            return Object.assign(style, {top: clientRect.bottom + this.dropdownMargin});\n    };\n\n    private getDropdownOptions = () => {\n        const onClick = (id: string, event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n            this.setState({isOpen: false});\n            window.removeEventListener(EventType.MOUSE_DOWN, this.closeDropdown);\n            this.props.onSelectLabel(this.props.id, id);\n            this.props.updateHighlightedLabelId(null);\n            this.props.updateActiveLabelId(this.props.id);\n            event.stopPropagation();\n        };\n\n        return this.props.options.map((option: LabelName) => {\n            return <div\n                className=\"DropdownOption\"\n                key={option.id}\n                style={{height: this.dropdownOptionHeight}}\n                onClick={(event) => onClick(option.id, event)}\n            >\n                {option.name}\n            </div>\n        })\n    };\n\n    private mouseEnterHandler = () => {\n        this.props.updateHighlightedLabelId(this.props.id);\n    };\n\n    private mouseLeaveHandler =() => {\n        this.props.updateHighlightedLabelId(null);\n    };\n\n    private onClickHandler = () => {\n        this.props.updateActiveLabelId(this.props.id);\n    };\n\n    public render() {\n        const {size, id, value, onDelete} = this.props;\n        return(\n            <div\n                className={this.getClassName()}\n                style={{\n                    width: size.width,\n                    height: size.height,\n                }}\n                key={id}\n                onMouseEnter={this.mouseEnterHandler}\n                onMouseLeave={this.mouseLeaveHandler}\n                onClick={this.onClickHandler}\n            >\n                <div\n                    className=\"LabelInputFieldWrapper\"\n                    style={{\n                        width: size.width,\n                        height: size.height,\n                    }}\n                >\n                    <div className=\"Marker\"/>\n                    <div className=\"Content\">\n                        <div className=\"ContentWrapper\">\n                            <div className=\"DropdownLabel\"\n                                 ref={ref => this.dropdownLabel = ref}\n                                 onClick={this.openDropdown}\n                            >\n                                {value ? value.name : \"Select label\"}\n                            </div>\n                            {this.state.isOpen && <div\n                                className=\"Dropdown\"\n                                style={this.getDropdownStyle()}\n                                ref={ref => this.dropdown = ref}\n                            >\n                                <Scrollbars\n                                    renderTrackHorizontal={props => <div {...props} className=\"track-horizontal\"/>}\n                                >\n                                    <div>\n                                        {this.getDropdownOptions()}\n                                    </div>\n                                </Scrollbars>\n\n                            </div>}\n                        </div>\n                        <div className=\"ContentWrapper\">\n                            <ImageButton\n                                externalClassName={\"trash\"}\n                                image={\"/ico/trash.png\"}\n                                imageAlt={\"remove_rect\"}\n                                buttonSize={{width: 30, height: 30}}\n                                onClick={() => onDelete(id)}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = {\n    updateHighlightedLabelId,\n    updateActiveLabelId,\n    updateActivePopupType\n};\n\nconst mapStateToProps = (state: AppState) => ({});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LabelInputField);","import React from 'react';\nimport './EmptyLabelList.scss';\nimport {AppState} from \"../../../../store\";\nimport {connect} from \"react-redux\";\n\ninterface IProps {\n    firstLabelCreatedFlag: boolean;\n    labelBefore: string;\n    labelAfter: string;\n}\n\nconst EmptyLabelList: React.FC<IProps> = ({firstLabelCreatedFlag, labelBefore, labelAfter}) => {\n    const before = <>\n        <img\n            draggable={false}\n            alt={\"lets_start\"}\n            src={\"/ico/rocket.png\"}\n        />\n        <p className=\"extraBold\">{labelBefore}</p>\n    </>;\n\n    const after = <>\n        <img\n            draggable={false}\n            alt={\"no_labels\"}\n            src={\"/ico/box-opened.png\"}\n        />\n        <p className=\"extraBold\">{labelAfter}</p>\n    </>;\n\n    return(<div className=\"EmptyLabelList\">\n        {!firstLabelCreatedFlag ? before : after}\n    </div>)\n};\n\nconst mapDispatchToProps = {};\n\nconst mapStateToProps = (state: AppState) => ({\n    firstLabelCreatedFlag: state.labels.firstLabelCreatedFlag\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(EmptyLabelList);","import React from 'react';\nimport {ISize} from \"../../../../interfaces/ISize\";\nimport Scrollbars from 'react-custom-scrollbars';\nimport {ImageData, LabelName, LabelRect} from \"../../../../store/labels/types\";\nimport './RectLabelsList.scss';\nimport {\n    updateActiveLabelId,\n    updateActiveLabelNameId,\n    updateImageDataById\n} from \"../../../../store/labels/actionCreators\";\nimport {AppState} from \"../../../../store\";\nimport {connect} from \"react-redux\";\nimport LabelInputField from \"../LabelInputField/LabelInputField\";\nimport EmptyLabelList from \"../EmptyLabelList/EmptyLabelList\";\nimport {LabelActions} from \"../../../../logic/actions/LabelActions\";\nimport {LabelStatus} from \"../../../../data/enums/LabelStatus\";\nimport {findLast} from \"lodash\";\n\ninterface IProps {\n    size: ISize;\n    imageData: ImageData;\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\n    activeLabelId: string;\n    highlightedLabelId: string;\n    updateActiveLabelNameId: (activeLabelId: string) => any;\n    labelNames: LabelName[];\n    updateActiveLabelId: (activeLabelId: string) => any;\n}\n\nconst RectLabelsList: React.FC<IProps> = ({size, imageData, updateImageDataById, labelNames, updateActiveLabelNameId, activeLabelId, highlightedLabelId, updateActiveLabelId}) => {\n    const labelInputFieldHeight = 40;\n    const listStyle: React.CSSProperties = {\n        width: size.width,\n        height: size.height\n    };\n    const listStyleContent: React.CSSProperties = {\n        width: size.width,\n        height: imageData.labelRects.length * labelInputFieldHeight\n    };\n\n    const deleteRectLabelById = (labelRectId: string) => {\n        LabelActions.deleteRectLabelById(imageData.id, labelRectId);\n    };\n\n    const updateRectLabel = (labelRectId: string, labelNameId: string) => {\n        const newImageData = {\n            ...imageData,\n            labelRects: imageData.labelRects\n                .map((labelRect: LabelRect) => {\n                if (labelRect.id === labelRectId) {\n                    return {\n                        ...labelRect,\n                        labelId: labelNameId,\n                        status: LabelStatus.ACCEPTED\n                    }\n                } else {\n                    return labelRect\n                }\n            })\n        };\n        updateImageDataById(imageData.id, newImageData);\n        updateActiveLabelNameId(labelNameId);\n    };\n\n    const onClickHandler = () => {\n        updateActiveLabelId(null);\n    };\n\n    const getChildren = () => {\n        return imageData.labelRects\n            .filter((labelRect: LabelRect) => labelRect.status === LabelStatus.ACCEPTED)\n            .map((labelRect: LabelRect) => {\n            return <LabelInputField\n                size={{\n                    width: size.width,\n                    height: labelInputFieldHeight\n                }}\n                isActive={labelRect.id === activeLabelId}\n                isHighlighted={labelRect.id === highlightedLabelId}\n                id={labelRect.id}\n                key={labelRect.id}\n                onDelete={deleteRectLabelById}\n                value={labelRect.labelId !== null ? findLast(labelNames, {id: labelRect.labelId}) : null}\n                options={labelNames}\n                onSelectLabel={updateRectLabel}\n            />\n        });\n    };\n\n    return (\n        <div\n            className=\"RectLabelsList\"\n            style={listStyle}\n            onClickCapture={onClickHandler}\n        >\n            {imageData.labelRects.filter((labelRect: LabelRect) => labelRect.status === LabelStatus.ACCEPTED).length === 0 ?\n                <EmptyLabelList\n                    labelBefore={\"draw your first bounding box\"}\n                    labelAfter={\"no labels created for this image yet\"}\n                /> :\n                <Scrollbars>\n                    <div\n                        className=\"RectLabelsListContent\"\n                        style={listStyleContent}\n                    >\n                        {getChildren()}\n                    </div>\n                </Scrollbars>\n            }\n        </div>\n    );\n};\n\nconst mapDispatchToProps = {\n    updateImageDataById,\n    updateActiveLabelNameId,\n    updateActiveLabelId\n};\n\nconst mapStateToProps = (state: AppState) => ({\n    activeLabelId: state.labels.activeLabelId,\n    highlightedLabelId: state.labels.highlightedLabelId,\n    labelNames : state.labels.labels\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(RectLabelsList);","import React from 'react';\nimport {ISize} from \"../../../../interfaces/ISize\";\nimport Scrollbars from 'react-custom-scrollbars';\nimport {ImageData, LabelName, LabelPoint} from \"../../../../store/labels/types\";\nimport './PointLabelsList.scss';\nimport {\n    updateActiveLabelId,\n    updateActiveLabelNameId,\n    updateImageDataById\n} from \"../../../../store/labels/actionCreators\";\nimport {AppState} from \"../../../../store\";\nimport {connect} from \"react-redux\";\nimport LabelInputField from \"../LabelInputField/LabelInputField\";\nimport EmptyLabelList from \"../EmptyLabelList/EmptyLabelList\";\nimport {LabelActions} from \"../../../../logic/actions/LabelActions\";\nimport {findLast} from \"lodash\";\nimport {LabelStatus} from \"../../../../data/enums/LabelStatus\";\n\ninterface IProps {\n    size: ISize;\n    imageData: ImageData;\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\n    activeLabelId: string;\n    highlightedLabelId: string;\n    updateActiveLabelNameId: (activeLabelId: string) => any;\n    labelNames: LabelName[];\n    updateActiveLabelId: (activeLabelId: string) => any;\n}\n\nconst PointLabelsList: React.FC<IProps> = (\n    {\n        size,\n        imageData,\n        updateImageDataById,\n        labelNames,\n        updateActiveLabelNameId,\n        activeLabelId,\n        highlightedLabelId,\n        updateActiveLabelId\n    }\n) => {\n    const labelInputFieldHeight = 40;\n    const listStyle: React.CSSProperties = {\n        width: size.width,\n        height: size.height\n    };\n    const listStyleContent: React.CSSProperties = {\n        width: size.width,\n        height: imageData.labelPoints.length * labelInputFieldHeight\n    };\n\n    const deletePointLabelById = (labelPointId: string) => {\n        LabelActions.deletePointLabelById(imageData.id, labelPointId);\n    };\n\n    const updatePointLabel = (labelPointId: string, labelNameId: string) => {\n        const newImageData = {\n            ...imageData,\n            labelPoints: imageData.labelPoints.map((labelPoint: LabelPoint) => {\n                if (labelPoint.id === labelPointId) {\n                    return {\n                        ...labelPoint,\n                        labelId: labelNameId\n                    }\n                }\n                return labelPoint\n            })\n        };\n        updateImageDataById(imageData.id, newImageData);\n        updateActiveLabelNameId(labelNameId);\n    };\n\n    const onClickHandler = () => {\n        updateActiveLabelId(null);\n    };\n\n    const getChildren = () => {\n        return imageData.labelPoints\n            .filter((labelPoint: LabelPoint) => labelPoint.status === LabelStatus.ACCEPTED)\n            .map((labelPoint: LabelPoint) => {\n            return <LabelInputField\n                size={{\n                    width: size.width,\n                    height: labelInputFieldHeight\n                }}\n                isActive={labelPoint.id === activeLabelId}\n                isHighlighted={labelPoint.id === highlightedLabelId}\n                id={labelPoint.id}\n                key={labelPoint.id}\n                onDelete={deletePointLabelById}\n                value={labelPoint.labelId !== null ? findLast(labelNames, {id: labelPoint.labelId}) : null}\n                options={labelNames}\n                onSelectLabel={updatePointLabel}\n            />\n        });\n    };\n\n    return (\n        <div\n            className=\"PointLabelsList\"\n            style={listStyle}\n            onClickCapture={onClickHandler}\n        >\n            {imageData.labelPoints.filter((labelPoint: LabelPoint) => labelPoint.status === LabelStatus.ACCEPTED).length === 0 ?\n                <EmptyLabelList\n                    labelBefore={\"mark your first point\"}\n                    labelAfter={\"no labels created for this image yet\"}\n                /> :\n                <Scrollbars>\n                    <div\n                        className=\"PointLabelsListContent\"\n                        style={listStyleContent}\n                    >\n                        {getChildren()}\n                    </div>\n                </Scrollbars>\n            }\n        </div>\n    );\n};\n\nconst mapDispatchToProps = {\n    updateImageDataById,\n    updateActiveLabelNameId,\n    updateActiveLabelId\n};\n\nconst mapStateToProps = (state: AppState) => ({\n    activeLabelId: state.labels.activeLabelId,\n    highlightedLabelId: state.labels.highlightedLabelId,\n    labelNames : state.labels.labels\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PointLabelsList);","import React from 'react';\nimport {ISize} from \"../../../../interfaces/ISize\";\nimport Scrollbars from 'react-custom-scrollbars';\nimport {ImageData, LabelName, LabelPolygon} from \"../../../../store/labels/types\";\nimport './PolygonLabelsList.scss';\nimport {\n    updateActiveLabelId,\n    updateActiveLabelNameId,\n    updateImageDataById\n} from \"../../../../store/labels/actionCreators\";\nimport {AppState} from \"../../../../store\";\nimport {connect} from \"react-redux\";\nimport LabelInputField from \"../LabelInputField/LabelInputField\";\nimport EmptyLabelList from \"../EmptyLabelList/EmptyLabelList\";\nimport {LabelActions} from \"../../../../logic/actions/LabelActions\";\nimport {findLast} from \"lodash\";\n\ninterface IProps {\n    size: ISize;\n    imageData: ImageData;\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\n    activeLabelId: string;\n    highlightedLabelId: string;\n    updateActiveLabelNameId: (activeLabelId: string) => any;\n    labelNames: LabelName[];\n    updateActiveLabelId: (activeLabelId: string) => any;\n}\n\nconst PolygonLabelsList: React.FC<IProps> = ({size, imageData, updateImageDataById, labelNames, updateActiveLabelNameId, activeLabelId, highlightedLabelId, updateActiveLabelId}) => {\n    const labelInputFieldHeight = 40;\n    const listStyle: React.CSSProperties = {\n        width: size.width,\n        height: size.height\n    };\n    const listStyleContent: React.CSSProperties = {\n        width: size.width,\n        height: imageData.labelPolygons.length * labelInputFieldHeight\n    };\n\n    const deletePolygonLabelById = (labelPolygonId: string) => {\n        LabelActions.deletePolygonLabelById(imageData.id, labelPolygonId);\n    };\n\n    const updatePolygonLabel = (labelPolygonId: string, labelNameId: string) => {\n        const newImageData = {\n            ...imageData,\n            labelPolygons: imageData.labelPolygons.map((currentLabel: LabelPolygon) => {\n                if (currentLabel.id === labelPolygonId) {\n                    return {\n                        ...currentLabel,\n                        labelId: labelNameId\n                    }\n                }\n                return currentLabel\n            })\n        };\n        updateImageDataById(imageData.id, newImageData);\n        updateActiveLabelNameId(labelNameId);\n    };\n\n    const onClickHandler = () => {\n        updateActiveLabelId(null);\n    };\n\n    const getChildren = () => {\n        return imageData.labelPolygons.map((labelPolygon: LabelPolygon) => {\n            return <LabelInputField\n                size={{\n                    width: size.width,\n                    height: labelInputFieldHeight\n                }}\n                isActive={labelPolygon.id === activeLabelId}\n                isHighlighted={labelPolygon.id === highlightedLabelId}\n                id={labelPolygon.id}\n                key={labelPolygon.id}\n                onDelete={deletePolygonLabelById}\n                value={labelPolygon.labelId !== null ? findLast(labelNames, {id: labelPolygon.labelId}) : null}\n                options={labelNames}\n                onSelectLabel={updatePolygonLabel}\n            />\n        });\n    };\n\n    return (\n        <div\n            className=\"PolygonLabelsList\"\n            style={listStyle}\n            onClickCapture={onClickHandler}\n        >\n            {imageData.labelPolygons.length === 0 ?\n                <EmptyLabelList\n                    labelBefore={\"draw your first polygon\"}\n                    labelAfter={\"no labels created for this image yet\"}\n                /> :\n                <Scrollbars>\n                    <div\n                        className=\"PolygonLabelsListContent\"\n                        style={listStyleContent}\n                    >\n                        {getChildren()}\n                    </div>\n                </Scrollbars>\n            }\n        </div>\n    );\n};\n\nconst mapDispatchToProps = {\n    updateImageDataById,\n    updateActiveLabelNameId,\n    updateActiveLabelId\n};\n\nconst mapStateToProps = (state: AppState) => ({\n    activeLabelId: state.labels.activeLabelId,\n    highlightedLabelId: state.labels.highlightedLabelId,\n    labelNames : state.labels.labels\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PolygonLabelsList);","import React from 'react';\nimport './LineLabelsList.scss';\nimport {ISize} from \"../../../../interfaces/ISize\";\nimport {ImageData, LabelLine, LabelName} from \"../../../../store/labels/types\";\nimport {LabelActions} from \"../../../../logic/actions/LabelActions\";\nimport LabelInputField from \"../LabelInputField/LabelInputField\";\nimport {findLast} from \"lodash\";\nimport EmptyLabelList from \"../EmptyLabelList/EmptyLabelList\";\nimport Scrollbars from \"react-custom-scrollbars\";\nimport {\n    updateActiveLabelId,\n    updateActiveLabelNameId,\n    updateImageDataById\n} from \"../../../../store/labels/actionCreators\";\nimport {AppState} from \"../../../../store\";\nimport {connect} from \"react-redux\";\n\ninterface IProps {\n    size: ISize;\n    imageData: ImageData;\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\n    activeLabelId: string;\n    highlightedLabelId: string;\n    updateActiveLabelNameId: (activeLabelId: string) => any;\n    labelNames: LabelName[];\n    updateActiveLabelId: (activeLabelId: string) => any;\n}\n\nconst LineLabelsList: React.FC<IProps> = (\n    {\n        size,\n        imageData,\n        updateImageDataById,\n        labelNames,\n        updateActiveLabelNameId,\n        activeLabelId,\n        highlightedLabelId,\n        updateActiveLabelId\n    }\n) => {\n    const labelInputFieldHeight = 40;\n    const listStyle: React.CSSProperties = {\n        width: size.width,\n        height: size.height\n    };\n    const listStyleContent: React.CSSProperties = {\n        width: size.width,\n        height: imageData.labelLines.length * labelInputFieldHeight\n    };\n\n    const deleteLineLabelById = (labelLineId: string) => {\n        LabelActions.deleteLineLabelById(imageData.id, labelLineId);\n    };\n\n    const updateLineLabel = (labelLineId: string, labelNameId: string) => {\n        const newImageData = {\n            ...imageData,\n            labelLines: imageData.labelLines.map((labelLine: LabelLine) => {\n                if (labelLine.id === labelLineId) {\n                    return {\n                        ...labelLine,\n                        labelId: labelNameId\n                    }\n                }\n                return labelLine\n            })\n        };\n        updateImageDataById(imageData.id, newImageData);\n        updateActiveLabelNameId(labelNameId);\n    };\n\n    const onClickHandler = () => {\n        updateActiveLabelId(null);\n    };\n\n    const getChildren = () => {\n        return imageData.labelLines\n            .map((labelLine: LabelLine) => {\n                return <LabelInputField\n                    size={{\n                        width: size.width,\n                        height: labelInputFieldHeight\n                    }}\n                    isActive={labelLine.id === activeLabelId}\n                    isHighlighted={labelLine.id === highlightedLabelId}\n                    id={labelLine.id}\n                    key={labelLine.id}\n                    onDelete={deleteLineLabelById}\n                    value={labelLine.labelId !== null ? findLast(labelNames, {id: labelLine.labelId}) : null}\n                    options={labelNames}\n                    onSelectLabel={updateLineLabel}\n                />\n            });\n    };\n\n    return (\n        <div\n            className=\"LineLabelsList\"\n            style={listStyle}\n            onClickCapture={onClickHandler}\n        >\n            {imageData.labelLines.length === 0 ?\n                <EmptyLabelList\n                    labelBefore={\"draw your first line\"}\n                    labelAfter={\"no labels created for this image yet\"}\n                /> :\n                <Scrollbars>\n                    <div\n                        className=\"LineLabelsListContent\"\n                        style={listStyleContent}\n                    >\n                        {getChildren()}\n                    </div>\n                </Scrollbars>\n            }\n        </div>\n    );\n};\n\nconst mapDispatchToProps = {\n    updateImageDataById,\n    updateActiveLabelNameId,\n    updateActiveLabelId\n};\n\nconst mapStateToProps = (state: AppState) => ({\n    activeLabelId: state.labels.activeLabelId,\n    highlightedLabelId: state.labels.highlightedLabelId,\n    labelNames : state.labels.labels\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LineLabelsList);","import {ISize} from \"../../../../interfaces/ISize\";\nimport {ImageData, LabelName} from \"../../../../store/labels/types\";\nimport React from \"react\";\nimport Scrollbars from \"react-custom-scrollbars\";\nimport {updateImageDataById} from \"../../../../store/labels/actionCreators\";\nimport {AppState} from \"../../../../store\";\nimport {connect} from \"react-redux\";\nimport {remove} from \"lodash\";\nimport './TagLabelsList.scss';\nimport classNames from \"classnames\";\nimport {ImageButton} from \"../../../Common/ImageButton/ImageButton\";\nimport {PopupWindowType} from \"../../../../data/enums/PopupWindowType\";\nimport {updateActivePopupType} from \"../../../../store/general/actionCreators\";\ninterface IProps {\n    size: ISize;\n    imageData: ImageData;\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\n    labelNames: LabelName[];\n    updateActivePopupType: (activePopupType: PopupWindowType) => any;\n}\n\nconst TagLabelsList: React.FC<IProps> = (\n    {\n        size,\n        imageData,\n        updateImageDataById,\n        labelNames,\n        updateActivePopupType\n    }) => {\n    const labelInputFieldHeight = 40;\n    const listStyle: React.CSSProperties = {\n        width: size.width,\n        height: size.height\n    };\n    const listStyleContent: React.CSSProperties = {\n        width: size.width,\n        height: imageData.labelPolygons.length * labelInputFieldHeight\n    };\n\n    const onTagClick = (labelId: string)  => {\n        if (imageData.labelNameIds.includes(labelId)) {\n            updateImageDataById(imageData.id, {\n                ...imageData,\n                labelNameIds: remove(imageData.labelNameIds, (element: string) => element !== labelId)\n            })\n        } else {\n            updateImageDataById(imageData.id, {\n                ...imageData,\n                labelNameIds: imageData.labelNameIds.concat(labelId)\n            })\n        }\n    }\n\n    const getClassName = (labelId: string) => {\n        return classNames(\n            \"TagItem\",\n            {\n                \"active\": imageData.labelNameIds.includes(labelId)\n            }\n        );\n    };\n\n    const addNewOnClick = () => {\n        updateActivePopupType(PopupWindowType.UPDATE_LABEL)\n    }\n\n    const getChildren = () => {\n        return [\n            ...labelNames.map((labelName: LabelName) => {\n                return <div\n                    className={getClassName(labelName.id)}\n                    onClickCapture={() => onTagClick(labelName.id)}\n                    key={labelName.id}\n                >\n                    {labelName.name}\n                </div>\n            }),\n            <ImageButton\n                image={\"/ico/plus.png\"}\n                imageAlt={\"plus\"}\n                buttonSize={{width: 32, height: 32}}\n                onClick={addNewOnClick}\n            />\n        ]\n    };\n\n    return (\n        <div\n            className=\"TagLabelsList\"\n            style={listStyle}\n            key=\"tag-labels-list\"\n        >\n            {labelNames.length === 0 ?\n                <div\n                    className=\"EmptyLabelList\"\n                    onClick={addNewOnClick}\n                    key=\"empty-label-list\"\n                >\n                    <img\n                        draggable={false}\n                        alt={\"upload\"}\n                        src={\"/ico/type-writer.png\"}\n                    />\n                    <p className=\"extraBold\">Your label list is empty</p>\n                </div> :\n                <Scrollbars>\n                    <div\n                        className=\"TagLabelsListContent\"\n                        style={listStyleContent}\n                        key=\"tag-labels-list-content\"\n                    >\n                        {getChildren()}\n                    </div>\n                </Scrollbars>\n            }\n        </div>\n    );\n};\n\nconst mapDispatchToProps = {\n    updateImageDataById,\n    updateActivePopupType\n};\n\nconst mapStateToProps = (state: AppState) => ({\n    labelNames : state.labels.labels\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TagLabelsList);","import React from \"react\";\nimport './LabelsToolkit.scss';\nimport {ImageData} from \"../../../../store/labels/types\";\nimport {updateActiveLabelId, updateActiveLabelType, updateImageDataById} from \"../../../../store/labels/actionCreators\";\nimport {AppState} from \"../../../../store\";\nimport {connect} from \"react-redux\";\nimport {LabelType} from \"../../../../data/enums/LabelType\";\nimport {ProjectType} from \"../../../../data/enums/ProjectType\";\nimport {ISize} from \"../../../../interfaces/ISize\";\nimport classNames from \"classnames\";\nimport {find} from \"lodash\";\nimport {ILabelToolkit, LabelToolkitData} from \"../../../../data/info/LabelToolkitData\";\nimport {Settings} from \"../../../../settings/Settings\";\nimport RectLabelsList from \"../RectLabelsList/RectLabelsList\";\nimport PointLabelsList from \"../PointLabelsList/PointLabelsList\";\nimport PolygonLabelsList from \"../PolygonLabelsList/PolygonLabelsList\";\nimport {ContextManager} from \"../../../../logic/context/ContextManager\";\nimport {ContextType} from \"../../../../data/enums/ContextType\";\nimport {EventType} from \"../../../../data/enums/EventType\";\nimport LineLabelsList from \"../LineLabelsList/LineLabelsList\";\nimport TagLabelsList from \"../TagLabelsList/TagLabelsList\";\n\ninterface IProps {\n    activeImageIndex:number,\n    activeLabelType: LabelType;\n    imagesData: ImageData[];\n    projectType: ProjectType;\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\n    updateActiveLabelType: (activeLabelType: LabelType) => any;\n    updateActiveLabelId: (highlightedLabelId: string) => any;\n}\n\ninterface IState {\n    size: ISize;\n}\n\nclass LabelsToolkit extends React.Component<IProps, IState> {\n    private labelsToolkitRef: HTMLDivElement;\n    private readonly tabs: LabelType[];\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            size: null,\n        };\n\n        this.tabs = props.projectType === ProjectType.IMAGE_RECOGNITION ?\n            [\n                LabelType.IMAGE_RECOGNITION\n            ] :\n            [\n                LabelType.RECT,\n                LabelType.POINT,\n                LabelType.LINE,\n                LabelType.POLYGON\n            ];\n\n        const activeTab: LabelType = props.activeLabelType ? props.activeLabelType : this.tabs[0];\n        props.updateActiveLabelType(activeTab);\n    }\n\n    public componentDidMount(): void {\n        this.updateToolkitSize();\n        window.addEventListener(EventType.RESIZE, this.updateToolkitSize);\n    }\n\n    public componentWillUnmount(): void {\n        window.removeEventListener(EventType.RESIZE, this.updateToolkitSize);\n    }\n\n    private updateToolkitSize = () => {\n        if (!this.labelsToolkitRef)\n            return;\n\n        const listBoundingBox = this.labelsToolkitRef.getBoundingClientRect();\n        this.setState({\n            size: {\n                width: listBoundingBox.width,\n                height: listBoundingBox.height\n            }\n        })\n    };\n\n    private headerClickHandler = (activeTab: LabelType) => {\n        this.props.updateActiveLabelType(activeTab);\n        this.props.updateActiveLabelId(null);\n    };\n\n    private renderChildren = () => {\n        const {size} = this.state;\n        const {activeImageIndex, imagesData, activeLabelType} = this.props;\n        return this.tabs.reduce((children, labelType: LabelType, index: number) => {\n            const isActive: boolean = labelType === activeLabelType;\n            const tabData: ILabelToolkit = find(LabelToolkitData, {labelType});\n            const activeTabContentHeight: number = size.height - this.tabs.length * Settings.TOOLKIT_TAB_HEIGHT_PX;\n            const getClassName = (baseClass: string) => classNames(\n                baseClass,\n                {\n                    \"active\": isActive,\n                }\n            );\n\n            const header =\n                <div\n                    key={\"Header_\" + index}\n                    className={getClassName(\"Header\")}\n                    onClick={() => this.headerClickHandler(labelType)}\n                    style={{height: Settings.TOOLKIT_TAB_HEIGHT_PX}}\n                >\n                    <div className=\"Marker\"/>\n                    <div className=\"HeaderGroupWrapper\">\n                        <img\n                            draggable={false}\n                            className=\"Ico\"\n                            src={tabData.imageSrc}\n                            alt={tabData.imageAlt}\n                        />\n                        {tabData.headerText}\n                    </div>\n                    <div className=\"HeaderGroupWrapper\">\n                        <img\n                            draggable={false}\n                            className=\"Arrow\"\n                            src={\"/ico/down.png\"}\n                            alt={\"down_arrow\"}\n                        />\n                    </div>\n                </div>;\n\n            const content =\n                <div\n                    key={\"Content_\" + index}\n                    className={getClassName(\"Content\")}\n                    style={{height: isActive ? activeTabContentHeight : 0}}\n                >\n                    {labelType === LabelType.RECT && <RectLabelsList\n                        size={{\n                            width: size.width - 20,\n                            height: activeTabContentHeight - 20\n                        }}\n                        imageData={imagesData[activeImageIndex]}\n                    />}\n                    {labelType === LabelType.POINT && <PointLabelsList\n                        size={{\n                            width: size.width - 20,\n                            height: activeTabContentHeight - 20\n                        }}\n                        imageData={imagesData[activeImageIndex]}\n                    />}\n                    {labelType === LabelType.LINE && <LineLabelsList\n                        size={{\n                            width: size.width - 20,\n                            height: activeTabContentHeight - 20\n                        }}\n                        imageData={imagesData[activeImageIndex]}\n                    />}\n                    {labelType === LabelType.POLYGON && <PolygonLabelsList\n                        size={{\n                            width: size.width - 20,\n                            height: activeTabContentHeight - 20\n                        }}\n                        imageData={imagesData[activeImageIndex]}\n                    />}\n                    {labelType === LabelType.IMAGE_RECOGNITION && <TagLabelsList\n                        size={{\n                            width: size.width - 20,\n                            height: activeTabContentHeight - 20\n                        }}\n                        imageData={imagesData[activeImageIndex]}\n                    />}\n                </div>;\n\n            children.push([header, content]);\n            return children;\n        }, [])\n    };\n\n    public render() {\n        return(\n            <div\n                className=\"LabelsToolkit\"\n                ref={ref => this.labelsToolkitRef = ref}\n                onClick={() => ContextManager.switchCtx(ContextType.RIGHT_NAVBAR)}\n            >\n                {this.state.size && this.renderChildren()}\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = {\n    updateImageDataById,\n    updateActiveLabelType,\n    updateActiveLabelId\n};\n\nconst mapStateToProps = (state: AppState) => ({\n    activeImageIndex: state.labels.activeImageIndex,\n    activeLabelType: state.labels.activeLabelType,\n    imagesData: state.labels.imagesData,\n    projectType: state.general.projectData.type,\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LabelsToolkit);","import React from 'react';\nimport classNames from 'classnames';\nimport './SideNavigationBar.scss';\nimport {Direction} from \"../../../data/enums/Direction\";\n\ninterface IProps {\n    direction: Direction\n    isOpen: boolean;\n    isWithContext?: boolean;\n    renderCompanion?: () => any;\n    renderContent?: () => any;\n}\n\nexport const SideNavigationBar: React.FC<IProps> = (props) => {\n    const {direction, isOpen, isWithContext, renderContent, renderCompanion} = props;\n\n    const getClassName = () => {\n        return classNames(\n            \"SideNavigationBar\",\n            {\n                \"left\": direction === Direction.LEFT,\n                \"right\": direction === Direction.RIGHT,\n                \"with-context\": isWithContext,\n                \"closed\": !isOpen\n            }\n        );\n    };\n\n    return (\n        <div className={getClassName()}>\n            <div className=\"CompanionBar\">\n                {renderCompanion && renderCompanion()}\n            </div>\n            {isOpen && <div className=\"NavigationBarContentWrapper\">\n                {renderContent && renderContent()}\n            </div>}\n        </div>\n    );\n};","import * as React from \"react\";\nimport classNames from \"classnames\";\nimport './VerticalEditorButton.scss';\n\ninterface IProps {\n    key?:string;\n    label:string;\n    onClick?:() => any;\n    style?:React.CSSProperties;\n    isActive?:boolean;\n    isDisabled?:boolean;\n    image?:string,\n    imageAlt?:string,\n}\n\nexport const VerticalEditorButton = (props:IProps) => {\n\n    const { key, label, onClick, style, isActive, isDisabled, image, imageAlt} = props;\n\n    const getClassName = () => {\n        return classNames(\n            \"VerticalEditorButton\",\n            {\n                \"active\": isActive,\n                \"disabled\": isDisabled\n            }\n        );\n    };\n\n    return(\n        <div\n            className={getClassName()}\n            onClick={!!onClick ? onClick : undefined}\n            key={key}\n            style={style}\n        >\n            {image && <img \n                draggable={false}\n                alt={imageAlt} \n                src={image}\n            />}\n            {label}\n        </div>\n    )\n};","import {CustomCursorStyle} from \"../data/enums/CustomCursorStyle\";\nimport classNames from \"classnames\";\n\nexport class EditorUtil {\n    public static getIndicator = (cursorStyle: CustomCursorStyle): string => {\n        switch (cursorStyle) {\n            case CustomCursorStyle.ADD:\n                return \"/ico/plus.png\";\n            case CustomCursorStyle.RESIZE:\n                return \"/ico/resize.png\";\n            case CustomCursorStyle.CLOSE:\n                return \"/ico/close.png\";\n            case CustomCursorStyle.MOVE:\n                return \"/ico/move.png\";\n            case CustomCursorStyle.CANCEL:\n                return \"/ico/cancel.png\";\n            case CustomCursorStyle.GRAB:\n                return \"/ico/hand-fill.png\";\n            case CustomCursorStyle.GRABBING:\n                return \"/ico/hand-fill-grab.png\";\n            default:\n                return null;\n        }\n    };\n\n    public static getCursorStyle = (cursorStyle: CustomCursorStyle) => {\n        return classNames(\n            \"Cursor\", {\n                \"move\": cursorStyle === CustomCursorStyle.MOVE,\n                \"add\": cursorStyle === CustomCursorStyle.ADD,\n                \"resize\": cursorStyle === CustomCursorStyle.RESIZE,\n                \"close\": cursorStyle === CustomCursorStyle.CLOSE,\n                \"cancel\": cursorStyle === CustomCursorStyle.CANCEL,\n                \"grab\": cursorStyle === CustomCursorStyle.GRAB,\n                \"grabbing\": cursorStyle === CustomCursorStyle.GRABBING\n            }\n        );\n    };\n}","import {MobileDeviceData} from \"../data/MobileDeviceData\";\n\nexport class PlatformModel {\n    public static mobileDeviceData: MobileDeviceData;\n    public static isMac: boolean;\n    public static isSafari: boolean;\n    public static isFirefox: boolean;\n}","import React, {useState} from 'react';\nimport './LabelControlPanel.scss';\nimport {updatePreventCustomCursorStatus} from \"../../../store/general/actionCreators\";\nimport {AppState} from \"../../../store\";\nimport {connect} from \"react-redux\";\nimport {IPoint} from \"../../../interfaces/IPoint\";\nimport classNames from \"classnames\";\nimport {LabelName, LabelPoint, LabelRect} from \"../../../store/labels/types\";\nimport {ImageButton} from \"../../Common/ImageButton/ImageButton\";\nimport {LabelActions} from \"../../../logic/actions/LabelActions\";\nimport {ImageData} from \"../../../store/labels/types\";\nimport {LabelStatus} from \"../../../data/enums/LabelStatus\";\nimport {updateImageDataById} from \"../../../store/labels/actionCreators\";\nimport {findLast} from \"lodash\";\nimport {LabelsSelector} from \"../../../store/selectors/LabelsSelector\";\n\ninterface IProps {\n    position: IPoint;\n    updatePreventCustomCursorStatus: (preventCustomCursor: boolean) => any;\n    activeLabelId: string;\n    highlightedLabelId: string;\n    labelData: LabelRect | LabelPoint;\n    imageData: ImageData;\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\n}\n\nconst LabelControlPanel: React.FC<IProps> = ({position, updatePreventCustomCursorStatus, activeLabelId, highlightedLabelId, labelData, imageData, updateImageDataById}) => {\n    const [isActive, setIsActiveStatus] = useState(false);\n\n    const onMouseEnter = () => {\n        updatePreventCustomCursorStatus(true);\n        setIsActiveStatus(true);\n    };\n\n    const onMouseLeave = () => {\n        updatePreventCustomCursorStatus(false);\n        setIsActiveStatus(false);\n    };\n\n    const onAccept = () => {\n        const newImageData = {\n            ...imageData,\n            labelRects: imageData.labelRects.map((labelRect: LabelRect) => {\n                if (labelRect.id === labelData.id) {\n                    const labelName: LabelName = findLast(LabelsSelector.getLabelNames(), {name: labelRect.suggestedLabel});\n                    return {\n                        ...labelRect,\n                        status: LabelStatus.ACCEPTED,\n                        labelId: !!labelName ? labelName.id : labelRect.labelId\n                    }\n                } else {\n                    return labelRect\n                }\n            }),\n            labelPoints: imageData.labelPoints.map((labelPoint: LabelPoint) => {\n                if (labelPoint.id === labelData.id) {\n                    const labelName: LabelName = findLast(LabelsSelector.getLabelNames(), {name: labelPoint.suggestedLabel});\n                    return {\n                        ...labelPoint,\n                        status: LabelStatus.ACCEPTED,\n                        labelId: !!labelName ? labelName.id : labelPoint.labelId\n                    }\n                } else {\n                    return labelPoint\n                }\n            })\n        };\n        updateImageDataById(imageData.id, newImageData);\n        updatePreventCustomCursorStatus(false);\n    };\n\n    const onReject = () => {\n        LabelActions.deleteImageLabelById(imageData.id, labelData.id);\n        updatePreventCustomCursorStatus(false);\n    };\n\n    const getClassName = () => {\n        return classNames(\n            \"LabelControlPanel\", {\n                \"is-active\": isPanelActive()\n            }\n        );\n    };\n\n    const isPanelActive = () => {\n        return isActive || labelData.id === activeLabelId || labelData.id === highlightedLabelId\n    };\n\n    return <div\n        className={getClassName()}\n        style={{top: position.y, left: position.x}}\n        onMouseEnter={onMouseEnter}\n        onMouseLeave={onMouseLeave}\n    >\n        {isPanelActive() && <>\n            <ImageButton\n                image={\"/ico/plus.png\"}\n                imageAlt={\"plus\"}\n                buttonSize={{width: 30, height: 30}}\n                padding={15}\n                onClick={onAccept}\n            />\n            <ImageButton\n                image={\"/ico/trash.png\"}\n                imageAlt={\"trash\"}\n                buttonSize={{width: 30, height: 30}}\n                padding={15}\n                onClick={onReject}\n            />\n            {labelData.suggestedLabel && LabelActions.labelExistsInLabelNames(labelData.suggestedLabel) ?\n                <div className=\"SuggestedLabel\">\n                    {labelData.suggestedLabel}\n                </div> :\n                null\n            }\n        </>}\n    </div>\n};\n\nconst mapDispatchToProps = {\n    updatePreventCustomCursorStatus,\n    updateImageDataById\n};\n\nconst mapStateToProps = (state: AppState) => ({\n    activeLabelId: state.labels.activeLabelId,\n    highlightedLabelId: state.labels.highlightedLabelId,\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LabelControlPanel);","import {Action} from '../Actions';\nimport {AIActionTypes} from './types';\n\nexport function updateSuggestedLabelList(labelList: string[]): AIActionTypes {\n    return {\n        type: Action.UPDATE_SUGGESTED_LABEL_LIST,\n        payload: {\n            labelList,\n        }\n    }\n}\n\nexport function updateRejectedSuggestedLabelList(labelList: string[]): AIActionTypes {\n    return {\n        type: Action.UPDATE_REJECTED_SUGGESTED_LABEL_LIST,\n        payload: {\n            labelList,\n        }\n    }\n}\n\nexport function updateObjectDetectorStatus(isObjectDetectorLoaded: boolean): AIActionTypes {\n    return {\n        type: Action.UPDATE_OBJECT_DETECTOR_STATUS,\n        payload: {\n            isObjectDetectorLoaded,\n        }\n    }\n}\n\nexport function updatePoseDetectorStatus(isPoseDetectorLoaded: boolean): AIActionTypes {\n    return {\n        type: Action.UPDATE_POSE_DETECTOR_STATUS,\n        payload: {\n            isPoseDetectorLoaded,\n        }\n    }\n}\n\nexport function updateDisabledAIFlag(isAIDisabled: boolean): AIActionTypes {\n    return {\n        type: Action.UPDATE_DISABLED_AI_FLAG,\n        payload: {\n            isAIDisabled,\n        }\n    }\n}","import '@tensorflow/tfjs-backend-cpu';\nimport * as cocoSsd from '@tensorflow-models/coco-ssd';\nimport {DetectedObject, ObjectDetection} from '@tensorflow-models/coco-ssd';\nimport {store} from '../index';\nimport {updateObjectDetectorStatus} from '../store/ai/actionCreators';\nimport {LabelType} from '../data/enums/LabelType';\nimport {LabelsSelector} from '../store/selectors/LabelsSelector';\nimport {AIObjectDetectionActions} from '../logic/actions/AIObjectDetectionActions';\nimport {updateActiveLabelType} from '../store/labels/actionCreators';\n\nexport class ObjectDetector {\n    private static model: ObjectDetection;\n\n    public static loadModel(callback?: () => any) {\n        cocoSsd\n            .load()\n            .then((model: ObjectDetection) => {\n                ObjectDetector.model = model;\n                store.dispatch(updateObjectDetectorStatus(true));\n                store.dispatch(updateActiveLabelType(LabelType.RECT));\n                const activeLabelType: LabelType = LabelsSelector.getActiveLabelType();\n                if (activeLabelType === LabelType.RECT) {\n                    AIObjectDetectionActions.detectRectsForActiveImage();\n                }\n                if (callback) {\n                    callback();\n                }\n            })\n            .catch((error) => {\n                // TODO\n                throw new Error(error as string);\n            })\n    }\n\n    public static predict(image: HTMLImageElement, callback?: (predictions: DetectedObject[]) => any) {\n        if (!ObjectDetector.model) return;\n\n        ObjectDetector.model\n            .detect(image)\n            .then((predictions: DetectedObject[]) => {\n                if (callback) {\n                    callback(predictions)\n                }\n            })\n            .catch((error) => {\n                // TODO\n                throw new Error(error as string);\n            })\n    }\n}\n","import {DetectedObject} from '@tensorflow-models/coco-ssd';\nimport {ImageData, LabelName, LabelRect} from '../../store/labels/types';\nimport {LabelsSelector} from '../../store/selectors/LabelsSelector';\nimport { v4 as uuidv4 } from 'uuid';\nimport {store} from '../../index';\nimport {updateImageDataById} from '../../store/labels/actionCreators';\nimport {ObjectDetector} from '../../ai/ObjectDetector';\nimport {ImageRepository} from '../imageRepository/ImageRepository';\nimport {LabelStatus} from '../../data/enums/LabelStatus';\nimport {findLast} from 'lodash';\nimport {updateSuggestedLabelList} from '../../store/ai/actionCreators';\nimport {PopupWindowType} from '../../data/enums/PopupWindowType';\nimport {updateActivePopupType} from '../../store/general/actionCreators';\nimport {AISelector} from '../../store/selectors/AISelector';\nimport {AIActions} from './AIActions';\n\nexport class AIObjectDetectionActions {\n    public static detectRectsForActiveImage(): void {\n        const activeImageData: ImageData = LabelsSelector.getActiveImageData();\n        AIObjectDetectionActions.detectRects(activeImageData.id, ImageRepository.getById(activeImageData.id))\n    }\n\n    public static detectRects(imageId: string, image: HTMLImageElement): void {\n        if (LabelsSelector.getImageDataById(imageId).isVisitedByObjectDetector || !AISelector.isAIObjectDetectorModelLoaded())\n            return;\n\n        store.dispatch(updateActivePopupType(PopupWindowType.LOADER));\n        ObjectDetector.predict(image, (predictions: DetectedObject[]) => {\n            const suggestedLabelNames = AIObjectDetectionActions.extractNewSuggestedLabelNames(LabelsSelector.getLabelNames(), predictions);\n            const rejectedLabelNames = AISelector.getRejectedSuggestedLabelList();\n            const newlySuggestedNames = AIActions.excludeRejectedLabelNames(suggestedLabelNames, rejectedLabelNames);\n            if (newlySuggestedNames.length > 0) {\n                store.dispatch(updateSuggestedLabelList(newlySuggestedNames));\n                store.dispatch(updateActivePopupType(PopupWindowType.SUGGEST_LABEL_NAMES));\n            } else {\n                store.dispatch(updateActivePopupType(null));\n            }\n            AIObjectDetectionActions.saveRectPredictions(imageId, predictions);\n        })\n    }\n\n    public static saveRectPredictions(imageId: string, predictions: DetectedObject[]) {\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\n        const predictedLabels: LabelRect[] = AIObjectDetectionActions.mapPredictionsToRectLabels(predictions);\n        const nextImageData: ImageData = {\n            ...imageData,\n            labelRects: imageData.labelRects.concat(predictedLabels),\n            isVisitedByObjectDetector: true\n        };\n        store.dispatch(updateImageDataById(imageData.id, nextImageData));\n    }\n\n    private static mapPredictionsToRectLabels(predictions: DetectedObject[]): LabelRect[] {\n        return predictions.map((prediction: DetectedObject) => {\n            return {\n                id: uuidv4(),\n                labelIndex: null,\n                labelId: null,\n                rect: {\n                    x: prediction.bbox[0],\n                    y: prediction.bbox[1],\n                    width: prediction.bbox[2],\n                    height: prediction.bbox[3],\n                },\n                isCreatedByAI: true,\n                status: LabelStatus.UNDECIDED,\n                suggestedLabel: prediction.class\n            }\n        })\n    }\n\n    public static extractNewSuggestedLabelNames(labels: LabelName[], predictions: DetectedObject[]): string[] {\n        return predictions.reduce((acc: string[], prediction: DetectedObject) => {\n            if (!acc.includes(prediction.class) && !findLast(labels, {name: prediction.class})) {\n                acc.push(prediction.class)\n            }\n            return acc;\n        }, [])\n    }\n\n    public static acceptAllSuggestedRectLabels(imageData: ImageData) {\n        const newImageData: ImageData = {\n            ...imageData,\n            labelRects: imageData.labelRects.map((labelRect: LabelRect) => {\n                const labelName: LabelName = findLast(LabelsSelector.getLabelNames(), {name: labelRect.suggestedLabel});\n                return {\n                    ...labelRect,\n                    status: LabelStatus.ACCEPTED,\n                    labelId: !!labelName ? labelName.id : labelRect.labelId\n                }\n            })\n        };\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\n    }\n\n    public static rejectAllSuggestedRectLabels(imageData: ImageData) {\n        const newImageData: ImageData = {\n            ...imageData,\n            labelRects: imageData.labelRects.filter((labelRect: LabelRect) => labelRect.status === LabelStatus.ACCEPTED)\n        };\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\n    }\n}\n","import '@tensorflow/tfjs-backend-webgl';\nimport * as posenet from '@tensorflow-models/posenet';\nimport {PoseNet} from '@tensorflow-models/posenet';\nimport {Pose} from '@tensorflow-models/posenet';\nimport {store} from '../index';\nimport {updatePoseDetectorStatus} from '../store/ai/actionCreators';\nimport {AIPoseDetectionActions} from '../logic/actions/AIPoseDetectionActions';\nimport {LabelType} from '../data/enums/LabelType';\nimport {LabelsSelector} from '../store/selectors/LabelsSelector';\nimport {updateActiveLabelType} from '../store/labels/actionCreators';\n\nexport class PoseDetector {\n    private static model: PoseNet;\n\n    public static loadModel(callback?: () => any) {\n        posenet\n            .load({\n                architecture: 'ResNet50',\n                outputStride: 32,\n                inputResolution: 257,\n                quantBytes: 2\n            })\n            .then((model: PoseNet) => {\n                PoseDetector.model = model;\n                store.dispatch(updatePoseDetectorStatus(true));\n                store.dispatch(updateActiveLabelType(LabelType.POINT));\n                const activeLabelType: LabelType = LabelsSelector.getActiveLabelType();\n                if (activeLabelType === LabelType.POINT) {\n                    AIPoseDetectionActions.detectPoseForActiveImage();\n                }\n                if (callback) {\n                    callback();\n                }\n            })\n            .catch((error) => {\n                // TODO\n                throw new Error(error as string);\n            })\n    }\n\n    public static predict(image: HTMLImageElement, callback?: (predictions: Pose[]) => any) {\n        if (!PoseDetector.model) return;\n\n        PoseDetector.model\n            .estimateMultiplePoses(image)\n            .then((predictions: Pose[]) => {\n                if (callback) {\n                    callback(predictions)\n                }\n            })\n            .catch((error) => {\n                // TODO\n                throw new Error(error as string);\n            })\n    }\n}\n","import {PoseDetector} from '../../ai/PoseDetector';\nimport {Keypoint, Pose} from '@tensorflow-models/posenet';\nimport {ImageData, LabelName, LabelPoint} from '../../store/labels/types';\nimport {LabelsSelector} from '../../store/selectors/LabelsSelector';\nimport {ImageRepository} from '../imageRepository/ImageRepository';\nimport {LabelStatus} from '../../data/enums/LabelStatus';\nimport { v4 as uuidv4 } from 'uuid';\nimport {store} from '../../index';\nimport {updateImageDataById} from '../../store/labels/actionCreators';\nimport {findLast} from 'lodash';\nimport {AISelector} from '../../store/selectors/AISelector';\nimport {AIActions} from './AIActions';\nimport {updateSuggestedLabelList} from '../../store/ai/actionCreators';\nimport {updateActivePopupType} from '../../store/general/actionCreators';\nimport {PopupWindowType} from '../../data/enums/PopupWindowType';\nimport {NumberUtil} from '../../utils/NumberUtil';\n\nexport class AIPoseDetectionActions {\n    public static detectPoseForActiveImage(): void {\n        const activeImageData: ImageData = LabelsSelector.getActiveImageData();\n        AIPoseDetectionActions.detectPoses(activeImageData.id, ImageRepository.getById(activeImageData.id))\n    }\n\n    public static detectPoses(imageId: string, image: HTMLImageElement): void {\n        if (LabelsSelector.getImageDataById(imageId).isVisitedByPoseDetector || !AISelector.isAIPoseDetectorModelLoaded())\n            return;\n\n        store.dispatch(updateActivePopupType(PopupWindowType.LOADER));\n        PoseDetector.predict(image, (poses: Pose[]) => {\n            const suggestedLabelNames = AIPoseDetectionActions.extractNewSuggestedLabelNames(LabelsSelector.getLabelNames(), poses);\n            const rejectedLabelNames = AISelector.getRejectedSuggestedLabelList();\n            const newlySuggestedNames = AIActions.excludeRejectedLabelNames(suggestedLabelNames, rejectedLabelNames);\n            if (newlySuggestedNames.length > 0) {\n                store.dispatch(updateSuggestedLabelList(newlySuggestedNames));\n                store.dispatch(updateActivePopupType(PopupWindowType.SUGGEST_LABEL_NAMES));\n            } else {\n                store.dispatch(updateActivePopupType(null));\n            }\n            AIPoseDetectionActions.savePosePredictions(imageId, poses, image);\n        })\n    }\n\n    public static savePosePredictions(imageId: string, predictions: Pose[], image: HTMLImageElement) {\n        const imageData: ImageData = LabelsSelector.getImageDataById(imageId);\n        const predictedLabels: LabelPoint[] = AIPoseDetectionActions\n            .mapPredictionsToPointLabels(predictions)\n            .filter((labelPoint: LabelPoint) => NumberUtil.isValueInRange(labelPoint.point.x, 0, image.width))\n            .filter((labelPoint: LabelPoint) => NumberUtil.isValueInRange(labelPoint.point.y, 0, image.height))\n        const nextImageData: ImageData = {\n            ...imageData,\n            labelPoints: imageData.labelPoints.concat(predictedLabels),\n            isVisitedByPoseDetector: true\n        };\n        store.dispatch(updateImageDataById(imageData.id, nextImageData));\n    }\n\n    private static mapPredictionsToPointLabels(predictions: Pose[]): LabelPoint[] {\n        return predictions\n            .map((prediction: Pose) => {\n                return prediction.keypoints\n                    .map((keypoint: Keypoint) => {\n                        return {\n                            id: uuidv4(),\n                            labelIndex: null,\n                            labelId: null,\n                            point: {\n                                x: keypoint.position.x,\n                                y: keypoint.position.y\n                            },\n                            isCreatedByAI: true,\n                            status: LabelStatus.UNDECIDED,\n                            suggestedLabel: keypoint.part\n                        }\n                    })\n            })\n            .reduce((acc: LabelPoint[], item: LabelPoint[]) => {\n                return acc.concat(item);\n            }, [])\n    }\n\n    public static extractNewSuggestedLabelNames(labels: LabelName[], predictions: Pose[]): string[] {\n        return predictions\n            .map((pose: Pose) => pose.keypoints)\n            .reduce((acc: Keypoint[], item: Keypoint[]) => {\n                return acc.concat(item);\n            }, [])\n            .map((keypoint: Keypoint) => keypoint.part)\n            .reduce((acc: string[], name: string) => {\n                if (!acc.includes(name) && !findLast(labels, {name})) {\n                    acc.push(name)\n                }\n                return acc;\n            }, [])\n    }\n\n    public static acceptAllSuggestedPointLabels(imageData: ImageData) {\n        const newImageData: ImageData = {\n            ...imageData,\n            labelPoints: imageData.labelPoints.map((labelPoint: LabelPoint) => {\n                const labelName: LabelName = findLast(LabelsSelector.getLabelNames(), {name: labelPoint.suggestedLabel});\n                return {\n                    ...labelPoint,\n                    status: LabelStatus.ACCEPTED,\n                    labelId: !!labelName ? labelName.id : labelPoint.labelId\n                }\n            })\n        };\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\n    }\n\n    public static rejectAllSuggestedPointLabels(imageData: ImageData) {\n        const newImageData: ImageData = {\n            ...imageData,\n            labelPoints: imageData.labelPoints.filter((labelPoint: LabelPoint) => labelPoint.status === LabelStatus.ACCEPTED)\n        };\n        store.dispatch(updateImageDataById(newImageData.id, newImageData));\n    }\n}\n","export enum AcceptedFileType {\n    IMAGE = 'image/jpeg, image/png',\n    TEXT = 'text/plain',\n    JSON = 'application/json'\n}","import {LabelType} from \"../../data/enums/LabelType\";\nimport {LabelsSelector} from \"../../store/selectors/LabelsSelector\";\nimport {AIObjectDetectionActions} from \"./AIObjectDetectionActions\";\nimport {AIPoseDetectionActions} from \"./AIPoseDetectionActions\";\nimport {ImageData} from \"../../store/labels/types\";\n\nexport class AIActions {\n    public static excludeRejectedLabelNames(suggestedLabels: string[], rejectedLabels: string[]): string[] {\n        return suggestedLabels.reduce((acc: string[], label: string) => {\n            if (!rejectedLabels.includes(label)) {\n                acc.push(label)\n            }\n            return acc;\n        }, [])\n    }\n\n    public static detect(imageId: string, image: HTMLImageElement): void {\n        const activeLabelType: LabelType = LabelsSelector.getActiveLabelType();\n\n        switch (activeLabelType) {\n            case LabelType.RECT:\n                AIObjectDetectionActions.detectRects(imageId, image);\n                break;\n            case LabelType.POINT:\n                AIPoseDetectionActions.detectPoses(imageId, image);\n                break;\n        }\n    }\n\n    public static rejectAllSuggestedLabels(imageData: ImageData) {\n        const activeLabelType: LabelType = LabelsSelector.getActiveLabelType();\n\n        switch (activeLabelType) {\n            case LabelType.RECT:\n                AIObjectDetectionActions.rejectAllSuggestedRectLabels(imageData);\n                break;\n            case LabelType.POINT:\n                AIPoseDetectionActions.rejectAllSuggestedPointLabels(imageData);\n                break;\n        }\n    }\n\n    public static acceptAllSuggestedLabels(imageData: ImageData) {\n        const activeLabelType: LabelType = LabelsSelector.getActiveLabelType();\n        switch (activeLabelType) {\n            case LabelType.RECT:\n                AIObjectDetectionActions.acceptAllSuggestedRectLabels(imageData);\n                break;\n            case LabelType.POINT:\n                AIPoseDetectionActions.acceptAllSuggestedPointLabels(imageData);\n                break;\n        }\n    }\n}","import React from 'react';\nimport './Editor.scss';\nimport {ISize} from '../../../interfaces/ISize';\nimport {ImageData, LabelPoint, LabelRect} from '../../../store/labels/types';\nimport {FileUtil} from '../../../utils/FileUtil';\nimport {AppState} from '../../../store';\nimport {connect} from 'react-redux';\nimport {updateImageDataById} from '../../../store/labels/actionCreators';\nimport {ImageRepository} from '../../../logic/imageRepository/ImageRepository';\nimport {LabelType} from '../../../data/enums/LabelType';\nimport {PopupWindowType} from '../../../data/enums/PopupWindowType';\nimport {CanvasUtil} from '../../../utils/CanvasUtil';\nimport {CustomCursorStyle} from '../../../data/enums/CustomCursorStyle';\nimport {ImageLoadManager} from '../../../logic/imageRepository/ImageLoadManager';\nimport {EventType} from '../../../data/enums/EventType';\nimport {EditorData} from '../../../data/EditorData';\nimport {EditorModel} from '../../../staticModels/EditorModel';\nimport {EditorActions} from '../../../logic/actions/EditorActions';\nimport {EditorUtil} from '../../../utils/EditorUtil';\nimport {ContextManager} from '../../../logic/context/ContextManager';\nimport {ContextType} from '../../../data/enums/ContextType';\nimport Scrollbars from 'react-custom-scrollbars';\nimport {ViewPortActions} from '../../../logic/actions/ViewPortActions';\nimport {PlatformModel} from '../../../staticModels/PlatformModel';\nimport LabelControlPanel from '../LabelControlPanel/LabelControlPanel';\nimport {IPoint} from '../../../interfaces/IPoint';\nimport {RenderEngineUtil} from '../../../utils/RenderEngineUtil';\nimport {LabelStatus} from '../../../data/enums/LabelStatus';\nimport {isEqual} from 'lodash';\nimport {AIActions} from '../../../logic/actions/AIActions';\n\ninterface IProps {\n    size: ISize;\n    imageData: ImageData;\n    activeLabelType: LabelType;\n    updateImageDataById: (id: string, newImageData: ImageData) => any;\n    activePopupType: PopupWindowType;\n    activeLabelId: string;\n    customCursorStyle: CustomCursorStyle;\n    imageDragMode: boolean;\n    zoom: number;\n}\n\ninterface IState {\n    viewPortSize: ISize\n}\n\nclass Editor extends React.Component<IProps, IState> {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            viewPortSize: {\n                width: 0,\n                height: 0\n            },\n        };\n    }\n\n    // =================================================================================================================\n    // LIFE CYCLE\n    // =================================================================================================================\n\n    public componentDidMount(): void {\n        this.mountEventListeners();\n\n        const {imageData, activeLabelType} = this.props;\n\n        ContextManager.switchCtx(ContextType.EDITOR);\n        EditorActions.mountRenderEnginesAndHelpers(activeLabelType);\n        ImageLoadManager.addAndRun(this.loadImage(imageData));\n        ViewPortActions.resizeCanvas(this.props.size);\n    }\n\n    public componentWillUnmount(): void {\n        this.unmountEventListeners();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IProps>, prevState: Readonly<{}>, snapshot?: any): void {\n        const {imageData, activeLabelType} = this.props;\n\n        prevProps.imageData.id !== imageData.id && ImageLoadManager.addAndRun(this.loadImage(imageData));\n\n        if (prevProps.activeLabelType !== activeLabelType) {\n            EditorActions.swapSupportRenderingEngine(activeLabelType);\n            AIActions.detect(imageData.id, ImageRepository.getById(imageData.id));\n        }\n\n        this.updateModelAndRender();\n    }\n\n    // =================================================================================================================\n    // EVENT HANDLERS\n    // =================================================================================================================\n\n    private mountEventListeners() {\n        window.addEventListener(EventType.MOUSE_MOVE, this.update);\n        window.addEventListener(EventType.MOUSE_UP, this.update);\n        EditorModel.canvas.addEventListener(EventType.MOUSE_DOWN, this.update);\n        EditorModel.canvas.addEventListener(EventType.MOUSE_WHEEL, this.handleZoom);\n    }\n\n    private unmountEventListeners() {\n        window.removeEventListener(EventType.MOUSE_MOVE, this.update);\n        window.removeEventListener(EventType.MOUSE_UP, this.update);\n        EditorModel.canvas.removeEventListener(EventType.MOUSE_DOWN, this.update);\n        EditorModel.canvas.removeEventListener(EventType.MOUSE_WHEEL, this.handleZoom);\n    }\n\n    // =================================================================================================================\n    // LOAD IMAGE\n    // =================================================================================================================\n\n    private loadImage = async (imageData: ImageData): Promise<any> => {\n        if (imageData.loadStatus) {\n            EditorActions.setActiveImage(ImageRepository.getById(imageData.id));\n            AIActions.detect(imageData.id, ImageRepository.getById(imageData.id));\n            this.updateModelAndRender()\n        }\n        else {\n            if (!EditorModel.isLoading) {\n                EditorActions.setLoadingStatus(true);\n                const saveLoadedImagePartial = (image: HTMLImageElement) => this.saveLoadedImage(image, imageData);\n                FileUtil.loadImage(imageData.fileData)\n                    .then((image:HTMLImageElement) => saveLoadedImagePartial(image))\n                    .catch((error) => this.handleLoadImageError())\n            }\n        }\n    };\n\n    private saveLoadedImage = (image: HTMLImageElement, imageData: ImageData) => {\n        imageData.loadStatus = true;\n        this.props.updateImageDataById(imageData.id, imageData);\n        ImageRepository.storeImage(imageData.id, image);\n        EditorActions.setActiveImage(image);\n        AIActions.detect(imageData.id, image);\n        EditorActions.setLoadingStatus(false);\n        this.updateModelAndRender()\n    };\n\n    private handleLoadImageError = () => {};\n\n    // =================================================================================================================\n    // HELPER METHODS\n    // =================================================================================================================\n\n    private updateModelAndRender = () => {\n        ViewPortActions.updateViewPortSize();\n        ViewPortActions.updateDefaultViewPortImageRect();\n        ViewPortActions.resizeViewPortContent();\n        EditorActions.fullRender();\n    };\n\n    private update = (event: MouseEvent) => {\n        const editorData: EditorData = EditorActions.getEditorData(event);\n        EditorModel.mousePositionOnViewPortContent = CanvasUtil.getMousePositionOnCanvasFromEvent(event, EditorModel.canvas);\n        EditorModel.primaryRenderingEngine.update(editorData);\n\n        if (this.props.imageDragMode) {\n            EditorModel.viewPortHelper.update(editorData);\n        } else {\n            EditorModel.supportRenderingEngine && EditorModel.supportRenderingEngine.update(editorData);\n        }\n\n        !this.props.activePopupType && EditorActions.updateMousePositionIndicator(event);\n        EditorActions.fullRender();\n    };\n\n    private handleZoom = (event: WheelEvent) => {\n        if (event.ctrlKey || (PlatformModel.isMac && event.metaKey)) {\n            const scrollSign: number = Math.sign(event.deltaY);\n            if ((PlatformModel.isMac && scrollSign === -1) || (!PlatformModel.isMac && scrollSign === 1)) {\n                ViewPortActions.zoomOut();\n            }\n            else if ((PlatformModel.isMac && scrollSign === 1) || (!PlatformModel.isMac && scrollSign === -1)) {\n                ViewPortActions.zoomIn();\n            }\n        }\n        EditorModel.mousePositionOnViewPortContent = CanvasUtil.getMousePositionOnCanvasFromEvent(event, EditorModel.canvas);\n    };\n\n    private getOptionsPanels = () => {\n        const editorData: EditorData = EditorActions.getEditorData();\n        if (this.props.activeLabelType === LabelType.RECT) {\n            return this.props.imageData.labelRects\n                .filter((labelRect: LabelRect) => labelRect.isCreatedByAI && labelRect.status !== LabelStatus.ACCEPTED)\n                .map((labelRect: LabelRect) => {\n                    const positionOnImage: IPoint = {x: labelRect.rect.x, y: labelRect.rect.y};\n                    const positionOnViewPort: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(positionOnImage, editorData);\n                    return <LabelControlPanel\n                        position={positionOnViewPort}\n                        labelData={labelRect}\n                        imageData={this.props.imageData}\n                        key={labelRect.id}\n                    />\n                })\n        }\n        else if (this.props.activeLabelType === LabelType.POINT) {\n            return this.props.imageData.labelPoints\n                .filter((labelPoint: LabelPoint) => labelPoint.isCreatedByAI && labelPoint.status !== LabelStatus.ACCEPTED)\n                .map((labelPoint: LabelPoint) => {\n                    const positionOnImage: IPoint = {x: labelPoint.point.x, y: labelPoint.point.y};\n                    const positionOnViewPort: IPoint = RenderEngineUtil.transferPointFromImageToViewPortContent(positionOnImage, editorData);\n                    return <LabelControlPanel\n                        position={positionOnViewPort}\n                        labelData={labelPoint}\n                        imageData={this.props.imageData}\n                        key={labelPoint.id}\n                    />\n                })\n        }\n        else return null;\n    };\n\n    private onScrollbarsUpdate = (scrollbarContent)=>{\n        const newViewPortContentSize = {\n            width: scrollbarContent.scrollWidth,\n            height: scrollbarContent.scrollHeight\n        };\n        if(!isEqual(newViewPortContentSize, this.state.viewPortSize)) {\n            this.setState({viewPortSize: newViewPortContentSize})\n        }\n    };\n\n    public render() {\n        return (\n            <div\n                className='Editor'\n                ref={ref => EditorModel.editor = ref}\n                draggable={false}\n            >\n                <Scrollbars\n                    ref={ref => EditorModel.viewPortScrollbars = ref}\n                    renderTrackHorizontal={props => <div {...props} className='track-horizontal'/>}\n                    renderTrackVertical={props => <div {...props} className='track-vertical'/>}\n                    onUpdate={this.onScrollbarsUpdate}\n                >\n                    <div\n                        className='ViewPortContent'\n                    >\n                        <canvas\n                            className='ImageCanvas'\n                            ref={ref => EditorModel.canvas = ref}\n                            draggable={false}\n                            onContextMenu={(event: React.MouseEvent<HTMLCanvasElement>) => event.preventDefault()}\n                        />\n                        {this.getOptionsPanels()}\n                    </div>\n                </Scrollbars>\n                <div\n                    className='MousePositionIndicator'\n                    ref={ref => EditorModel.mousePositionIndicator = ref}\n                    draggable={false}\n                />\n                <div\n                    className={EditorUtil.getCursorStyle(this.props.customCursorStyle)}\n                    ref={ref => EditorModel.cursor = ref}\n                    draggable={false}\n                >\n                    <img\n                        draggable={false}\n                        alt={'indicator'}\n                        src={EditorUtil.getIndicator(this.props.customCursorStyle)}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = {\n    updateImageDataById\n};\n\nconst mapStateToProps = (state: AppState) => ({\n    activeLabelType: state.labels.activeLabelType,\n    activePopupType: state.general.activePopupType,\n    activeLabelId: state.labels.activeLabelId,\n    customCursorStyle: state.general.customCursorStyle,\n    imageDragMode: state.general.imageDragMode,\n    zoom: state.general.zoom\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Editor);\n","import React from 'react';\nimport './EditorBottomNavigationBar.scss';\nimport {ImageData} from \"../../../store/labels/types\";\nimport {AppState} from \"../../../store\";\nimport {connect} from \"react-redux\";\nimport {ImageButton} from \"../../Common/ImageButton/ImageButton\";\nimport {ISize} from \"../../../interfaces/ISize\";\nimport {ContextType} from \"../../../data/enums/ContextType\";\nimport classNames from \"classnames\";\nimport {ImageActions} from \"../../../logic/actions/ImageActions\";\n\ninterface IProps {\n    size: ISize;\n    imageData: ImageData;\n    totalImageCount: number;\n    activeImageIndex: number;\n    activeContext: ContextType;\n}\n\nconst EditorBottomNavigationBar: React.FC<IProps> = ({size, imageData, totalImageCount, activeImageIndex, activeContext}) => {\n    const minWidth:number = 400;\n\n    const getImageCounter = () => {\n        return (activeImageIndex + 1) + \" / \" + totalImageCount;\n    };\n\n    const getClassName = () => {\n        return classNames(\n            \"EditorBottomNavigationBar\",\n            {\n                \"with-context\": activeContext === ContextType.EDITOR\n            }\n        );\n    };\n\n    return (\n        <div className={getClassName()}>\n            <ImageButton\n                image={\"/ico/left.png\"}\n                imageAlt={\"previous\"}\n                buttonSize={{width: 25, height: 25}}\n                onClick={() => ImageActions.getPreviousImage()}\n                isDisabled={activeImageIndex === 0}\n                externalClassName={\"left\"}\n            />\n            {size.width > minWidth ?\n                <div className=\"CurrentImageName\"> {imageData.fileData.name} </div> :\n                <div className=\"CurrentImageCount\"> {getImageCounter()} </div>\n            }\n            <ImageButton\n                image={\"/ico/right.png\"}\n                imageAlt={\"next\"}\n                buttonSize={{width: 25, height: 25}}\n                onClick={() => ImageActions.getNextImage()}\n                isDisabled={activeImageIndex === totalImageCount - 1}\n                externalClassName={\"right\"}\n            />\n        </div>\n    );\n};\n\nconst mapDispatchToProps = {};\n\nconst mapStateToProps = (state: AppState) => ({\n    activeImageIndex: state.labels.activeImageIndex,\n    activeContext: state.general.activeContext\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(EditorBottomNavigationBar);\n","import {ContextType} from '../../../data/enums/ContextType';\nimport './EditorTopNavigationBar.scss';\nimport React from 'react';\nimport classNames from 'classnames';\nimport {AppState} from '../../../store';\nimport {connect} from 'react-redux';\nimport {updateCrossHairVisibleStatus, updateImageDragModeStatus} from '../../../store/general/actionCreators';\nimport {GeneralSelector} from '../../../store/selectors/GeneralSelector';\nimport {ViewPointSettings} from '../../../settings/ViewPointSettings';\nimport {ImageButton} from '../../Common/ImageButton/ImageButton';\nimport {ViewPortActions} from '../../../logic/actions/ViewPortActions';\nimport {LabelsSelector} from '../../../store/selectors/LabelsSelector';\nimport {LabelType} from '../../../data/enums/LabelType';\nimport {AISelector} from '../../../store/selectors/AISelector';\nimport {ISize} from '../../../interfaces/ISize';\nimport {AIActions} from '../../../logic/actions/AIActions';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport {Tooltip} from '@material-ui/core';\nimport Fade from '@material-ui/core/Fade';\n\nconst BUTTON_SIZE: ISize = {width: 30, height: 30};\nconst BUTTON_PADDING: number = 10;\n\nconst StyledTooltip = withStyles(theme => ({\n    tooltip: {\n        backgroundColor: '#171717',\n        color: '#ffffff',\n        boxShadow: theme.shadows[1],\n        fontSize: 12,\n        maxWidth: 200,\n        textAlign: 'center'\n    },\n}))(Tooltip);\n\nconst getButtonWithTooltip = (\n    key: string,\n    tooltipMessage: string,\n    imageSrc: string,\n    imageAlt: string,\n    isActive: boolean,\n    href?:string,\n    onClick?:() => any\n): React.ReactElement => {\n    return <StyledTooltip\n        key={key}\n        disableFocusListener={true}\n        title={tooltipMessage}\n        TransitionComponent={Fade}\n        TransitionProps={{ timeout: 600 }}\n        placement='bottom'\n    >\n        <div>\n            <ImageButton\n                buttonSize={BUTTON_SIZE}\n                padding={BUTTON_PADDING}\n                image={imageSrc}\n                imageAlt={imageAlt}\n                href={href}\n                onClick={onClick}\n                isActive={isActive}\n            />\n        </div>\n    </StyledTooltip>\n}\n\ninterface IProps {\n    activeContext: ContextType;\n    updateImageDragModeStatusAction: (imageDragMode: boolean) => any;\n    updateCrossHairVisibleStatusAction: (crossHairVisible: boolean) => any;\n    imageDragMode: boolean;\n    crossHairVisible: boolean;\n    activeLabelType: LabelType;\n}\n\nconst EditorTopNavigationBar: React.FC<IProps> = (\n    {\n        activeContext,\n        updateImageDragModeStatusAction,\n        updateCrossHairVisibleStatusAction,\n        imageDragMode,\n        crossHairVisible,\n        activeLabelType\n    }) => {\n    const getClassName = () => {\n        return classNames(\n            'EditorTopNavigationBar',\n            {\n                'with-context': activeContext === ContextType.EDITOR\n            }\n        );\n    };\n\n    const imageDragOnClick = () => {\n        if (imageDragMode) {\n            updateImageDragModeStatusAction(!imageDragMode);\n        }\n        else if (GeneralSelector.getZoom() !== ViewPointSettings.MIN_ZOOM) {\n            updateImageDragModeStatusAction(!imageDragMode);\n        }\n    };\n\n    const crossHairOnClick = () => {\n        updateCrossHairVisibleStatusAction(!crossHairVisible);\n    }\n\n    return (\n        <div className={getClassName()}>\n            <div className='ButtonWrapper'>\n                {\n                    getButtonWithTooltip(\n                        'zoom-in',\n                        'zoom in',\n                        '/ico/zoom-in.png',\n                        'zoom-in',\n                        false,\n                        undefined,\n                        () => ViewPortActions.zoomIn()\n                    )\n                }\n                {\n                    getButtonWithTooltip(\n                        'zoom-out',\n                        'zoom out',\n                        '/ico/zoom-out.png',\n                        'zoom-out',\n                        false,\n                        undefined,\n                        () => ViewPortActions.zoomOut()\n                    )\n                }\n                {\n                    getButtonWithTooltip(\n                        'zoom-fit',\n                        'fit image to available space',\n                        '/ico/zoom-fit.png',\n                        'zoom-fit',\n                        false,\n                        undefined,\n                        () => ViewPortActions.setDefaultZoom()\n                    )\n                }\n                {\n                    getButtonWithTooltip(\n                        'zoom-max',\n                        'maximum allowed image zoom',\n                        '/ico/zoom-max.png',\n                        'zoom-max',\n                        false,\n                        undefined,\n                        () => ViewPortActions.setOneForOneZoom()\n                    )\n                }\n            </div>\n            <div className='ButtonWrapper'>\n                {\n                    getButtonWithTooltip(\n                        'image-drag-mode',\n                        imageDragMode ? 'turn-off image drag mode' : 'turn-on image drag mode - works only when image is zoomed',\n                        '/ico/hand.png',\n                        'image-drag-mode',\n                        imageDragMode,\n                        undefined,\n                        imageDragOnClick\n                    )\n                }\n                {\n                    getButtonWithTooltip(\n                        'cursor-cross-hair',\n                        crossHairVisible ? 'turn-off cursor cross-hair' : 'turn-on cursor cross-hair',\n                        '/ico/cross-hair.png',\n                        'cross-hair',\n                        crossHairVisible,\n                        undefined,\n                        crossHairOnClick\n                    )\n                }\n            </div>\n            {((activeLabelType === LabelType.RECT && AISelector.isAIObjectDetectorModelLoaded()) ||\n                (activeLabelType === LabelType.POINT && AISelector.isAIPoseDetectorModelLoaded())) && <div className='ButtonWrapper'>\n                {\n                    getButtonWithTooltip(\n                        'accept-all',\n                        'accept all proposed detections',\n                        '/ico/accept-all.png',\n                        'accept-all',\n                        false,\n                        undefined,\n                        () => AIActions.acceptAllSuggestedLabels(LabelsSelector.getActiveImageData())\n                    )\n                }\n                {\n                    getButtonWithTooltip(\n                        'reject-all',\n                        'reject all proposed detections',\n                        '/ico/reject-all.png',\n                        'reject-all',\n                        false,\n                        undefined,\n                        () => AIActions.rejectAllSuggestedLabels(LabelsSelector.getActiveImageData())\n                    )\n                }\n            </div>}\n        </div>\n    )\n};\n\nconst mapDispatchToProps = {\n    updateImageDragModeStatusAction: updateImageDragModeStatus,\n    updateCrossHairVisibleStatusAction: updateCrossHairVisibleStatus\n};\n\nconst mapStateToProps = (state: AppState) => ({\n    activeContext: state.general.activeContext,\n    imageDragMode: state.general.imageDragMode,\n    crossHairVisible: state.general.crossHairVisible,\n    activeLabelType: state.labels.activeLabelType\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(EditorTopNavigationBar);\n","import React, {useState} from 'react';\nimport {connect} from \"react-redux\";\nimport {Direction} from \"../../../data/enums/Direction\";\nimport {ISize} from \"../../../interfaces/ISize\";\nimport {Settings} from \"../../../settings/Settings\";\nimport {AppState} from \"../../../store\";\nimport {ImageData} from \"../../../store/labels/types\";\nimport ImagesList from \"../SideNavigationBar/ImagesList/ImagesList\";\nimport LabelsToolkit from \"../SideNavigationBar/LabelsToolkit/LabelsToolkit\";\nimport {SideNavigationBar} from \"../SideNavigationBar/SideNavigationBar\";\nimport {VerticalEditorButton} from \"../VerticalEditorButton/VerticalEditorButton\";\nimport './EditorContainer.scss';\nimport Editor from \"../Editor/Editor\";\nimport {ContextManager} from \"../../../logic/context/ContextManager\";\nimport {ContextType} from \"../../../data/enums/ContextType\";\nimport EditorBottomNavigationBar from \"../EditorBottomNavigationBar/EditorBottomNavigationBar\";\nimport EditorTopNavigationBar from \"../EditorTopNavigationBar/EditorTopNavigationBar\";\nimport {ProjectType} from \"../../../data/enums/ProjectType\";\n\ninterface IProps {\n    windowSize: ISize;\n    activeImageIndex: number;\n    imagesData: ImageData[];\n    activeContext: ContextType;\n    projectType: ProjectType;\n}\n\nconst EditorContainer: React.FC<IProps> = (\n    {\n        windowSize,\n        activeImageIndex,\n        imagesData,\n        activeContext,\n        projectType\n    }) => {\n    const [leftTabStatus, setLeftTabStatus] = useState(true);\n    const [rightTabStatus, setRightTabStatus] = useState(true);\n\n    const calculateEditorSize = (): ISize => {\n        if (windowSize) {\n            const leftTabWidth = leftTabStatus ? Settings.SIDE_NAVIGATION_BAR_WIDTH_OPEN_PX : Settings.SIDE_NAVIGATION_BAR_WIDTH_CLOSED_PX;\n            const rightTabWidth = rightTabStatus ? Settings.SIDE_NAVIGATION_BAR_WIDTH_OPEN_PX : Settings.SIDE_NAVIGATION_BAR_WIDTH_CLOSED_PX;\n            return {\n                width: windowSize.width - leftTabWidth - rightTabWidth,\n                height: windowSize.height - Settings.TOP_NAVIGATION_BAR_HEIGHT_PX\n                    - Settings.EDITOR_BOTTOM_NAVIGATION_BAR_HEIGHT_PX - Settings.EDITOR_TOP_NAVIGATION_BAR_HEIGHT_PX,\n            }\n        }\n        else\n            return null;\n    };\n\n    const leftSideBarButtonOnClick = () => {\n        if (!leftTabStatus)\n            ContextManager.switchCtx(ContextType.LEFT_NAVBAR);\n        else if (leftTabStatus && activeContext === ContextType.LEFT_NAVBAR)\n            ContextManager.restoreCtx();\n\n        setLeftTabStatus(!leftTabStatus);\n    };\n\n    const leftSideBarCompanionRender = () => {\n        return <>\n            <VerticalEditorButton\n                label=\"Images\"\n                image={\"/ico/camera.png\"}\n                imageAlt={\"images\"}\n                onClick={leftSideBarButtonOnClick}\n                isActive={leftTabStatus}\n            />\n        </>\n    };\n\n    const leftSideBarRender = () => {\n        return <ImagesList/>\n    };\n\n    const rightSideBarButtonOnClick = () => {\n        if (!rightTabStatus)\n            ContextManager.switchCtx(ContextType.RIGHT_NAVBAR);\n        else if (rightTabStatus && activeContext === ContextType.RIGHT_NAVBAR)\n            ContextManager.restoreCtx();\n\n        setRightTabStatus(!rightTabStatus);\n    };\n\n    const rightSideBarCompanionRender = () => {\n        return <>\n            <VerticalEditorButton\n                label=\"Labels\"\n                image={\"/ico/tags.png\"}\n                imageAlt={\"labels\"}\n                onClick={rightSideBarButtonOnClick}\n                isActive={rightTabStatus}\n            />\n        </>\n    };\n\n    const rightSideBarRender = () => {\n        return <LabelsToolkit/>\n    };\n\n    return (\n        <div className=\"EditorContainer\">\n            <SideNavigationBar\n                direction={Direction.LEFT}\n                isOpen={leftTabStatus}\n                isWithContext={activeContext === ContextType.LEFT_NAVBAR}\n                renderCompanion={leftSideBarCompanionRender}\n                renderContent={leftSideBarRender}\n                key=\"left-side-navigation-bar\"\n            />\n            <div className=\"EditorWrapper\"\n                onMouseDown={() => ContextManager.switchCtx(ContextType.EDITOR)}\n                 key=\"editor-wrapper\"\n            >\n                {projectType === ProjectType.OBJECT_DETECTION && <EditorTopNavigationBar\n                    key=\"editor-top-navigation-bar\"\n                />}\n                <Editor\n                    size={calculateEditorSize()}\n                    imageData={imagesData[activeImageIndex]}\n                    key=\"editor\"\n                />\n                <EditorBottomNavigationBar\n                    imageData={imagesData[activeImageIndex]}\n                    size={calculateEditorSize()}\n                    totalImageCount={imagesData.length}\n                    key=\"editor-bottom-navigation-bar\"\n                />\n            </div>\n            <SideNavigationBar\n                direction={Direction.RIGHT}\n                isOpen={rightTabStatus}\n                isWithContext={activeContext === ContextType.RIGHT_NAVBAR}\n                renderCompanion={rightSideBarCompanionRender}\n                renderContent={rightSideBarRender}\n                key=\"right-side-navigation-bar\"\n            />\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n    windowSize: state.general.windowSize,\n    activeImageIndex: state.labels.activeImageIndex,\n    imagesData: state.labels.imagesData,\n    activeContext: state.general.activeContext,\n    projectType: state.general.projectData.type\n});\n\nexport default connect(\n    mapStateToProps\n)(EditorContainer);","import React from 'react';\nimport './StateBar.scss';\nimport {ImageData} from \"../../../store/labels/types\";\nimport {AppState} from \"../../../store\";\nimport {connect} from \"react-redux\";\nimport {LabelType} from \"../../../data/enums/LabelType\";\n\ninterface IProps {\n    imagesData: ImageData[];\n    activeLabelType: LabelType;\n}\n\nconst StateBar: React.FC<IProps> = ({imagesData, activeLabelType}) => {\n\n    const pointLabeledImages = imagesData.reduce((currentCount: number, currentImage: ImageData) => {\n        return currentCount + (currentImage.labelPoints.length > 0 ? 1 : 0);\n    }, 0);\n\n    const rectLabeledImages = imagesData.reduce((currentCount: number, currentImage: ImageData) => {\n        return currentCount + (currentImage.labelRects.length > 0 ? 1 : 0);\n    }, 0);\n\n    const polygonLabeledImages = imagesData.reduce((currentCount: number, currentImage: ImageData) => {\n        return currentCount + (currentImage.labelPolygons.length > 0 ? 1 : 0);\n    }, 0);\n\n    const lineLabeledImages = imagesData.reduce((currentCount: number, currentImage: ImageData) => {\n        return currentCount + (currentImage.labelLines.length > 0 ? 1 : 0);\n    }, 0);\n\n    const tagLabeledImages = imagesData.reduce((currentCount: number, currentImage: ImageData) => {\n        return currentCount + (currentImage.labelNameIds.length !== 0 ? 1 : 0);\n    }, 0);\n\n    const getProgress = () => {\n        switch (activeLabelType) {\n            case LabelType.POINT:\n                return (100 * pointLabeledImages) / imagesData.length;\n            case LabelType.RECT:\n                return (100 * rectLabeledImages) / imagesData.length;\n            case LabelType.POLYGON:\n                return (100 * polygonLabeledImages) / imagesData.length;\n            case LabelType.LINE:\n                return (100 * lineLabeledImages) / imagesData.length;\n            case LabelType.IMAGE_RECOGNITION:\n                return (100 * tagLabeledImages) / imagesData.length;\n            default:\n                return 0;\n        }\n    };\n\n    return (\n        <div className=\"StateBar\">\n            <div\n                style={{width: getProgress() + \"%\"}}\n                className=\"done\"\n            />\n        </div>\n    );\n};\n\nconst mapDispatchToProps = {};\n\nconst mapStateToProps = (state: AppState) => ({\n    imagesData: state.labels.imagesData,\n    activeLabelType: state.labels.activeLabelType\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(StateBar);","import React from 'react';\nimport './TextInput.scss';\n\ninterface IProps {\n    label?: string;\n    isPassword: boolean;\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => any;\n    onFocus?: (event: React.FocusEvent<HTMLInputElement>) => any;\n    inputStyle?: React.CSSProperties;\n    labelStyle?: React.CSSProperties;\n    barStyle?: React.CSSProperties;\n    value?: string;\n    onKeyUp?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n}\n\nconst TextInput = (props: IProps) => {\n\n    const {\n        label,\n        isPassword,\n        onChange,\n        onFocus,\n        inputStyle,\n        labelStyle,\n        barStyle,\n        value,\n        onKeyUp\n    } = props;\n\n    const getInputType = () => {\n        return isPassword ? 'password' : 'text';\n    };\n\n    return (\n        <div className='TextInput'>\n            <input\n                value={!!value ? value : undefined}\n                type={getInputType()}\n                style={inputStyle}\n                onChange={onChange ? onChange : undefined}\n                onFocus={onFocus ? onFocus : undefined}\n                onKeyUp={onKeyUp}\n            />\n            {!!label && <label\n                style={labelStyle}\n            >\n                {label}\n            </label>}\n            <div\n                className='Bar'\n                style={barStyle}\n            />\n        </div>\n    );\n};\n\nexport default TextInput;\n","import {updateActivePopupType} from '../../store/general/actionCreators';\nimport {PopupWindowType} from '../enums/PopupWindowType';\nimport {store} from '../../index';\n\nexport type DropDownMenuNode = {\n    name: string\n    description?: string\n    imageSrc: string\n    imageAlt: string\n    disabled: boolean\n    onClick?: () => void\n    children?: DropDownMenuNode[]\n}\n\nexport const DropDownMenuData: DropDownMenuNode[] = [\n    {\n        name: 'Actions',\n        imageSrc: '/ico/actions.png',\n        imageAlt: 'actions',\n        disabled: false,\n        children: [\n            {\n                name: 'Edit Labels',\n                description: 'Modify labels list',\n                imageSrc: '/ico/tags.png',\n                imageAlt: 'labels',\n                disabled: false,\n                onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.UPDATE_LABEL))\n            },\n            {\n                name: 'Import Images',\n                description: 'Load more images',\n                imageSrc: '/ico/camera.png',\n                imageAlt: 'images',\n                disabled: false,\n                onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.IMPORT_IMAGES))\n            },\n            {\n                name: 'Import Annotations',\n                description: 'Import annotations from file',\n                imageSrc: '/ico/import-labels.png',\n                imageAlt: 'import-labels',\n                disabled: false,\n                onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.IMPORT_ANNOTATIONS))\n            },\n            {\n                name: 'Export Annotations',\n                description: 'Export annotations to file',\n                imageSrc: '/ico/export-labels.png',\n                imageAlt: 'export-labels',\n                disabled: false,\n                onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.EXPORT_ANNOTATIONS))\n            },\n            {\n                name: 'Load AI Model',\n                description: 'Load our pre-trained annotation models',\n                imageSrc: '/ico/ai.png',\n                imageAlt: 'load-ai-model',\n                disabled: false,\n                onClick: () => store.dispatch(updateActivePopupType(PopupWindowType.LOAD_AI_MODEL))\n            }\n        ]\n    }\n]\n\n","import React, {useState} from 'react';\nimport classNames from 'classnames'\nimport './DropDownMenu.scss';\nimport {DropDownMenuData, DropDownMenuNode} from '../../../../data/info/DropDownMenuData';\nimport {EventType} from '../../../../data/enums/EventType';\nimport {updatePreventCustomCursorStatus} from '../../../../store/general/actionCreators';\nimport {AppState} from '../../../../store';\nimport {connect} from 'react-redux';\n\ninterface IProps {\n    updatePreventCustomCursorStatusAction: (preventCustomCursor: boolean) => any;\n}\n\nconst DropDownMenu: React.FC<IProps> = ({updatePreventCustomCursorStatusAction}) => {\n    const topAnchor = 35;\n\n    const [activeTabIdx, setActiveTabIdx] = useState(null);\n    const [activeDropDownAnchor, setDropDownAnchor] = useState(null);\n\n    const onTabClick = (tabIdx: number, event) => {\n        if (activeTabIdx === null) {\n            document.addEventListener(EventType.MOUSE_DOWN, onMouseDownBeyondDropDown);\n        }\n\n        if (activeTabIdx === tabIdx) {\n            setActiveTabIdx(null);\n            setDropDownAnchor(null);\n        } else {\n            setActiveTabIdx(tabIdx);\n            setDropDownAnchor({x: event.target.offsetLeft, y: topAnchor});\n        }\n    }\n\n    const onMouseEnterWindow = (event) => {\n        updatePreventCustomCursorStatusAction(true);\n    }\n\n    const onMouseLeaveWindow = (event) => {\n        updatePreventCustomCursorStatusAction(false);\n    }\n\n    const onMouseDownBeyondDropDown = (event) => {\n        if (event.target.classList.contains('DropDownMenuTab') || event.target.classList.contains('DropDownMenuContentOption')) {\n            return;\n        }\n        setActiveTabIdx(null);\n        document.removeEventListener(EventType.MOUSE_DOWN, onMouseDownBeyondDropDown);\n    }\n\n    const onMouseEnterTab = (tabIdx: number, event) => {\n        if (activeTabIdx !== null && activeTabIdx !== tabIdx) {\n            setActiveTabIdx(tabIdx);\n            setDropDownAnchor({x: event.target.offsetLeft, y: topAnchor});\n        }\n    }\n\n    const getDropDownMenuTabClassName = (tabIdx: number) => {\n        return classNames(\n            'DropDownMenuTab',\n            {'active': tabIdx === activeTabIdx}\n        );\n    };\n\n    const getDropDownMenuContentOption = (disabled: boolean) => {\n        return classNames(\n            'DropDownMenuContentOption',\n            {'active': !disabled}\n        );\n    }\n\n    const getDropDownContent = () => {\n        return DropDownMenuData.map((data: DropDownMenuNode, index: number) => getDropDownTab(data, index))\n    }\n\n    const wrapOnClick = (onClick?: () => void, disabled?: boolean): () => void => {\n        return () => {\n            if (!!disabled) return;\n            if (!!onClick) onClick();\n            setActiveTabIdx(null);\n            updatePreventCustomCursorStatusAction(false);\n            document.removeEventListener(EventType.MOUSE_DOWN, onMouseDownBeyondDropDown);\n        }\n    }\n\n    const getDropDownTab = (data: DropDownMenuNode, index: number) => {\n        return <div\n            className={getDropDownMenuTabClassName(index)}\n            key={index}\n            onClick={(event) => onTabClick(index, event)}\n            onMouseEnter={(event) => onMouseEnterTab(index, event)}\n        >\n            <img\n                draggable={false}\n                src={data.imageSrc}\n                alt={data.imageAlt}\n            />\n            {data.name}\n        </div>\n    }\n\n    const getDropDownWindow = (data: DropDownMenuNode) => {\n        if (activeTabIdx !== null) {\n            const style: React.CSSProperties = {\n                top: 35,\n                left: activeDropDownAnchor.x,\n                height: 40 * data.children.length + 10\n            }\n            return <div\n                className={'DropDownMenuContent'}\n                style={style}\n                onMouseEnter={onMouseEnterWindow}\n                onMouseLeave={onMouseLeaveWindow}\n            >\n                {data.children.map((element: DropDownMenuNode, index: number) => {\n                    return <div className={getDropDownMenuContentOption(element.disabled)}\n                        onClick={wrapOnClick(element.onClick, element.disabled)}\n                        key={index}\n                    >\n                        <div className='Marker'/>\n                        <img src={element.imageSrc} alt={element.imageAlt}/>\n                        {element.name}\n                    </div>})}\n            </div>\n        } else {\n            return null;\n        }\n    }\n\n    return(<div className='DropDownMenuWrapper'>\n        <>\n            {getDropDownContent()}\n            {getDropDownWindow(DropDownMenuData[activeTabIdx])}\n        </>\n    </div>)\n}\n\nconst mapDispatchToProps = {\n    updatePreventCustomCursorStatusAction: updatePreventCustomCursorStatus,\n};\n\nconst mapStateToProps = (state: AppState) => ({});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(DropDownMenu);\n","import React from 'react';\nimport './TopNavigationBar.scss';\nimport StateBar from '../StateBar/StateBar';\nimport {PopupWindowType} from '../../../data/enums/PopupWindowType';\nimport {AppState} from '../../../store';\nimport {connect} from 'react-redux';\nimport {updateActivePopupType, updateProjectData} from '../../../store/general/actionCreators';\nimport TextInput from '../../Common/TextInput/TextInput';\nimport {ImageButton} from '../../Common/ImageButton/ImageButton';\nimport {Settings} from '../../../settings/Settings';\nimport {ProjectData} from '../../../store/general/types';\nimport DropDownMenu from './DropDownMenu/DropDownMenu';\n\ninterface IProps {\n    updateActivePopupTypeAction: (activePopupType: PopupWindowType) => any;\n    updateProjectDataAction: (projectData: ProjectData) => any;\n    projectData: ProjectData;\n}\n\nconst TopNavigationBar: React.FC<IProps> = (props) => {\n    const onFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n        event.target.setSelectionRange(0, event.target.value.length);\n    };\n\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value\n            .toLowerCase()\n            .replace(' ', '-');\n\n        props.updateProjectDataAction({\n            ...props.projectData,\n            name: value\n        })\n    };\n\n    const closePopup = () => props.updateActivePopupTypeAction(PopupWindowType.EXIT_PROJECT)\n\n    return (\n        <div className='TopNavigationBar'>\n            <StateBar/>\n            <div className='TopNavigationBarWrapper'>\n                <div className='NavigationBarGroupWrapper'>\n                    <DropDownMenu/>\n                </div>\n                <div className='NavigationBarGroupWrapper middle'>\n                    <div className='ProjectName'>Project Name:</div>\n                    <TextInput\n                        isPassword={false}\n                        value={props.projectData.name}\n                        onChange={onChange}\n                        onFocus={onFocus}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst mapDispatchToProps = {\n    updateActivePopupTypeAction: updateActivePopupType,\n    updateProjectDataAction: updateProjectData\n};\n\nconst mapStateToProps = (state: AppState) => ({\n    projectData: state.general.projectData\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TopNavigationBar);\n","import React from 'react';\nimport './EditorView.scss';\nimport EditorContainer from './EditorContainer/EditorContainer';\nimport {PopupWindowType} from '../../data/enums/PopupWindowType';\nimport {AppState} from '../../store';\nimport {connect} from 'react-redux';\nimport classNames from 'classnames';\nimport TopNavigationBar from './TopNavigationBar/TopNavigationBar';\n\ninterface IProps {\n    activePopupType: PopupWindowType;\n}\n\nconst EditorView: React.FC<IProps> = ({activePopupType}) => {\n\n    const getClassName = () => {\n        return classNames(\n            'EditorView',\n            {\n                'withPopup': !!activePopupType\n            }\n        );\n    };\n\n    return (\n        <div\n            className={getClassName()}\n            draggable={false}\n        >\n            <TopNavigationBar/>\n            <EditorContainer/>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n    activePopupType: state.general.activePopupType\n});\n\nexport default connect(\n    mapStateToProps\n)(EditorView);\n","import * as React from 'react';\nimport './TextButton.scss';\nimport classNames from 'classnames';\n\ninterface IProps {\n    key?:string;\n    label:string;\n    onClick?:() => any;\n    style?:React.CSSProperties;\n    isActive?:boolean;\n    isDisabled?:boolean;\n    externalClassName?:string;\n}\n\nexport const TextButton = (props:IProps) => {\n    const { key, label, onClick, style, isActive, isDisabled, externalClassName} = props;\n\n    const getClassName = () => {\n        return classNames(\n            'TextButton',\n            externalClassName,\n            {\n                'active': isActive,\n                'disabled': isDisabled\n            }\n        );\n    };\n\n    const onClickHandler = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        event.stopPropagation();\n        if (onClick) {\n            onClick();\n        }\n    };\n\n    return(\n        <div\n            className={getClassName()}\n            onClick={onClickHandler}\n            key={key}\n            style={style}\n        >\n            {label}\n        </div>\n    )\n};\n","import React, {useEffect, useState} from 'react'\nimport './GenericYesNoPopup.scss'\nimport {TextButton} from \"../../Common/TextButton/TextButton\";\nimport {ContextManager} from \"../../../logic/context/ContextManager\";\nimport {ContextType} from \"../../../data/enums/ContextType\";\n\ninterface IProps {\n    title: string;\n    renderContent: () => any;\n    acceptLabel?: string;\n    onAccept?: () => any;\n    skipAcceptButton?: boolean;\n    disableAcceptButton?: boolean;\n    rejectLabel?: string;\n    onReject?: () => any;\n    skipRejectButton?: boolean;\n    disableRejectButton?: boolean;\n}\n\nexport const GenericYesNoPopup: React.FC<IProps> = (\n    {\n        title,\n        renderContent,\n        acceptLabel,\n        onAccept,\n        skipAcceptButton,\n        disableAcceptButton,\n        rejectLabel,\n        onReject,\n        skipRejectButton,\n        disableRejectButton\n    }) => {\n    \n    const [status, setMountStatus] = useState(false);\n    useEffect(() => {\n        if (!status) {\n            ContextManager.switchCtx(ContextType.POPUP);\n            setMountStatus(true);\n        }\n    }, [status]);\n\n    return (\n        <div className=\"GenericYesNoPopup\">\n            <div className=\"Header\">\n                {title}\n            </div>\n            <div className=\"Content\">\n                {renderContent()}\n            </div>\n            <div className=\"Footer\">\n                {!skipAcceptButton && <TextButton\n                    label={!!acceptLabel ? acceptLabel : \"YES\"}\n                    onClick={onAccept}\n                    externalClassName={\"accept\"}\n                    isDisabled={disableAcceptButton}\n                />}\n                {!skipRejectButton && <TextButton\n                    label={!!rejectLabel ? rejectLabel : \"NO, THANKS\"}\n                    onClick={onReject}\n                    externalClassName={\"reject\"}\n                    isDisabled={disableRejectButton}\n                />}\n            </div>\n        </div>\n    )\n};","export enum NotificationType {\n    ERROR = 'ERROR',\n    SUCCESS = 'SUCCESS',\n    MESSAGE = 'MESSAGE',\n    WARNING = 'WARNING'\n}\n","export class YOLOAnnotationsLoadingError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"YOLOAnnotationsLoadingError\";\n    }\n}\n\nexport class YOLOLabelsReadingError extends YOLOAnnotationsLoadingError {\n    constructor() {\n        super(\"Unexpected error occurred during reading label names from labels.txt file\");\n        this.name = \"YOLOLabelsLoadingError\";\n    }\n}\n\nexport class NoLabelNamesFileProvidedError extends YOLOAnnotationsLoadingError {\n    constructor() {\n        super(\"For YOLO labels to be loaded correctly, labels.txt file is required\");\n        this.name = \"NoLabelNamesFileProvidedError\";\n    }\n}\n\nexport class LabelNamesNotUniqueError extends YOLOAnnotationsLoadingError {\n    constructor() {\n        super(\"Label names listed in labels.txt file should be unique\");\n        this.name = \"LabelNamesNotUniqueError\";\n    }\n}\n\nexport class AnnotationsParsingError extends YOLOAnnotationsLoadingError {\n    constructor(imageName: string) {\n        super(`Unexpected error occurred during parsing of ${imageName} annotations file`);\n        this.name = \"AnnotationsParsingError\";\n    }\n}","import {LabelName, LabelRect} from \"../../../store/labels/types\";\nimport {LabelUtil} from \"../../../utils/LabelUtil\";\nimport {AnnotationsParsingError, LabelNamesNotUniqueError} from \"./YOLOErrors\";\nimport {ISize} from \"../../../interfaces/ISize\";\nimport {uniq} from \"lodash\";\n\nexport class YOLOUtils {\n    public static parseLabelsNamesFromString(content: string): LabelName[] {\n        const labelNames: string[] = content\n            .split(/[\\r\\n]/)\n            .filter(Boolean)\n            .map((name: string) => name.replace(/\\s/g, \"\"))\n\n        if (uniq(labelNames).length !== labelNames.length) {\n            throw new LabelNamesNotUniqueError()\n        }\n\n        return labelNames\n            .map((name: string) => LabelUtil.createLabelName(name))\n    }\n\n    public static loadLabelsList(fileData: File, onSuccess: (labels: LabelName[]) => any, onFailure: () => any) {\n        const reader = new FileReader();\n        reader.onloadend = function (evt: any) {\n            const content: string = evt.target.result;\n            const labelNames = YOLOUtils.parseLabelsNamesFromString(content);\n            onSuccess(labelNames);\n        };\n        reader.onerror = () => onFailure();\n        reader.readAsText(fileData);\n    }\n\n    public static parseYOLOAnnotationsFromString(\n        rawAnnotations: string,\n        labelNames: LabelName[],\n        imageSize: ISize,\n        imageName: string\n    ): LabelRect[] {\n        return rawAnnotations\n            .split(/[\\r\\n]/)\n            .filter(Boolean)\n            .map((rawAnnotation: string) => YOLOUtils.parseYOLOAnnotationFromString(\n                rawAnnotation, labelNames, imageSize, imageName\n            ))\n    }\n\n    public static parseYOLOAnnotationFromString(\n        rawAnnotation: string,\n        labelNames: LabelName[],\n        imageSize: ISize,\n        imageName: string\n    ): LabelRect {\n        const components = rawAnnotation.split(\" \");\n        if (!YOLOUtils.validateYOLOAnnotationComponents(components, labelNames.length)) {\n            throw new AnnotationsParsingError(imageName);\n        }\n        const labelIndex: number = parseInt(components[0]);\n        const labelId: string = labelNames[labelIndex].id;\n        const rectX: number = parseFloat(components[1]);\n        const rectY: number = parseFloat(components[2]);\n        const rectWidth: number = parseFloat(components[3]);\n        const rectHeight: number = parseFloat(components[4]);\n        const rect = {\n            x: (rectX - rectWidth /2) * imageSize.width,\n            y: (rectY - rectHeight /2) * imageSize.height,\n            width: rectWidth * imageSize.width,\n            height: rectHeight * imageSize.height\n        }\n        return LabelUtil.createLabelRect(labelId, rect);\n    }\n\n    public static validateYOLOAnnotationComponents(components: string[], labelNamesCount: number): boolean {\n        const validateCoordinateValue = (rawValue: string): boolean => {\n            const floatValue: number = Number(rawValue);\n            return !isNaN(floatValue) && 0.0 <= floatValue && floatValue <= 1.0;\n        }\n        const validateLabelIdx = (rawValue: string): boolean => {\n            const intValue: number = parseInt(rawValue);\n            return !isNaN(intValue) && 0 <= intValue && intValue < labelNamesCount;\n        }\n\n        return [\n            components.length === 5,\n            validateLabelIdx(components[0]),\n            validateCoordinateValue(components[1]),\n            validateCoordinateValue(components[2]),\n            validateCoordinateValue(components[3]),\n            validateCoordinateValue(components[4])\n        ].every(Boolean)\n    }\n}","import React, {useState} from 'react'\nimport './LoadLabelNamesPopup.scss'\nimport {AppState} from \"../../../store\";\nimport {connect} from \"react-redux\";\nimport {updateLabelNames} from \"../../../store/labels/actionCreators\";\nimport {GenericYesNoPopup} from \"../GenericYesNoPopup/GenericYesNoPopup\";\nimport {PopupWindowType} from \"../../../data/enums/PopupWindowType\";\nimport {updateActivePopupType} from \"../../../store/general/actionCreators\";\nimport {useDropzone} from \"react-dropzone\";\nimport {AcceptedFileType} from \"../../../data/enums/AcceptedFileType\";\nimport {LabelName} from \"../../../store/labels/types\";\nimport {YOLOUtils} from \"../../../logic/import/yolo/YOLOUtils\";\n\ninterface IProps {\n    updateActivePopupType: (activePopupType: PopupWindowType) => any;\n    updateLabels: (labels: LabelName[]) => any;\n}\n\nconst LoadLabelNamesPopup: React.FC<IProps> = ({updateActivePopupType, updateLabels}) => {\n    const [labelsList, setLabelsList] = useState([]);\n    const [invalidFileLoadedStatus, setInvalidFileLoadedStatus] = useState(false);\n\n    const {acceptedFiles, getRootProps, getInputProps} = useDropzone({\n        accept: AcceptedFileType.TEXT,\n        multiple: false,\n        onDrop: (acceptedFiles) => {\n            if (acceptedFiles.length === 1) {\n                YOLOUtils.loadLabelsList(acceptedFiles[0], onSuccess, onFailure);\n            }\n        }\n    });\n\n    const onSuccess = (labelsList: LabelName[]) => {\n        setLabelsList(labelsList);\n        setInvalidFileLoadedStatus(false);\n    };\n\n    const onFailure = () => {\n        setInvalidFileLoadedStatus(true);\n    };\n\n    const onAccept = () => {\n        if (labelsList.length > 0) {\n            updateLabels(labelsList);\n        }\n    };\n\n    const onReject = () => {\n        updateActivePopupType(PopupWindowType.INSERT_LABEL_NAMES);\n    };\n\n    const getDropZoneContent = () => {\n        if (invalidFileLoadedStatus)\n            return <>\n                <input {...getInputProps()} />\n                <img\n                    draggable={false}\n                    alt={\"upload\"}\n                    src={\"/ico/box-opened.png\"}\n                />\n                <p className=\"extraBold\">Loading of labels file was unsuccessful</p>\n                <p className=\"extraBold\">Try again</p>\n            </>;\n        else if (acceptedFiles.length === 0)\n            return <>\n                <input {...getInputProps()} />\n                <img\n                    draggable={false}\n                    alt={\"upload\"}\n                    src={\"/ico/box-opened.png\"}\n                />\n                <p className=\"extraBold\">Drop labels file</p>\n                <p>or</p>\n                <p className=\"extraBold\">Click here to select it</p>\n            </>;\n        else if (labelsList.length === 1)\n            return <>\n                <img\n                    draggable={false}\n                    alt={\"uploaded\"}\n                    src={\"/ico/box-closed.png\"}\n                />\n                <p className=\"extraBold\">only 1 label found</p>\n            </>;\n        else\n            return <>\n                <img\n                    draggable={false}\n                    alt={\"uploaded\"}\n                    src={\"/ico/box-closed.png\"}\n                />\n                <p className=\"extraBold\">{labelsList.length} labels found</p>\n            </>;\n    };\n\n    const renderContent = () => {\n        return(<div className=\"LoadLabelsPopupContent\">\n            <div className=\"Message\">\n                Load a text file with a list of labels you are planning to use. The names of\n                each label should be separated by new line. If you don't have a prepared file, no problem. You can\n                create your own list now.\n            </div>\n            <div {...getRootProps({className: 'DropZone'})}>\n                {getDropZoneContent()}\n            </div>\n        </div>);\n    };\n\n    return(\n        <GenericYesNoPopup\n            title={\"Load file with labels description\"}\n            renderContent={renderContent}\n            acceptLabel={\"Start project\"}\n            onAccept={onAccept}\n            disableAcceptButton={labelsList.length === 0}\n            rejectLabel={\"Create labels list\"}\n            onReject={onReject}\n        />\n    );\n};\n\nconst mapDispatchToProps = {\n    updateActivePopupType,\n    updateLabels: updateLabelNames\n};\n\nconst mapStateToProps = (state: AppState) => ({});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LoadLabelNamesPopup);","import React from 'react';\nimport './ColorSelectorView.scss'\n\ninterface IProps {\n    color: string;\n    onClick: () => any;\n}\n\nexport const ColorSelectorView: React.FC<IProps> = ({color, onClick}) => {\n    return <div\n        className={'ColorSelectorView'}\n        style={{\n            backgroundColor: color\n        }}\n        onClick={onClick}\n    >\n        <img\n            draggable={false}\n            alt={'refresh'}\n            src={'/ico/refresh.png'}\n        />\n    </div>\n}\n","import {INotification} from '../store/notifications/types';\nimport {v4 as uuidv4} from 'uuid';\nimport {NotificationType} from '../data/enums/NotificationType';\nimport {NotificationContent} from \"../data/info/NotificationsData\";\n\nexport class NotificationUtil {\n    public static createErrorNotification(content: NotificationContent): INotification {\n        return {\n            id: uuidv4(),\n            type: NotificationType.ERROR,\n            header: content.header,\n            description: content.description\n        }\n    }\n\n    public static createMessageNotification(content: NotificationContent): INotification {\n        return {\n            id: uuidv4(),\n            type: NotificationType.MESSAGE,\n            header: content.header,\n            description: content.description\n        }\n    }\n\n    public static createWarningNotification(content: NotificationContent): INotification {\n        return {\n            id: uuidv4(),\n            type: NotificationType.WARNING,\n            header: content.header,\n            description: content.description\n        }\n    }\n}\n","export enum Notification {\n    EMPTY_LABEL_NAME_ERROR = 0,\n    NON_UNIQUE_LABEL_NAMES_ERROR = 1\n}\n","import {Notification} from '../enums/Notification';\n\nexport type NotificationContent = {\n    header: string;\n    description: string;\n}\n\nexport type ExportFormatDataMap = Record<Notification, NotificationContent>;\n\nexport const NotificationsDataMap = {\n    [Notification.EMPTY_LABEL_NAME_ERROR]: {\n        header: 'Empty label name',\n        description: \"Looks like you didn't assign name to one of your labels. Unfortunately it is mandatory for \" +\n            'every label to have unique name value. Insert correct name or delete empty label and try again.'\n    },\n    [Notification.NON_UNIQUE_LABEL_NAMES_ERROR]: {\n        header: 'Non unique label names',\n        description: 'Looks like not all your label names are unique. Unique names are necessary to guarantee correct' +\n            ' data export when you complete your work. Make your names unique and try again.'\n    }\n}\n","export enum AIModel {\n    OBJECT_DETECTION = \"OBJECT_DETECTION\",\n    POSE_DETECTION = \"POSE_DETECTION\"\n}","import React, {useState} from 'react'\nimport './InsertLabelNamesPopup.scss'\nimport {GenericYesNoPopup} from '../GenericYesNoPopup/GenericYesNoPopup';\nimport {PopupWindowType} from '../../../data/enums/PopupWindowType';\nimport {updateLabelNames} from '../../../store/labels/actionCreators';\nimport {updateActivePopupType, updatePerClassColorationStatus} from '../../../store/general/actionCreators';\nimport {AppState} from '../../../store';\nimport {connect} from 'react-redux';\nimport Scrollbars from 'react-custom-scrollbars';\nimport {ImageButton} from '../../Common/ImageButton/ImageButton';\nimport {LabelName} from '../../../store/labels/types';\nimport {LabelUtil} from '../../../utils/LabelUtil';\nimport {LabelsSelector} from '../../../store/selectors/LabelsSelector';\nimport {LabelActions} from '../../../logic/actions/LabelActions';\nimport {ColorSelectorView} from './ColorSelectorView/ColorSelectorView';\nimport TextField from '@material-ui/core/TextField';\nimport {Settings} from '../../../settings/Settings';\nimport {withStyles} from '@material-ui/core';\nimport {reject, sample, filter, uniq} from 'lodash';\nimport {ProjectType} from '../../../data/enums/ProjectType';\nimport {submitNewNotification} from '../../../store/notifications/actionCreators';\nimport {INotification} from '../../../store/notifications/types';\nimport {NotificationUtil} from '../../../utils/NotificationUtil';\nimport {NotificationsDataMap} from '../../../data/info/NotificationsData';\nimport {Notification} from '../../../data/enums/Notification';\n\nconst StyledTextField = withStyles({\n    root: {\n        '& .MuiInputBase-root': {\n            color: 'white',\n        },\n        '& label': {\n            color: 'white',\n        },\n        '& .MuiInput-underline:before': {\n            borderBottomColor: 'white',\n        },\n        '& .MuiInput-underline:hover:before': {\n            borderBottomColor: 'white',\n        },\n        '& label.Mui-focused': {\n            color: Settings.SECONDARY_COLOR,\n        },\n        '& .MuiInput-underline:after': {\n            borderBottomColor: Settings.SECONDARY_COLOR,\n        }\n    },\n})(TextField);\n\ninterface IProps {\n    updateActivePopupTypeAction: (activePopupType: PopupWindowType) => any;\n    updateLabelNamesAction: (labels: LabelName[]) => any;\n    updatePerClassColorationStatusAction: (updatePerClassColoration: boolean) => any;\n    submitNewNotificationAction: (notification: INotification) => any;\n    isUpdate: boolean;\n    projectType: ProjectType;\n    enablePerClassColoration: boolean;\n}\n\nconst InsertLabelNamesPopup: React.FC<IProps> = (\n    {\n        updateActivePopupTypeAction,\n        updateLabelNamesAction,\n        updatePerClassColorationStatusAction,\n        submitNewNotificationAction,\n        isUpdate,\n        projectType,\n        enablePerClassColoration\n    }) => {\n    const [labelNames, setLabelNames] = useState(LabelsSelector.getLabelNames());\n\n    const validateEmptyLabelNames = (): boolean => {\n        const emptyLabelNames = filter(labelNames, (labelName: LabelName) => labelName.name === '')\n        return emptyLabelNames.length === 0\n    }\n\n    const validateNonUniqueLabelNames = (): boolean => {\n        const uniqueLabelNames = uniq(labelNames.map((labelName: LabelName) => labelName.name))\n        return uniqueLabelNames.length === labelNames.length\n    }\n\n    const callbackWithLabelNamesValidation = (callback: () => any): () => any => {\n        return () => {\n            if (!validateEmptyLabelNames()) {\n                submitNewNotificationAction(NotificationUtil\n                    .createErrorNotification(NotificationsDataMap[Notification.EMPTY_LABEL_NAME_ERROR]))\n                return\n            }\n            if (validateNonUniqueLabelNames()) {\n                callback()\n            } else {\n                submitNewNotificationAction(NotificationUtil\n                    .createErrorNotification(NotificationsDataMap[Notification.NON_UNIQUE_LABEL_NAMES_ERROR]))\n            }\n        }\n    }\n\n    const addLabelNameCallback = () => {\n        const newLabelNames = [\n            ...labelNames,\n            LabelUtil.createLabelName('')\n        ]\n        setLabelNames(newLabelNames);\n    };\n\n    const safeAddLabelNameCallback = () => callbackWithLabelNamesValidation(addLabelNameCallback)()\n\n    const deleteLabelNameCallback = (id: string) => {\n        const newLabelNames = reject(labelNames, {id});\n        setLabelNames(newLabelNames);\n    };\n\n    const togglePerClassColorationCallback = () => {\n        updatePerClassColorationStatusAction(!enablePerClassColoration)\n    }\n\n    const changeLabelNameColorCallback = (id: string) => {\n        const newLabelNames = labelNames.map((labelName: LabelName) => {\n            return labelName.id === id ? {...labelName, color: sample(Settings.LABEL_COLORS_PALETTE)} : labelName\n        });\n        setLabelNames(newLabelNames);\n    }\n\n    const onKeyUpCallback = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') {\n            safeAddLabelNameCallback()\n        }\n    }\n\n    const labelInputs = labelNames.map((labelName: LabelName) => {\n        const onChangeCallback = (event: React.ChangeEvent<HTMLInputElement>) =>\n            onChange(labelName.id, event.target.value);\n        const onDeleteCallback = () => deleteLabelNameCallback(labelName.id);\n        const onChangeColorCallback = () => changeLabelNameColorCallback(labelName.id);\n        return <div className='LabelEntry' key={labelName.id}>\n            <StyledTextField\n                id={'key'}\n                autoComplete={'off'}\n                autoFocus={true}\n                type={'text'}\n                margin={'dense'}\n                label={'Insert label'}\n                onKeyUp={onKeyUpCallback}\n                value={labelName.name}\n                onChange={onChangeCallback}\n                style = {{width: 280}}\n                InputLabelProps={{\n                    shrink: true,\n                }}\n            />\n            {projectType === ProjectType.OBJECT_DETECTION && enablePerClassColoration && <ColorSelectorView\n                color={labelName.color}\n                onClick={onChangeColorCallback}\n            />}\n            <ImageButton\n                image={'/ico/trash.png'}\n                imageAlt={'remove_label'}\n                buttonSize={{ width: 30, height: 30 }}\n                onClick={onDeleteCallback}\n            />\n        </div>\n    });\n\n    const onChange = (id: string, value: string) => {\n        const newLabelNames = labelNames.map((labelName: LabelName) => {\n            return labelName.id === id ? {\n                ...labelName, name: value\n            } : labelName\n        })\n        setLabelNames(newLabelNames);\n    };\n\n    const onCreateAcceptCallback = () => {\n        const nonEmptyLabelNames: LabelName[] = reject(labelNames,\n            (labelName: LabelName) => labelName.name.length === 0)\n        if (labelNames.length > 0) {\n            updateLabelNamesAction(nonEmptyLabelNames);\n        }\n        updateActivePopupTypeAction(null);\n    };\n\n    const safeOnCreateAcceptCallback = () => callbackWithLabelNamesValidation(onCreateAcceptCallback)();\n\n    const onUpdateAcceptCallback = () => {\n        const nonEmptyLabelNames: LabelName[] = reject(labelNames,\n            (labelName: LabelName) => labelName.name.length === 0)\n        const missingIds: string[] = LabelUtil.labelNamesIdsDiff(LabelsSelector.getLabelNames(), nonEmptyLabelNames);\n        LabelActions.removeLabelNames(missingIds);\n        updateLabelNamesAction(nonEmptyLabelNames);\n        updateActivePopupTypeAction(null);\n    };\n\n    const safeOnUpdateAcceptCallback = () => callbackWithLabelNamesValidation(onUpdateAcceptCallback)();\n\n    const onCreateRejectCallback = () => {\n        updateActivePopupTypeAction(PopupWindowType.LOAD_LABEL_NAMES);\n    };\n\n    const onUpdateRejectCallback = () => {\n        updateActivePopupTypeAction(null);\n    };\n\n    const renderContent = () => {\n        return (<div className='InsertLabelNamesPopup'>\n            <div className='LeftContainer'>\n                <ImageButton\n                    image={'/ico/plus.png'}\n                    imageAlt={'plus'}\n                    buttonSize={{ width: 40, height: 40 }}\n                    padding={25}\n                    onClick={safeAddLabelNameCallback}\n                    externalClassName={'monochrome'}\n                />\n                {labelNames.length > 0 && <ImageButton\n                    image={enablePerClassColoration ? '/ico/colors-on.png' : '/ico/colors-off.png'}\n                    imageAlt={'per-class-coloration'}\n                    buttonSize={{ width: 40, height: 40 }}\n                    padding={15}\n                    onClick={togglePerClassColorationCallback}\n                    isActive={enablePerClassColoration}\n                    externalClassName={enablePerClassColoration ? '' : 'monochrome'}\n                />}\n            </div>\n            <div className='RightContainer'>\n                <div className='Message'>\n                    {\n                        isUpdate ?\n                            'You can now edit the label names you use to describe the objects in the photos. Use the ' +\n                            '+ button to add a new empty text field.' :\n                            'Before you start, you can create a list of labels you plan to assign to objects in your ' +\n                            'project. You can also choose to skip that part for now and define label names as you go.'\n                    }\n                </div>\n                <div className='LabelsContainer'>\n                    {Object.keys(labelNames).length !== 0 ? <Scrollbars>\n                        <div\n                            className='InsertLabelNamesPopupContent'\n                        >\n                            {labelInputs}\n                        </div>\n                    </Scrollbars> :\n                        <div\n                            className='EmptyList'\n                            onClick={addLabelNameCallback}\n                        >\n                            <img\n                                draggable={false}\n                                alt={'upload'}\n                                src={'/ico/type-writer.png'}\n                            />\n                            <p className='extraBold'>Your label list is empty</p>\n                        </div>}\n                </div>\n            </div>\n        </div>);\n    };\n\n    return (\n        <GenericYesNoPopup\n            title={isUpdate ? 'Edit labels' : 'Create labels'}\n            renderContent={renderContent}\n            acceptLabel={isUpdate ? 'Accept' : 'Start project'}\n            onAccept={isUpdate ? safeOnUpdateAcceptCallback : safeOnCreateAcceptCallback}\n            rejectLabel={isUpdate ? 'Cancel' : 'Load labels from file'}\n            onReject={isUpdate ? onUpdateRejectCallback : onCreateRejectCallback}\n        />)\n};\n\nconst mapDispatchToProps = {\n    updateActivePopupTypeAction: updateActivePopupType,\n    updateLabelNamesAction: updateLabelNames,\n    updatePerClassColorationStatusAction: updatePerClassColorationStatus,\n    submitNewNotificationAction: submitNewNotification\n};\n\nconst mapStateToProps = (state: AppState) => ({\n    projectType: state.general.projectData.type,\n    enablePerClassColoration: state.general.enablePerClassColoration\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(InsertLabelNamesPopup);\n","import {INotification, NotificationsActionType} from './types';\nimport {Action} from '../Actions';\n\nexport function submitNewNotification(notification: INotification): NotificationsActionType {\n    return {\n        type: Action.SUBMIT_NEW_NOTIFICATION,\n        payload: {\n            notification,\n        },\n    };\n}\n\n\nexport function deleteNotificationById(id: string): NotificationsActionType {\n    return {\n        type: Action.DELETE_NOTIFICATION_BY_ID,\n        payload: {\n            id,\n        },\n    };\n}\n","import React from 'react'\nimport './ExitProjectPopup.scss'\nimport {GenericYesNoPopup} from \"../GenericYesNoPopup/GenericYesNoPopup\";\nimport {\n    updateActiveImageIndex,\n    updateActiveLabelNameId,\n    updateFirstLabelCreatedFlag,\n    updateImageData,\n    updateLabelNames\n} from \"../../../store/labels/actionCreators\";\nimport {AppState} from \"../../../store\";\nimport {connect} from \"react-redux\";\nimport {ImageData, LabelName} from \"../../../store/labels/types\";\nimport {PopupActions} from \"../../../logic/actions/PopupActions\";\nimport {ProjectData} from \"../../../store/general/types\";\nimport {updateProjectData} from \"../../../store/general/actionCreators\";\n\ninterface IProps {\n    updateActiveImageIndex: (activeImageIndex: number) => any;\n    updateActiveLabelNameId: (activeLabelId: string) => any;\n    updateLabelNames: (labelNames: LabelName[]) => any;\n    updateImageData: (imageData: ImageData[]) => any;\n    updateFirstLabelCreatedFlag: (firstLabelCreatedFlag: boolean) => any;\n    updateProjectData: (projectData: ProjectData) => any;\n}\n\nconst ExitProjectPopup: React.FC<IProps> = (props) => {\n    const {\n        updateActiveLabelNameId,\n        updateLabelNames,\n        updateActiveImageIndex,\n        updateImageData,\n        updateFirstLabelCreatedFlag,\n        updateProjectData\n    } = props;\n\n    const renderContent = () => {\n        return(\n            <div className=\"ExitProjectPopupContent\">\n                <div className=\"Message\">\n                    Are you sure you want to leave the editor? You will permanently lose all your progress.\n                </div>\n            </div>\n        )\n    };\n\n    const onAccept = () => {\n        updateActiveLabelNameId(null);\n        updateLabelNames([]);\n        updateProjectData({type: null, name: \"my-project-name\"});\n        updateActiveImageIndex(null);\n        updateImageData([]);\n        updateFirstLabelCreatedFlag(false);\n        PopupActions.close();\n    };\n\n    const onReject = () => {\n        PopupActions.close();\n    };\n\n    return(\n        <GenericYesNoPopup\n            title={\"Exit project\"}\n            renderContent={renderContent}\n            acceptLabel={\"Exit\"}\n            onAccept={onAccept}\n            rejectLabel={\"Back\"}\n            onReject={onReject}\n        />)\n};\n\nconst mapDispatchToProps = {\n    updateActiveLabelNameId,\n    updateLabelNames,\n    updateProjectData,\n    updateActiveImageIndex,\n    updateImageData,\n    updateFirstLabelCreatedFlag\n};\n\nconst mapStateToProps = (state: AppState) => ({});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ExitProjectPopup);","import {ImageData} from '../store/labels/types';\nimport { v4 as uuidv4 } from 'uuid';\nimport {FileUtil} from './FileUtil';\nimport {ImageRepository} from '../logic/imageRepository/ImageRepository';\n\nexport class ImageDataUtil {\n    public static createImageDataFromFileData(fileData: File): ImageData {\n        return {\n            id: uuidv4(),\n            fileData,\n            loadStatus: false,\n            labelRects: [],\n            labelPoints: [],\n            labelLines: [],\n            labelPolygons: [],\n            labelNameIds: [],\n            isVisitedByObjectDetector: false,\n            isVisitedByPoseDetector: false\n        }\n    }\n\n    public static cleanAnnotations(item: ImageData): ImageData {\n        return {\n            ...item,\n            labelRects: [],\n            labelPoints: [],\n            labelLines: [],\n            labelPolygons: [],\n            labelNameIds: []\n        }\n    }\n\n    public static arrange(items: ImageData[], idArrangement: string[]): ImageData[] {\n        return items.sort((a: ImageData, b: ImageData) => {\n            return idArrangement.indexOf(a.id) - idArrangement.indexOf(b.id)\n        })\n    }\n\n    public static loadMissingImages(images: ImageData[]): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const missingImages = images.filter((i: ImageData) => !i.loadStatus);\n            const missingImagesFiles = missingImages.map((i: ImageData) => i.fileData);\n            FileUtil.loadImages(missingImagesFiles)\n                .then((htmlImageElements:HTMLImageElement[]) => {\n                    ImageRepository.storeImages(missingImages.map((i: ImageData) => i.id), htmlImageElements);\n                    resolve()\n                })\n                .catch((error: Error) => reject(error));\n        });\n    }\n}\n","import React from 'react'\nimport './LoadMoreImagesPopup.scss'\nimport {AppState} from \"../../../store\";\nimport {connect} from \"react-redux\";\nimport {addImageData} from \"../../../store/labels/actionCreators\";\nimport {GenericYesNoPopup} from \"../GenericYesNoPopup/GenericYesNoPopup\";\nimport {useDropzone} from \"react-dropzone\";\nimport {ImageData} from \"../../../store/labels/types\";\nimport {AcceptedFileType} from \"../../../data/enums/AcceptedFileType\";\nimport {PopupActions} from \"../../../logic/actions/PopupActions\";\nimport {ImageDataUtil} from \"../../../utils/ImageDataUtil\";\n\ninterface IProps {\n    addImageData: (imageData: ImageData[]) => any;\n}\n\nconst LoadMoreImagesPopup: React.FC<IProps> = ({addImageData}) => {\n    const {acceptedFiles, getRootProps, getInputProps} = useDropzone({\n        accept: AcceptedFileType.IMAGE\n    });\n\n    const onAccept = () => {\n        if (acceptedFiles.length > 0) {\n            addImageData(acceptedFiles.map((fileData:File) => ImageDataUtil.createImageDataFromFileData(fileData)));\n            PopupActions.close();\n        }\n    };\n\n    const onReject = () => {\n        PopupActions.close();\n    };\n\n    const getDropZoneContent = () => {\n        if (acceptedFiles.length === 0)\n            return <>\n                <input {...getInputProps()} />\n                <img\n                    draggable={false}\n                    alt={\"upload\"}\n                    src={\"/ico/box-opened.png\"}\n                />\n                <p className=\"extraBold\">Add new images</p>\n                <p>or</p>\n                <p className=\"extraBold\">Click here to select them</p>\n            </>;\n        else if (acceptedFiles.length === 1)\n            return <>\n                <img\n                    draggable={false}\n                    alt={\"uploaded\"}\n                    src={\"/ico/box-closed.png\"}\n                />\n                <p className=\"extraBold\">1 new image loaded</p>\n            </>;\n        else\n            return <>\n                <img\n                    draggable={false}\n                    key={1}\n                    alt={\"uploaded\"}\n                    src={\"/ico/box-closed.png\"}\n                />\n                <p key={2} className=\"extraBold\">{acceptedFiles.length} new images loaded</p>\n            </>;\n    };\n\n    const renderContent = () => {\n        return(<div className=\"LoadMoreImagesPopupContent\">\n            <div {...getRootProps({className: 'DropZone'})}>\n                {getDropZoneContent()}\n            </div>\n        </div>);\n    };\n\n    return(\n        <GenericYesNoPopup\n            title={\"Load more images\"}\n            renderContent={renderContent}\n            acceptLabel={\"Load\"}\n            disableAcceptButton={acceptedFiles.length < 1}\n            onAccept={onAccept}\n            rejectLabel={\"Cancel\"}\n            onReject={onReject}\n        />\n    );\n};\n\nconst mapDispatchToProps = {\n    addImageData\n};\n\nconst mapStateToProps = (state: AppState) => ({});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LoadMoreImagesPopup);","import React, { useState } from \"react\";\nimport { PopupActions } from \"../../../logic/actions/PopupActions\";\nimport { GenericYesNoPopup } from \"../GenericYesNoPopup/GenericYesNoPopup\";\nimport { ObjectDetector } from \"../../../ai/ObjectDetector\";\nimport './LoadModelPopup.scss'\nimport { ClipLoader } from \"react-spinners\";\nimport { AIModel } from \"../../../data/enums/AIModel\";\nimport { PoseDetector } from \"../../../ai/PoseDetector\";\nimport { findLast } from \"lodash\";\nimport { CSSHelper } from \"../../../logic/helpers/CSSHelper\";\n\ninterface SelectableModel {\n    model: AIModel,\n    name: string,\n    flag: boolean\n}\n\nconst models: SelectableModel[] = [\n    {\n        model: AIModel.OBJECT_DETECTION,\n        name: \"COCO SSD - object detection using rectangles\",\n        flag: false\n    },\n    {\n        model: AIModel.POSE_DETECTION,\n        name: \"POSE-NET - pose estimation using points\",\n        flag: false\n    }\n];\n\nexport const LoadModelPopup: React.FC = () => {\n    const [modelIsLoadingStatus, setModelIsLoadingStatus] = useState(false);\n    const [selectedModelToLoad, updateSelectedModelToLoad] = useState(models);\n\n    const onAccept = () => {\n        setModelIsLoadingStatus(true);\n        switch (extractSelectedModel()) {\n            case AIModel.POSE_DETECTION:\n                PoseDetector.loadModel(() => {\n                    PopupActions.close();\n                });\n                break;\n            case AIModel.OBJECT_DETECTION:\n                ObjectDetector.loadModel(() => {\n                    PopupActions.close();\n                });\n                break;\n        }\n    };\n\n    const extractSelectedModel = (): AIModel => {\n        const model: SelectableModel = findLast(selectedModelToLoad, { flag: true });\n        if (!!model) {\n            return model.model\n        } else {\n            return null;\n        }\n    };\n\n    const onSelect = (selectedModel: AIModel) => {\n        const nextSelectedModelToLoad: SelectableModel[] = selectedModelToLoad.map((model: SelectableModel) => {\n            if (model.model === selectedModel)\n                return {\n                    ...model,\n                    flag: !model.flag\n                };\n            else\n                return {\n                    ...model,\n                    flag: false\n                };\n        });\n        updateSelectedModelToLoad(nextSelectedModelToLoad);\n    };\n\n    const getOptions = () => {\n        return selectedModelToLoad.map((entry: SelectableModel) => {\n            return <div\n                className=\"OptionsItem\"\n                onClick={() => onSelect(entry.model)}\n                key={entry.model}\n            >\n                {entry.flag ?\n                    <img\n                        draggable={false}\n                        src={\"/ico/checkbox-checked.png\"}\n                        alt={\"checked\"}\n                    /> :\n                    <img\n                        draggable={false}\n                        src={\"/ico/checkbox-unchecked.png\"}\n                        alt={\"unchecked\"}\n                    />}\n                {entry.name}\n            </div>\n        })\n    };\n\n    const onReject = () => {\n        PopupActions.close();\n    };\n\n    const renderContent = () => {\n        return <div className=\"LoadModelPopupContent\">\n            <div className=\"Message\">\n                To speed up your work, you can use our AI, which will try to mark objects on your images. Don't worry,\n                your photos are still safe. To take care of your privacy, we decided not to send your images to the\n                server, but instead send our AI to you. When accepting, make sure that you have a fast and stable\n                connection - it may take a few minutes to load the model.\n            </div>\n            <div className=\"Companion\">\n                {modelIsLoadingStatus ?\n                    <ClipLoader\n                        size={40}\n                        color={CSSHelper.getLeadingColor()}\n                        loading={true}\n                    /> :\n                    <div className=\"Options\">\n                        {getOptions()}\n                    </div>\n                }\n            </div>\n        </div>\n    };\n\n    return (\n        <GenericYesNoPopup\n            title={\"Say hello to AI\"}\n            renderContent={renderContent}\n            acceptLabel={\"Use model!\"}\n            onAccept={onAccept}\n            disableAcceptButton={modelIsLoadingStatus || !extractSelectedModel()}\n            rejectLabel={\"I'm going on my own\"}\n            onReject={onReject}\n            disableRejectButton={modelIsLoadingStatus}\n        />\n    );\n};","export enum AnnotationFormatType {\n    YOLO = 'YOLO',\n    COCO = 'COCO',\n    CSV = 'CSV',\n    JSON = 'JSON',\n    VOC = 'VOC',\n    VGG = 'VGG'\n}","export type PartitionResult<T> = {\n    pass: T[]\n    fail: T[]\n}\n\nexport class ArrayUtilAmbiguousMatchError extends Error {\n    constructor() {\n        super('Given predicate results in more than one value being matched.');\n        this.name = 'ArrayUtilAmbiguousMatchError';\n    }\n}\n\nexport class EmptyArrayError extends Error {\n    constructor() {\n        super('Given array is empty.');\n        this.name = 'EmptyArrayError';\n    }\n}\n\nexport class NegativeIndexError extends Error {\n    constructor() {\n        super('Index can not be negative.');\n        this.name = 'NegativeIndexError';\n    }\n}\n\nexport class ArrayUtil {\n    public static partition<T>(array: T[], predicate: (T) => boolean): PartitionResult<T> {\n        return array.reduce((acc: PartitionResult<T>, item: T) => {\n            if (predicate(item))\n                acc.pass.push(item)\n            else\n                acc.fail.push(item)\n            return acc\n        }, {pass: [], fail: []})\n    }\n\n    public static match<T, P>(array1: T[], array2: P[], predicate: (key: T, value: P) => boolean): [T, P][] {\n        return array1.reduce((acc: [T, P][], key: T) => {\n            const match = array2.filter((value: P) => predicate(key, value))\n            if (match.length === 1) {\n                acc.push([key, match[0]])\n            } else if (match.length > 1) {\n                throw new ArrayUtilAmbiguousMatchError()\n            }\n            return acc\n        }, [])\n    }\n\n    public static unzip<T, P>(array: [T, P][]): [T[], P[]] {\n        return array.reduce((acc: [T[], P[]], i: [T, P]) => {\n            acc[0].push(i[0]);\n            acc[1].push(i[1]);\n            return acc;\n        }, [[], []])\n    }\n\n    public static getByInfiniteIndex<T>(array: T[], index: number): T {\n        if (array.length === 0) {\n            throw new EmptyArrayError()\n        }\n        if (index < 0) {\n            throw new NegativeIndexError()\n        }\n        const boundedIndex: number = index % array.length\n        return array[boundedIndex]\n    }\n}\n","import React, {useState} from 'react'\nimport './SuggestLabelNamesPopup.scss'\nimport {AppState} from '../../../store';\nimport {connect} from 'react-redux';\nimport {updateRejectedSuggestedLabelList, updateSuggestedLabelList} from '../../../store/ai/actionCreators';\nimport {GenericYesNoPopup} from '../GenericYesNoPopup/GenericYesNoPopup';\nimport {PopupActions} from '../../../logic/actions/PopupActions';\nimport {AISelector} from '../../../store/selectors/AISelector';\nimport Scrollbars from 'react-custom-scrollbars';\nimport {LabelName} from '../../../store/labels/types';\nimport {updateLabelNames} from '../../../store/labels/actionCreators';\nimport {LabelsSelector} from '../../../store/selectors/LabelsSelector';\nimport { v4 as uuidv4 } from 'uuid';\nimport {ArrayUtil} from '../../../utils/ArrayUtil';\nimport {Settings} from '../../../settings/Settings';\n\ninterface SelectableName {\n    name: string;\n    flag: boolean;\n}\n\ninterface IProps {\n    updateLabelNames: (labels: LabelName[]) => any,\n    updateSuggestedLabelList: (labelList: string[]) => any;\n    updateRejectedSuggestedLabelList: (labelList: string[]) => any;\n}\n\nconst SuggestLabelNamesPopup: React.FC<IProps> = (\n    {\n        updateLabelNames,\n        updateSuggestedLabelList,\n        updateRejectedSuggestedLabelList\n    }) => {\n\n    const mapNamesToSelectableNames = (names: string[]): SelectableName[] => {\n        return names.map((name: string) => {\n            return {\n                name,\n                flag: false\n            }\n        })\n    };\n\n    const [selectAllFlag, setSelectAllFlag] = useState(false);\n    const [labelNames, setLabelNames] = useState(mapNamesToSelectableNames(AISelector.getSuggestedLabelList()));\n\n    const onAccept = () => {\n        updateLabelNames(extractSelectedNames().reduce((acc: LabelName[], entry: string, index: number) => {\n            acc.push({\n                name: entry,\n                id: uuidv4(),\n                color: ArrayUtil.getByInfiniteIndex(Settings.LABEL_COLORS_PALETTE, index)\n            });\n            return acc;\n        }, LabelsSelector.getLabelNames()));\n        updateRejectedSuggestedLabelList(AISelector.getRejectedSuggestedLabelList().concat(extractUnselectedNames()));\n        updateSuggestedLabelList([]);\n        PopupActions.close();\n    };\n\n    const onReject = () => {\n        updateRejectedSuggestedLabelList(AISelector.getRejectedSuggestedLabelList().concat(extractNames()));\n        updateSuggestedLabelList([]);\n        PopupActions.close();\n    };\n\n    const selectAll = () => {\n        setSelectAllFlag(true);\n        setLabelNames(labelNames.map((entry: SelectableName) => {\n            return {\n                ...entry,\n                flag: true\n            }\n        }))\n    };\n\n    const deselectAll = () => {\n        setSelectAllFlag(false);\n        setLabelNames(labelNames.map((entry: SelectableName) => {\n            return {\n                ...entry,\n                flag: false\n            }\n        }))\n    };\n\n    const toggleSelectableNameByIndex = (index: number) => {\n        const nextLabelNames: SelectableName[] = labelNames.map((entry: SelectableName, entryIndex: number) => {\n            if (index === entryIndex)\n                return {\n                    ...entry,\n                    flag: !entry.flag\n                };\n            else\n                return entry;\n        });\n        setLabelNames(nextLabelNames);\n\n        const nextSelectAllFlag: boolean = nextLabelNames.reduce((acc: boolean, entry: SelectableName) => {\n            return(acc && entry.flag)\n        }, true);\n        setSelectAllFlag(nextSelectAllFlag);\n    };\n\n    const extractSelectedNames = (): string[] => {\n        return labelNames.reduce((acc: string[], entry: SelectableName) => {\n            if (entry.flag) {\n                acc.push(entry.name);\n            }\n            return acc;\n        }, [])\n    };\n\n    const extractUnselectedNames = (): string[] => {\n        return labelNames.reduce((acc: string[], entry: SelectableName) => {\n            if (!entry.flag) {\n                acc.push(entry.name);\n            }\n            return acc;\n        }, [])\n    };\n\n    const extractNames = (): string[] => {\n        return labelNames.map((entry: SelectableName) => entry.name);\n    };\n\n    const getOptions = () => {\n        return labelNames.map((entry: SelectableName, index: number) => {\n            return <div\n                className='OptionsItem'\n                onClick={() => toggleSelectableNameByIndex(index)}\n                key={index}\n            >\n                {entry.flag ?\n                    <img\n                        draggable={false}\n                        src={'/ico/checkbox-checked.png'}\n                        alt={'checked'}\n                    /> :\n                    <img\n                        draggable={false}\n                        src={'/ico/checkbox-unchecked.png'}\n                        alt={'unchecked'}\n                    />}\n                {entry.name}\n            </div>\n        })\n    };\n\n    const renderContent = () => {\n        return(<div className='SuggestLabelNamesPopupContent'>\n            <div className='Message'>\n                We found objects of classes that are not yet included in the list of labels. Select the names you\n                would like to add. This will help to speed up the labeling process.\n            </div>\n            <div className='AllToggle'>\n                <div\n                    className='OptionsItem'\n                    onClick={() => selectAllFlag ? deselectAll() : selectAll()}\n                >\n                    {selectAllFlag ?\n                        <img\n                            draggable={false}\n                            src={'/ico/checkbox-checked.png'}\n                            alt={'checked'}\n                        /> :\n                        <img\n                            draggable={false}\n                            src={'/ico/checkbox-unchecked.png'}\n                            alt={'unchecked'}\n                        />}\n                    {selectAllFlag ? 'Deselect all' : 'Select all'}\n                </div>\n            </div>\n            <div className='LabelNamesContainer'>\n                <Scrollbars autoHeight={true}>\n                    <div\n                        className='LabelNamesContent'\n                    >\n                        {getOptions()}\n                    </div>\n                </Scrollbars>\n            </div>\n        </div>);\n    };\n\n    return(\n        <GenericYesNoPopup\n            title={'New classes found'}\n            renderContent={renderContent}\n            acceptLabel={'Accept'}\n            onAccept={onAccept}\n            rejectLabel={'Reject'}\n            onReject={onReject}\n        />\n    );\n};\n\nconst mapDispatchToProps = {\n    updateLabelNames,\n    updateSuggestedLabelList,\n    updateRejectedSuggestedLabelList\n};\n\nconst mapStateToProps = (state: AppState) => ({});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SuggestLabelNamesPopup);\n","import React, {useState} from 'react'\nimport './GenericLabelTypePopup.scss'\nimport {LabelType} from \"../../../data/enums/LabelType\";\nimport {AppState} from \"../../../store\";\nimport {connect} from \"react-redux\";\nimport {ImageButton} from \"../../Common/ImageButton/ImageButton\";\nimport {GenericYesNoPopup} from \"../GenericYesNoPopup/GenericYesNoPopup\";\nimport {ILabelToolkit, LabelToolkitData} from \"../../../data/info/LabelToolkitData\";\nimport {ProjectType} from \"../../../data/enums/ProjectType\";\n\ninterface IProps {\n    title: string,\n    activeLabelType: LabelType,\n    projectType: ProjectType;\n    onLabelTypeChange?: (labelType: LabelType) => any;\n    acceptLabel: string;\n    onAccept: (labelType: LabelType) => any;\n    skipAcceptButton?: boolean;\n    disableAcceptButton?: boolean;\n    rejectLabel: string;\n    onReject: (labelType: LabelType) => any;\n    renderInternalContent: (labelType: LabelType) => any;\n}\n\nconst GenericLabelTypePopup: React.FC<IProps> = (\n    {\n        title,\n        activeLabelType,\n        projectType,\n        onLabelTypeChange,\n        acceptLabel,\n        onAccept,\n        skipAcceptButton,\n        disableAcceptButton,\n        rejectLabel,\n        onReject,\n        renderInternalContent\n    }) => {\n\n    const [labelType, setLabelType] = useState(activeLabelType);\n\n    const getSidebarButtons = () => {\n        return LabelToolkitData\n            .filter((label: ILabelToolkit) => label.projectType === projectType)\n            .map((label: ILabelToolkit) => {\n                return <ImageButton\n                    image={label.imageSrc}\n                    imageAlt={label.imageAlt}\n                    buttonSize={{width: 40, height: 40}}\n                    padding={20}\n                    onClick={() => {\n                        setLabelType(label.labelType);\n                        onLabelTypeChange(label.labelType);\n                    }}\n                    isActive={labelType === label.labelType}\n                />\n            })\n    }\n\n    const renderContent = () => {\n        return (<div className=\"GenericLabelTypePopupContent\">\n            <div className=\"LeftContainer\">\n                {getSidebarButtons()}\n            </div>\n            <div className=\"RightContainer\">\n                {renderInternalContent(labelType)}\n            </div>\n        </div>);\n    }\n\n    return(\n        <GenericYesNoPopup\n            title={title}\n            renderContent={renderContent}\n            acceptLabel={acceptLabel}\n            onAccept={() => onAccept(labelType)}\n            skipAcceptButton={skipAcceptButton}\n            disableAcceptButton={disableAcceptButton}\n            rejectLabel={rejectLabel}\n            onReject={() => onReject(labelType)}\n        />\n    );\n};\n\nconst mapDispatchToProps = {};\n\nconst mapStateToProps = (state: AppState) => ({\n    projectType: state.general.projectData.type\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(GenericLabelTypePopup);","import {LabelType} from './enums/LabelType';\nimport {ILabelFormatData} from '../interfaces/ILabelFormatData';\nimport {AnnotationFormatType} from './enums/AnnotationFormatType';\n\nexport type ImportFormatDataMap = Record<LabelType, ILabelFormatData[]>\n\nexport const ImportFormatData: ImportFormatDataMap = {\n    [LabelType.RECT]: [\n        {\n            type: AnnotationFormatType.COCO,\n            label: 'Single file in COCO JSON format.'\n        },\n        {\n            type: AnnotationFormatType.YOLO,\n            label: 'Multiple files in YOLO format along with labels names definition - labels.txt file.'\n        }\n    ],\n    [LabelType.POINT]: [],\n    [LabelType.LINE]: [],\n    [LabelType.POLYGON]: [\n        {\n            type: AnnotationFormatType.COCO,\n            label: 'Single file in COCO JSON format.'\n        }\n    ],\n    [LabelType.IMAGE_RECOGNITION]: []\n}\n","import React from 'react';\nimport './FeatureInProgress.scss';\n\nexport const FeatureInProgress: React.FC = () => {\n    return(\n        <div\n            className=\"FeatureInProgress\"\n        >\n            <img\n                draggable={false}\n                alt={\"take_off\"}\n                src={\"/ico/take-off.png\"}\n            />\n            <p className=\"extraBold\">new feature <br/> coming soon...</p>\n        </div>\n    )\n};","export class COCOAnnotationsLoadingError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"COCOAnnotationsLoadingError\";\n    }\n}\n\nexport class COCOFormatValidationError extends COCOAnnotationsLoadingError {\n    constructor(message) {\n        super(message);\n        this.name = \"COCOFormatValidationError\";\n    }\n}\n\nexport class COCOAnnotationReadingError extends COCOAnnotationsLoadingError {\n    constructor() {\n        super(\"Unexpected error occurred during reading annotations from file\");\n        this.name = \"COCOAnnotationReadingError\";\n    }\n}\n\nexport class COCOAnnotationDeserializationError extends COCOAnnotationsLoadingError {\n    constructor() {\n        super(\"COCO annotation file need to be in JSON format\");\n        this.name = \"COCOAnnotationDeserializationError\";\n    }\n}\n\nexport class COCOAnnotationFileCountError extends COCOAnnotationsLoadingError {\n    constructor() {\n        super(\"COCO annotation requires single file but multiple were given\");\n        this.name = \"COCOAnnotationFileCountError\";\n    }\n}","import {ImageData, LabelName} from \"../../store/labels/types\";\nimport {LabelType} from \"../../data/enums/LabelType\";\n\nexport type ImportResult = {\n    imagesData: ImageData[]\n    labelNames: LabelName[]\n}\n\nexport class AnnotationImporter {\n    public labelType: LabelType[]\n\n    constructor(labelType: LabelType[]) {\n        this.labelType = labelType;\n    }\n\n    public import(\n        filesData: File[],\n        onSuccess: (imagesData: ImageData[], labelNames: LabelName[]) => any,\n        onFailure: (error?:Error) => any\n    ): void {\n        throw new Error(\"Method not implemented.\");\n    }\n}","import {COCOBBox, COCOSegmentation} from \"../../../data/labels/COCO\";\nimport {IRect} from \"../../../interfaces/IRect\";\nimport {IPoint} from \"../../../interfaces/IPoint\";\nimport {chunk} from \"lodash\";\n\nexport class COCOUtils {\n    public static bbox2rect(bbox: COCOBBox): IRect {\n        return {\n            x: bbox[0],\n            y: bbox[1],\n            width: bbox[2],\n            height: bbox[3]\n        }\n    }\n\n    public static segmentation2vertices(segmentation: COCOSegmentation): IPoint[][] {\n        return segmentation.map((segment: number[]) => {\n            return chunk(segment, 2).map((pair: number[]) => {\n                return {x: pair[0], y: pair[1]}\n            })\n        })\n    }\n}","import {ImageData, LabelName} from '../../../store/labels/types';\nimport {LabelsSelector} from '../../../store/selectors/LabelsSelector';\nimport {COCOCategory, COCOImage, COCOObject} from '../../../data/labels/COCO';\nimport { v4 as uuidv4 } from 'uuid';\nimport {ArrayUtil, PartitionResult} from '../../../utils/ArrayUtil';\nimport {ImageDataUtil} from '../../../utils/ImageDataUtil';\nimport {LabelUtil} from '../../../utils/LabelUtil';\nimport {\n    COCOAnnotationDeserializationError,\n    COCOAnnotationFileCountError,\n    COCOAnnotationReadingError,\n    COCOFormatValidationError\n} from './COCOErrors';\nimport {LabelType} from '../../../data/enums/LabelType';\nimport {AnnotationImporter, ImportResult} from '../AnnotationImporter';\nimport {COCOUtils} from './COCOUtils';\nimport {Settings} from \"../../../settings/Settings\";\n\nexport type FileNameCOCOIdMap = {[ fileName: string]: number; }\nexport type LabelNameMap = { [labelCOCOId: number]: LabelName; }\nexport type ImageDataMap = { [imageCOCOId: number]: ImageData; }\n\nexport class COCOImporter extends AnnotationImporter {\n    public static requiredKeys = ['images', 'annotations', 'categories']\n\n    public import(\n        filesData: File[],\n        onSuccess: (imagesData: ImageData[], labelNames: LabelName[]) => any,\n        onFailure: (error?:Error) => any\n    ): void {\n        if (filesData.length > 1) {\n            onFailure(new COCOAnnotationFileCountError());\n        }\n\n        const reader = new FileReader();\n        reader.readAsText(filesData[0]);\n        reader.onloadend = (evt: any) => {\n            try {\n                const inputImagesData: ImageData[] = LabelsSelector.getImagesData();\n                const annotations = COCOImporter.deserialize(evt.target.result)\n                const {imagesData, labelNames} = this.applyLabels(inputImagesData, annotations);\n                onSuccess(imagesData,labelNames);\n            } catch (error) {\n                onFailure(error as Error);\n            }\n        };\n        reader.onerror = () => onFailure(new COCOAnnotationReadingError());\n    }\n\n    public static deserialize(text: string): COCOObject {\n        try {\n            return JSON.parse(text) as COCOObject\n        } catch (error) {\n            throw new COCOAnnotationDeserializationError()\n        }\n    }\n\n    public applyLabels(imageData: ImageData[], annotationsObject: COCOObject): ImportResult {\n        COCOImporter.validateCocoFormat(annotationsObject);\n        const {images, categories, annotations} = annotationsObject;\n        const labelNameMap: LabelNameMap = COCOImporter.mapCOCOCategories(categories);\n        const cleanImageData: ImageData[] = imageData.map((item: ImageData) => ImageDataUtil.cleanAnnotations(item));\n        const imageDataPartition: PartitionResult<ImageData> = COCOImporter.partitionImageData(cleanImageData, images);\n        const imageDataMap: ImageDataMap = COCOImporter.mapImageData(imageDataPartition.pass, images);\n\n        for (const annotation of annotations) {\n            if (!imageDataMap[annotation.image_id] || annotation.iscrowd === 1)\n                continue\n\n            if (this.labelType.includes(LabelType.RECT)) {\n                imageDataMap[annotation.image_id].labelRects.push(LabelUtil.createLabelRect(\n                    labelNameMap[annotation.category_id].id,\n                    COCOUtils.bbox2rect(annotation.bbox)\n                ))\n            }\n\n            if (this.labelType.includes(LabelType.POLYGON)) {\n                const polygons = COCOUtils.segmentation2vertices(annotation.segmentation);\n                for (const polygon of polygons) {\n                    imageDataMap[annotation.image_id].labelPolygons.push(LabelUtil.createLabelPolygon(\n                        labelNameMap[annotation.category_id].id, polygon\n                    ))\n                }\n            }\n        }\n\n        const resultImageData = Object.values(imageDataMap).concat(imageDataPartition.fail);\n\n        return {\n            imagesData: ImageDataUtil.arrange(resultImageData, imageData.map((item: ImageData) => item.id)),\n            labelNames: Object.values(labelNameMap)\n        }\n    }\n\n    protected static partitionImageData(items: ImageData[], images: COCOImage[]): PartitionResult<ImageData> {\n        const imageNames: string[] = images.map((item: COCOImage) => item.file_name);\n        const predicate = (item: ImageData) => imageNames.includes(item.fileData.name);\n        return ArrayUtil.partition<ImageData>(items, predicate);\n    }\n\n    protected static mapCOCOCategories(categories: COCOCategory[]): LabelNameMap {\n        return categories.reduce((acc: LabelNameMap, category : COCOCategory, index: number) => {\n            acc[category.id] = {\n                id: uuidv4(),\n                name: category.name,\n                color: ArrayUtil.getByInfiniteIndex(Settings.LABEL_COLORS_PALETTE, index)\n            }\n            return acc\n        }, {});\n    }\n\n    protected static mapImageData(items: ImageData[], images: COCOImage[]): ImageDataMap {\n        const fileNameCOCOIdMap: FileNameCOCOIdMap = images.reduce((acc: FileNameCOCOIdMap, image: COCOImage) => {\n            acc[image.file_name] = image.id\n            return acc\n        }, {});\n        return  items.reduce((acc: ImageDataMap, image: ImageData) => {\n            acc[fileNameCOCOIdMap[image.fileData.name]] = image\n            return acc;\n        }, {});\n    }\n\n    public static validateCocoFormat(annotationsObject: COCOObject): void {\n        const missingKeys = COCOImporter.requiredKeys.filter((key: string) => !annotationsObject.hasOwnProperty(key))\n        if (missingKeys.length !== 0) {\n            throw new COCOFormatValidationError(`Uploaded file does not contain all required keys: ${missingKeys}`)\n        }\n    }\n}\n","import {AnnotationImporter} from '../AnnotationImporter';\nimport {ImageData, LabelName} from '../../../store/labels/types';\nimport {FileUtil} from '../../../utils/FileUtil';\nimport {ArrayUtil} from '../../../utils/ArrayUtil';\nimport {NoLabelNamesFileProvidedError} from './YOLOErrors';\nimport {LabelsSelector} from '../../../store/selectors/LabelsSelector';\nimport {YOLOUtils} from './YOLOUtils';\nimport {ImageDataUtil} from '../../../utils/ImageDataUtil';\nimport {zip, find} from 'lodash';\nimport {ImageRepository} from '../../imageRepository/ImageRepository';\n\nexport type YOLOFilesSpec = {\n    labelNameFile: File\n    annotationFiles: File[]\n}\n\nexport class YOLOImporter extends AnnotationImporter {\n    private static labelsFileName: string = 'labels.txt'\n\n    public import(\n        filesData: File[],\n        onSuccess: (imagesData: ImageData[], labelNames: LabelName[]) => any,\n        onFailure: (error?:Error) => any\n    ): void {\n        try {\n            const sourceImagesData = LabelsSelector.getImagesData()\n                .map((i: ImageData) => ImageDataUtil.cleanAnnotations(i));\n            const {labelNameFile, annotationFiles} = YOLOImporter.filterFilesData(filesData, sourceImagesData);\n            const [relevantImageData, relevantAnnotations] = YOLOImporter\n                .matchImagesWithAnnotations(sourceImagesData, annotationFiles);\n            const labelNamesPromise: Promise<LabelName[]> = FileUtil.readFile(labelNameFile)\n                .then((fileContent: string) => YOLOUtils.parseLabelsNamesFromString(fileContent));\n            const missingImagesPromise: Promise<void> = ImageDataUtil.loadMissingImages(relevantImageData);\n            const annotationFilesPromise: Promise<string[]> = FileUtil.readFiles(relevantAnnotations);\n            Promise\n                .all([labelNamesPromise, missingImagesPromise, annotationFilesPromise])\n                .then((values: [LabelName[], void, string[]]) => {\n                    const [labelNames, , annotationsRaw] = values;\n                    const resultImageData = zip<ImageData, string>(relevantImageData, annotationsRaw)\n                        .map((pair: [ImageData, string]) => YOLOImporter.applyAnnotations(pair[0], pair[1], labelNames))\n                    onSuccess(YOLOImporter.injectImageDataWithAnnotations(sourceImagesData, resultImageData), labelNames);\n                })\n                .catch((error: Error) => onFailure(error))\n        } catch (error) {\n            onFailure(error as Error)\n        }\n    };\n\n    public static filterFilesData(filesData: File[], imagesData: ImageData[]): YOLOFilesSpec {\n        const functionalityPartitionResult = ArrayUtil.partition(\n            filesData,\n            (i: File) => i.name === YOLOImporter.labelsFileName\n        )\n        if (functionalityPartitionResult.pass.length !== 1) {\n            throw new NoLabelNamesFileProvidedError()\n        }\n        const imageIdentifiers: string[] = imagesData\n            .map((i: ImageData) => i.fileData.name)\n            .map((i: string) => FileUtil.extractFileName(i))\n        const matchingPartitionResult = ArrayUtil.partition(\n            filesData,\n            (i: File) => imageIdentifiers.includes(FileUtil.extractFileName(i.name))\n        )\n        return {\n            labelNameFile: functionalityPartitionResult.pass[0],\n            annotationFiles: matchingPartitionResult.pass\n        }\n    }\n\n    public static matchImagesWithAnnotations(images: ImageData[], annotations: File[]): [ImageData[], File[]] {\n        const predicate = (image: ImageData, annotation:  File) => {\n            return FileUtil.extractFileName(image.fileData.name) === FileUtil.extractFileName(annotation.name)\n        }\n        return ArrayUtil.unzip(\n            ArrayUtil.match<ImageData, File>(images, annotations, predicate)\n        );\n    }\n\n    public static applyAnnotations(imageData: ImageData, rawAnnotations: string, labelNames: LabelName[]): ImageData {\n        const image: HTMLImageElement = ImageRepository.getById(imageData.id);\n        imageData.labelRects = YOLOUtils.parseYOLOAnnotationsFromString(\n            rawAnnotations,\n            labelNames,\n            {width: image.width, height: image.height},\n            imageData.fileData.name\n        );\n        return imageData;\n    }\n\n    public static injectImageDataWithAnnotations(sourceImageData: ImageData[], annotatedImageData: ImageData[]): ImageData[] {\n        return sourceImageData.map((i: ImageData) => {\n            const result = find(annotatedImageData, {id: i.id});\n            return !!result ? result : i;\n        })\n    }\n}\n","import {AnnotationFormatType} from './enums/AnnotationFormatType';\nimport {AnnotationImporter} from '../logic/import/AnnotationImporter';\nimport {COCOImporter} from '../logic/import/coco/COCOImporter';\nimport {YOLOImporter} from '../logic/import/yolo/YOLOImporter';\n\nexport type ImporterSpecDataMap = Record<AnnotationFormatType, typeof AnnotationImporter>;\n\n\nexport const ImporterSpecData: ImporterSpecDataMap = {\n    [AnnotationFormatType.COCO]: COCOImporter,\n    [AnnotationFormatType.CSV]: undefined,\n    [AnnotationFormatType.JSON]: undefined,\n    [AnnotationFormatType.VGG]: undefined,\n    [AnnotationFormatType.VOC]: undefined,\n    [AnnotationFormatType.YOLO]: YOLOImporter\n}\n","import React, {useState} from 'react'\nimport './ImportLabelPopup.scss'\nimport {LabelType} from '../../../data/enums/LabelType';\nimport {PopupActions} from '../../../logic/actions/PopupActions';\nimport GenericLabelTypePopup from '../GenericLabelTypePopup/GenericLabelTypePopup';\nimport {ImportFormatData} from '../../../data/ImportFormatData';\nimport {FeatureInProgress} from '../../EditorView/FeatureInProgress/FeatureInProgress';\nimport {AppState} from '../../../store';\nimport {connect} from 'react-redux';\nimport {useDropzone} from 'react-dropzone';\nimport {AcceptedFileType} from '../../../data/enums/AcceptedFileType';\nimport {ImageData, LabelName} from '../../../store/labels/types';\nimport {updateActiveLabelType, updateImageData, updateLabelNames} from '../../../store/labels/actionCreators';\nimport {ImporterSpecData} from '../../../data/ImporterSpecData';\nimport {AnnotationFormatType} from '../../../data/enums/AnnotationFormatType';\nimport {ILabelFormatData} from '../../../interfaces/ILabelFormatData';\n\ninterface IProps {\n    activeLabelType: LabelType,\n    updateImageDataAction: (imageData: ImageData[]) => any,\n    updateLabelNamesAction: (labels: LabelName[]) => any,\n    updateActiveLabelTypeAction: (activeLabelType: LabelType) => any\n}\n\nconst ImportLabelPopup: React.FC<IProps> = (\n    {\n        activeLabelType,\n        updateImageDataAction,\n        updateLabelNamesAction,\n        updateActiveLabelTypeAction\n    }) => {\n    const resolveFormatType = (labelType: LabelType): AnnotationFormatType => {\n        const possibleImportFormats = ImportFormatData[labelType]\n        return possibleImportFormats.length === 1 ? possibleImportFormats[0].type : null\n    }\n\n    const [labelType, setLabelType] = useState(activeLabelType);\n    const [formatType, setFormatType] = useState(resolveFormatType(activeLabelType));\n    const [loadedLabelNames, setLoadedLabelNames] = useState([]);\n    const [loadedImageData, setLoadedImageData] = useState([]);\n    const [annotationsLoadedError, setAnnotationsLoadedError] = useState(null);\n\n    const {getRootProps, getInputProps} = useDropzone({\n        accept: [AcceptedFileType.JSON, AcceptedFileType.TEXT],\n        multiple: true,\n        onDrop: (acceptedFiles) => {\n            const importer = new (ImporterSpecData[formatType])([labelType])\n            importer.import(acceptedFiles, onAnnotationLoadSuccess, onAnnotationsLoadFailure);\n        }\n    });\n\n    const onLabelTypeChange = (labelType: LabelType) => {\n        setLabelType(labelType);\n        setFormatType(resolveFormatType(labelType))\n        setLoadedLabelNames([]);\n        setLoadedImageData([]);\n        setAnnotationsLoadedError(null);\n    }\n\n    const onAnnotationLoadSuccess = (imagesData: ImageData[], labelNames: LabelName[]) => {\n        setLoadedLabelNames(labelNames);\n        setLoadedImageData(imagesData);\n        setAnnotationsLoadedError(null);\n    }\n\n    const onAnnotationsLoadFailure = (error?:Error) => {\n        setLoadedLabelNames([]);\n        setLoadedImageData([]);\n        setAnnotationsLoadedError(error);\n    };\n\n    const onAccept = (labelType: LabelType) => {\n        if (loadedLabelNames.length !== 0 && loadedImageData.length !== 0) {\n            updateImageDataAction(loadedImageData);\n            updateLabelNamesAction(loadedLabelNames);\n            updateActiveLabelTypeAction(labelType);\n            PopupActions.close();\n        }\n    };\n\n    const onReject = (labelType: LabelType) => {\n        PopupActions.close();\n    };\n\n    const onAnnotationFormatChange = (format: AnnotationFormatType) => {\n        setFormatType(format);\n    }\n\n    const getDropZoneContent = () => {\n        if (!!annotationsLoadedError) {\n            return <>\n                <input {...getInputProps()} />\n                <img\n                    draggable={false}\n                    alt={'upload'}\n                    src={'/ico/box-opened.png'}\n                />\n                <p className='extraBold'>Annotation import was unsuccessful</p>\n                {annotationsLoadedError.message}\n                <p className='extraBold'>Try again</p>\n            </>;\n        } else if (loadedImageData.length !== 0 && loadedLabelNames.length !== 0) {\n            return <>\n                <img\n                    draggable={false}\n                    alt={'uploaded'}\n                    src={'/ico/box-closed.png'}\n                />\n                <p className='extraBold'>Annotation ready for import</p>\n                After import you will lose\n                all your current annotations\n            </>;\n        } else {\n            return <>\n                <input {...getInputProps()} />\n                <img\n                    draggable={false}\n                    alt={'upload'}\n                    src={'/ico/box-opened.png'}\n                />\n                <p className='extraBold'>{`Drop ${formatType} annotations`}</p>\n                <p>or</p>\n                <p className='extraBold'>Click here to select them</p>\n            </>;\n        }\n    };\n\n    const getOptions = (exportFormatData: ILabelFormatData[]) => {\n        return exportFormatData.map((entry: ILabelFormatData) => {\n            return <div\n                className='OptionsItem'\n                onClick={() => onAnnotationFormatChange(entry.type)}\n                key={entry.type}\n            >\n                {entry.type === formatType ?\n                    <img\n                        draggable={false}\n                        src={'/ico/checkbox-checked.png'}\n                        alt={'checked'}\n                    /> :\n                    <img\n                        draggable={false}\n                        src={'/ico/checkbox-unchecked.png'}\n                        alt={'unchecked'}\n                    />}\n                {entry.label}\n            </div>\n        })\n    };\n\n    const renderInternalContent = (labelType: LabelType) => {\n        if (!formatType && ImportFormatData[labelType].length !== 0) {\n            return [\n                <div className='Message'>\n                    Select file format you would like to use to import labels.\n                </div>,\n                <div className='Options'>\n                    {getOptions(ImportFormatData[labelType])}\n                </div>\n            ]\n        }\n        const importFormatData = ImportFormatData[labelType];\n        return importFormatData.length === 0 ?\n            <FeatureInProgress/> :\n            <div {...getRootProps({className: 'DropZone'})}>\n                {getDropZoneContent()}\n            </div>\n    }\n\n    return(\n        <GenericLabelTypePopup\n            activeLabelType={labelType}\n            title={`Import ${labelType.toLowerCase()} annotations`}\n            onLabelTypeChange={onLabelTypeChange}\n            acceptLabel={'Import'}\n            onAccept={onAccept}\n            skipAcceptButton={ImportFormatData[labelType].length === 0}\n            disableAcceptButton={loadedImageData.length === 0 || loadedLabelNames.length === 0 || !!annotationsLoadedError}\n            rejectLabel={'Cancel'}\n            onReject={onReject}\n            renderInternalContent={renderInternalContent}\n        />\n    )\n};\n\nconst mapDispatchToProps = {\n    updateImageDataAction: updateImageData,\n    updateLabelNamesAction: updateLabelNames,\n    updateActiveLabelTypeAction: updateActiveLabelType\n};\n\nconst mapStateToProps = (state: AppState) => ({\n    activeLabelType: state.labels.activeLabelType,\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ImportLabelPopup);\n","export class XMLSanitizerUtil {\n    public static sanitize(input: string): string {\n        return input\n            .replace('<', '&lt;')\n            .replace('>', '&gt;')\n            .replace('&', '&amp;')\n            .replace(\"'\", '&#39;')\n            .replace(\"/\", '&#x2F;')\n    }\n}","import moment from 'moment';\nimport {GeneralSelector} from '../store/selectors/GeneralSelector';\nimport {saveAs} from 'file-saver';\n\nexport class ExporterUtil {\n    public static getExportFileName(): string {\n        const projectName: string = GeneralSelector.getProjectName();\n        const date: string = moment().format('YYYY-MM-DD-hh-mm-ss');\n        return `labels_${projectName}_${date}`\n    }\n\n    public static saveAs(content: string, fileName: string): void {\n        const blob = new Blob([content], {type: 'text/plain;charset=utf-8'});\n        try {\n            saveAs(blob, fileName);\n        } catch (error) {\n            // TODO: Implement file save error handling\n            throw new Error(error as string);\n        }\n    }\n}\n","import {AnnotationFormatType} from '../../data/enums/AnnotationFormatType';\nimport {ImageData, LabelName, LabelRect} from '../../store/labels/types';\nimport {ImageRepository} from '../imageRepository/ImageRepository';\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\nimport {LabelsSelector} from '../../store/selectors/LabelsSelector';\nimport {XMLSanitizerUtil} from '../../utils/XMLSanitizerUtil';\nimport {ExporterUtil} from '../../utils/ExporterUtil';\nimport {GeneralSelector} from '../../store/selectors/GeneralSelector';\nimport {findIndex, findLast} from 'lodash';\nimport {ISize} from '../../interfaces/ISize';\nimport {NumberUtil} from '../../utils/NumberUtil';\nimport {RectUtil} from '../../utils/RectUtil';\n\nexport class RectLabelsExporter {\n    public static export(exportFormatType: AnnotationFormatType): void {\n        switch (exportFormatType) {\n            case AnnotationFormatType.YOLO:\n                RectLabelsExporter.exportAsYOLO();\n                break;\n            case AnnotationFormatType.VOC:\n                RectLabelsExporter.exportAsVOC();\n                break;\n            case AnnotationFormatType.CSV:\n                RectLabelsExporter.exportAsCSV();\n                break;\n            default:\n                return;\n        }\n    }\n\n    private static exportAsYOLO(): void {\n        const zip = new JSZip();\n        LabelsSelector.getImagesData()\n            .forEach((imageData: ImageData) => {\n                const fileContent: string = RectLabelsExporter.wrapRectLabelsIntoYOLO(imageData);\n                if (fileContent) {\n                    const fileName : string = imageData.fileData.name.replace(/\\.[^/.]+$/, '.txt');\n                    try {\n                        zip.file(fileName, fileContent);\n                    } catch (error) {\n                        // TODO\n                        throw new Error(error as string);\n                    }\n                }\n            });\n\n        try {\n            zip.generateAsync({type:'blob'})\n                .then((content: Blob) => {\n                    saveAs(content, `${ExporterUtil.getExportFileName()}.zip`);\n                });\n        } catch (error) {\n            // TODO\n            throw new Error(error as string);\n        }\n    }\n\n    public static wrapRectLabelIntoYOLO(labelRect: LabelRect, labelNames: LabelName[], imageSize: ISize): string {\n        const snapAndFix = (value: number) => NumberUtil.snapValueToRange(value,0, 1).toFixed(6)\n        const classIdx: string = findIndex(labelNames, {id: labelRect.labelId}).toString()\n        const rectCenter = RectUtil.getCenter(labelRect.rect)\n        const rectSize = RectUtil.getSize(labelRect.rect)\n        const rawBBox: number[] = [\n            rectCenter.x / imageSize.width,\n            rectCenter.y / imageSize.height,\n            rectSize.width / imageSize.width,\n            rectSize.height / imageSize.height\n        ]\n\n        let [x, y, width, height] = rawBBox.map((value: number) => parseFloat(snapAndFix(value)))\n\n        if (x + width / 2 > 1) { width = 2 * (1 - x) }\n        if (x - width / 2 < 0) { width = 2 * x }\n        if (y + height / 2 > 1) { height = 2 * (1 - y) }\n        if (y - height / 2 < 0) { height = 2 * y }\n\n        const processedBBox = [x, y, width, height].map((value: number) => snapAndFix(value))\n\n        return [classIdx, ...processedBBox].join(' ')\n    }\n\n    private static wrapRectLabelsIntoYOLO(imageData: ImageData): string {\n        if (imageData.labelRects.length === 0 || !imageData.loadStatus)\n            return null;\n\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\n        const image: HTMLImageElement = ImageRepository.getById(imageData.id);\n        const imageSize: ISize = {width: image.width, height: image.height}\n        const labelRectsString: string[] = imageData.labelRects.map((labelRect: LabelRect) => {\n            return RectLabelsExporter.wrapRectLabelIntoYOLO(labelRect, labelNames, imageSize)\n        });\n        return labelRectsString.join('\\n');\n    }\n\n    private static exportAsVOC(): void {\n        const zip = new JSZip();\n        LabelsSelector.getImagesData().forEach((imageData: ImageData) => {\n                const fileContent: string = RectLabelsExporter.wrapImageIntoVOC(imageData);\n                if (fileContent) {\n                    const fileName : string = imageData.fileData.name.replace(/\\.[^/.]+$/, '.xml');\n                    try {\n                        zip.file(fileName, fileContent);\n                    } catch (error) {\n                        // TODO\n                        throw new Error(error as string);\n                    }\n                }\n            });\n\n        try {\n            zip.generateAsync({type:'blob'})\n                .then(function(content) {\n                    saveAs(content, `${ExporterUtil.getExportFileName()}.zip`);\n                });\n        } catch (error) {\n            // TODO\n            throw new Error(error as string);\n        }\n    }\n\n    private static wrapRectLabelsIntoVOC(imageData: ImageData): string {\n        if (imageData.labelRects.length === 0 || !imageData.loadStatus)\n            return null;\n\n        const labelNamesList: LabelName[] = LabelsSelector.getLabelNames();\n        const labelRectsString: string[] = imageData.labelRects.map((labelRect: LabelRect) => {\n            const labelName: LabelName = findLast(labelNamesList, {id: labelRect.labelId});\n            const labelFields = !!labelName ? [\n                `\\t<object>`,\n                `\\t\\t<name>${labelName.name}</name>`,\n                `\\t\\t<pose>Unspecified</pose>`,\n                `\\t\\t<truncated>0</truncated>`,\n                `\\t\\t<difficult>0</difficult>`,\n                `\\t\\t<bndbox>`,\n                `\\t\\t\\t<xmin>${Math.round(labelRect.rect.x)}</xmin>`,\n                `\\t\\t\\t<ymin>${Math.round(labelRect.rect.y)}</ymin>`,\n                `\\t\\t\\t<xmax>${Math.round(labelRect.rect.x + labelRect.rect.width)}</xmax>`,\n                `\\t\\t\\t<ymax>${Math.round(labelRect.rect.y + labelRect.rect.height)}</ymax>`,\n                `\\t\\t</bndbox>`,\n                `\\t</object>`\n            ] : [];\n            return labelFields.join('\\n')\n        });\n        return labelRectsString.join('\\n');\n    }\n\n    private static wrapImageIntoVOC(imageData: ImageData): string {\n        const labels: string = RectLabelsExporter.wrapRectLabelsIntoVOC(imageData);\n        const projectName: string = XMLSanitizerUtil.sanitize(GeneralSelector.getProjectName());\n\n        if (labels) {\n            const image: HTMLImageElement = ImageRepository.getById(imageData.id);\n            return [\n                `<annotation>`,\n                `\\t<folder>${projectName}</folder>`,\n                `\\t<filename>${imageData.fileData.name}</filename>`,\n                `\\t<path>/${projectName}/${imageData.fileData.name}</path>`,\n                `\\t<source>`,\n                `\\t\\t<database>Unspecified</database>`,\n                `\\t</source>`,\n                `\\t<size>`,\n                `\\t\\t<width>${image.width}</width>`,\n                `\\t\\t<height>${image.height}</height>`,\n                `\\t\\t<depth>3</depth>`,\n                `\\t</size>`,\n                labels,\n                `</annotation>`\n            ].join('\\n');\n        }\n        return null;\n    }\n\n\n    private static exportAsCSV(): void {\n        const content: string = LabelsSelector.getImagesData()\n            .map((imageData: ImageData) => {\n                return RectLabelsExporter.wrapRectLabelsIntoCSV(imageData)})\n            .filter((imageLabelData: string) => {\n                return !!imageLabelData})\n            .join('\\n');\n        const fileName: string = `${ExporterUtil.getExportFileName()}.csv`;\n        ExporterUtil.saveAs(content, fileName);\n    }\n\n    private static wrapRectLabelsIntoCSV(imageData: ImageData): string {\n        if (imageData.labelRects.length === 0 || !imageData.loadStatus)\n            return null;\n\n        const image: HTMLImageElement = ImageRepository.getById(imageData.id);\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\n        const labelRectsString: string[] = imageData.labelRects.map((labelRect: LabelRect) => {\n            const labelName: LabelName = findLast(labelNames, {id: labelRect.labelId});\n            const labelFields = !!labelName ? [\n                labelName.name,\n                Math.round(labelRect.rect.x).toString(),\n                Math.round(labelRect.rect.y).toString(),\n                Math.round(labelRect.rect.width).toString(),\n                Math.round(labelRect.rect.height).toString(),\n                imageData.fileData.name,\n                image.width.toString(),\n                image.height.toString()\n            ] : [];\n            return labelFields.join(',')\n        });\n        return labelRectsString.join('\\n');\n    }\n}\n","import {AnnotationFormatType} from \"../../data/enums/AnnotationFormatType\";\nimport {ImageData, LabelName, LabelPoint} from \"../../store/labels/types\";\nimport {ImageRepository} from \"../imageRepository/ImageRepository\";\nimport {LabelsSelector} from \"../../store/selectors/LabelsSelector\";\nimport {ExporterUtil} from \"../../utils/ExporterUtil\";\nimport {findLast} from \"lodash\";\n\nexport class PointLabelsExporter {\n    public static export(exportFormatType: AnnotationFormatType): void {\n        switch (exportFormatType) {\n            case AnnotationFormatType.CSV:\n                PointLabelsExporter.exportAsCSV();\n                break;\n            default:\n                return;\n        }\n    }\n\n    private static exportAsCSV(): void {\n        const content: string = LabelsSelector.getImagesData()\n            .map((imageData: ImageData) => {\n                return PointLabelsExporter.wrapRectLabelsIntoCSV(imageData)})\n            .filter((imageLabelData: string) => {\n                return !!imageLabelData})\n            .join(\"\\n\");\n        const fileName: string = `${ExporterUtil.getExportFileName()}.csv`;\n        ExporterUtil.saveAs(content, fileName);\n    }\n\n    private static wrapRectLabelsIntoCSV(imageData: ImageData): string {\n        if (imageData.labelPoints.length === 0 || !imageData.loadStatus)\n            return null;\n\n        const image: HTMLImageElement = ImageRepository.getById(imageData.id);\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\n        const labelRectsString: string[] = imageData.labelPoints.map((labelPoint: LabelPoint) => {\n            const labelName: LabelName = findLast(labelNames, {id: labelPoint.labelId});\n            const labelFields = !!labelName ? [\n                labelName.name,\n                Math.round(labelPoint.point.x).toString(),\n                Math.round(labelPoint.point.y).toString(),\n                imageData.fileData.name,\n                image.width.toString(),\n                image.height.toString()\n            ] : [];\n            return labelFields.join(\",\")\n        });\n        return labelRectsString.join(\"\\n\");\n    }\n}","import {ImageData, LabelName, LabelPolygon} from \"../../../store/labels/types\";\nimport {VGGFileData, VGGObject, VGGPolygon, VGGRegionsData} from \"../../../data/labels/VGG\";\nimport {findLast} from \"lodash\";\nimport {IPoint} from \"../../../interfaces/IPoint\";\nimport {LabelsSelector} from \"../../../store/selectors/LabelsSelector\";\nimport {ExporterUtil} from \"../../../utils/ExporterUtil\";\n\nexport class VGGExporter {\n    public static export(): void {\n        const imagesData: ImageData[] = LabelsSelector.getImagesData();\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\n        const content: string = JSON.stringify(VGGExporter.mapImagesDataToVGGObject(imagesData, labelNames));\n        const fileName: string = `${ExporterUtil.getExportFileName()}.json`;\n        ExporterUtil.saveAs(content, fileName);\n    }\n\n    private static mapImagesDataToVGGObject(imagesData: ImageData[], labelNames: LabelName[]): VGGObject {\n        return imagesData.reduce((data: VGGObject, image: ImageData) => {\n            const fileData: VGGFileData = VGGExporter.mapImageDataToVGGFileData(image, labelNames);\n            if (!!fileData) {\n                data[image.fileData.name] = fileData\n            }\n            return data;\n        }, {});\n    }\n\n    private static mapImageDataToVGGFileData(imageData: ImageData, labelNames: LabelName[]): VGGFileData {\n        const regionsData: VGGRegionsData = VGGExporter.mapImageDataToVGG(imageData, labelNames);\n        if (!regionsData) return null;\n        return {\n            fileref: \"\",\n            size: imageData.fileData.size,\n            filename: imageData.fileData.name,\n            base64_img_data: \"\",\n            file_attributes: {},\n            regions: regionsData\n        }\n    }\n\n    public static mapImageDataToVGG(imageData: ImageData, labelNames: LabelName[]): VGGRegionsData {\n        if (!imageData.loadStatus || !imageData.labelPolygons || !imageData.labelPolygons.length ||\n            !labelNames || !labelNames.length) return null;\n\n        const validLabels: LabelPolygon[] = VGGExporter.getValidPolygonLabels(imageData);\n\n        if (!validLabels.length) return null;\n\n        return validLabels.reduce((data: VGGRegionsData, label: LabelPolygon, index: number) => {\n            const labelName: LabelName = findLast(labelNames, {id: label.labelId});\n            if (!!labelName) {\n                data[index.toString()] = {\n                    shape_attributes: VGGExporter.mapPolygonToVGG(label.vertices),\n                    region_attributes: {\n                        label: labelName.name\n                    }\n                };\n            }\n            return data;\n        }, {})\n    }\n\n    public static getValidPolygonLabels(imageData: ImageData): LabelPolygon[] {\n        return imageData.labelPolygons.filter((label: LabelPolygon) =>\n            label.labelId !== null && !!label.vertices.length);\n    }\n\n    public static mapPolygonToVGG(path: IPoint[]): VGGPolygon {\n        if (!path || !path.length) return null;\n\n        const all_points_x: number[] = path.map((point: IPoint) => point.x).concat(path[0].x);\n        const all_points_y: number[] = path.map((point: IPoint) => point.y).concat(path[0].y);\n        return {\n            name: \"polygon\",\n            all_points_x,\n            all_points_y\n        }\n    }\n}","import {ImageData, LabelName, LabelPolygon} from \"../../../store/labels/types\";\nimport {LabelsSelector} from \"../../../store/selectors/LabelsSelector\";\nimport {GeneralSelector} from \"../../../store/selectors/GeneralSelector\";\nimport {ImageRepository} from \"../../imageRepository/ImageRepository\";\nimport {ExporterUtil} from \"../../../utils/ExporterUtil\";\nimport {\n    COCOAnnotation, COCOBBox,\n    COCOCategory,\n    COCOImage,\n    COCOInfo,\n    COCOObject,\n    COCOSegmentation\n} from \"../../../data/labels/COCO\";\nimport {flatten} from \"lodash\";\nimport {IPoint} from \"../../../interfaces/IPoint\";\n\nexport type LabelDataMap = { [key: string]: number; }\n\nexport class COCOExporter {\n    public static export(): void {\n        const imagesData: ImageData[] = LabelsSelector.getImagesData();\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\n        const projectName: string = GeneralSelector.getProjectName();\n        const COCOObject: COCOObject = COCOExporter.mapImagesDataToCOCOObject(imagesData, labelNames, projectName);\n        const content: string = JSON.stringify(COCOObject);\n        const fileName: string = `${ExporterUtil.getExportFileName()}.json`;\n        ExporterUtil.saveAs(content, fileName);\n    }\n\n    private static mapImagesDataToCOCOObject(\n        imagesData: ImageData[],\n        labelNames: LabelName[],\n        projectName: string\n    ): COCOObject {\n        return {\n            \"info\": COCOExporter.getInfoComponent(projectName),\n            \"images\": COCOExporter.getImagesComponent(imagesData),\n            \"annotations\": COCOExporter.getAnnotationsComponent(imagesData, labelNames),\n            \"categories\":COCOExporter.getCategoriesComponent(labelNames)\n        }\n    }\n\n    public static getInfoComponent(description: string): COCOInfo {\n        return {\n            \"description\": description\n        }\n    }\n\n    public static getCategoriesComponent(labelNames: LabelName[]): COCOCategory[] {\n        return labelNames.map((labelName: LabelName, index: number) => {\n            return {\n                \"id\": index + 1,\n                \"name\": labelName.name\n            }\n        })\n    }\n\n    public static getImagesComponent(imagesData: ImageData[]): COCOImage[] {\n        return imagesData\n            .filter((imagesData: ImageData) => imagesData.loadStatus)\n            .filter((imagesData: ImageData) => imagesData.labelPolygons.length !== 0)\n            .map((imageData: ImageData, index: number) => {\n                const image: HTMLImageElement = ImageRepository.getById(imageData.id);\n                return {\n                    \"id\": index + 1,\n                    \"width\": image.width,\n                    \"height\": image.height,\n                    \"file_name\": imageData.fileData.name\n                }\n            })\n    }\n\n    public static getAnnotationsComponent(imagesData: ImageData[], labelNames: LabelName[]): COCOAnnotation[] {\n        const labelsMap: LabelDataMap = COCOExporter.mapLabelsData(labelNames);\n        let id = 0;\n        const annotations: COCOAnnotation[][] = imagesData\n            .filter((imagesData: ImageData) => imagesData.loadStatus)\n            .filter((imagesData: ImageData) => imagesData.labelPolygons.length !== 0)\n            .map((imageData: ImageData, index: number) => {\n                return imageData.labelPolygons.map((labelPolygon: LabelPolygon) => {\n                    return {\n                        \"id\": id++,\n                        \"iscrowd\": 0,\n                        \"image_id\": index + 1,\n                        \"category_id\": labelsMap[labelPolygon.labelId],\n                        \"segmentation\": COCOExporter.getCOCOSegmentation(labelPolygon.vertices),\n                        \"bbox\": COCOExporter.getCOCOBbox(labelPolygon.vertices),\n                        \"area\": COCOExporter.getCOCOArea(labelPolygon.vertices)\n                    }\n                })\n            })\n        return flatten(annotations);\n    }\n\n    public static mapLabelsData(labelNames: LabelName[]): LabelDataMap {\n        return labelNames.reduce((data: LabelDataMap, label: LabelName, index: number) => {\n            data[label.id] = index + 1;\n            return data;\n        }, {})\n    }\n\n    public static getCOCOSegmentation(vertices: IPoint[]): COCOSegmentation {\n        const points: number[][] = vertices.map((point: IPoint) => [point.x, point.y]);\n        return [flatten(points)];\n    }\n\n    public static getCOCOBbox(vertices: IPoint[]): COCOBBox {\n        let xMin: number = vertices[0].x;\n        let xMax: number = vertices[0].x;\n        let yMin: number = vertices[0].y;\n        let yMax: number = vertices[0].y;\n        for (const vertex of vertices){\n            if (xMin > vertex.x) xMin = vertex.x;\n            if (xMax < vertex.x) xMax = vertex.x;\n            if (yMin > vertex.y) yMin = vertex.y;\n            if (yMax < vertex.y) yMax = vertex.y;\n        }\n        return [xMin, yMin, xMax - xMin, yMax - yMin];\n    }\n\n    public static getCOCOArea(vertices: IPoint[]): number {\n        let area = 0;\n        let j = vertices.length - 1;\n        for (let  i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x + vertices[i].x) * (vertices[j].y - vertices[i].y);\n            j = i;\n        }\n        return Math.abs(area/2);\n    }\n}","import {AnnotationFormatType} from \"../../../data/enums/AnnotationFormatType\";\nimport {VGGExporter} from \"./VGGExporter\";\nimport {COCOExporter} from \"./COCOExporter\";\n\nexport class PolygonLabelsExporter {\n    public static export(exportFormatType: AnnotationFormatType): void {\n        switch (exportFormatType) {\n            case AnnotationFormatType.VGG:\n                VGGExporter.export();\n                break;\n            case AnnotationFormatType.COCO:\n                COCOExporter.export();\n                break;\n            default:\n                return;\n        }\n    }\n}","import {AnnotationFormatType} from \"../../data/enums/AnnotationFormatType\";\nimport {LabelsSelector} from \"../../store/selectors/LabelsSelector\";\nimport {ImageData, LabelLine, LabelName} from \"../../store/labels/types\";\nimport {ExporterUtil} from \"../../utils/ExporterUtil\";\nimport {ImageRepository} from \"../imageRepository/ImageRepository\";\nimport {findLast} from \"lodash\";\n\nexport class LineLabelsExporter {\n    public static export(exportFormatType: AnnotationFormatType): void {\n        switch (exportFormatType) {\n            case AnnotationFormatType.CSV:\n                LineLabelsExporter.exportAsCSV();\n                break;\n            default:\n                return;\n        }\n    }\n\n    private static exportAsCSV(): void {\n        const content: string = LabelsSelector.getImagesData()\n            .map((imageData: ImageData) => {\n                return LineLabelsExporter.wrapLineLabelsIntoCSV(imageData)})\n            .filter((imageLabelData: string) => {\n                return !!imageLabelData})\n            .join(\"\\n\");\n        const fileName: string = `${ExporterUtil.getExportFileName()}.csv`;\n        ExporterUtil.saveAs(content, fileName);\n    }\n\n    private static wrapLineLabelsIntoCSV(imageData: ImageData): string {\n        if (imageData.labelLines.length === 0 || !imageData.loadStatus)\n            return null;\n\n        const image: HTMLImageElement = ImageRepository.getById(imageData.id);\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\n        const labelLinesString: string[] = imageData.labelLines.map((labelLine: LabelLine) => {\n            const labelName: LabelName = findLast(labelNames, {id: labelLine.labelId});\n            const labelFields = !!labelName ? [\n                labelName.name,\n                Math.round(labelLine.line.start.x).toString(),\n                Math.round(labelLine.line.start.y).toString(),\n                Math.round(labelLine.line.end.x).toString(),\n                Math.round(labelLine.line.end.y).toString(),\n                imageData.fileData.name,\n                image.width.toString(),\n                image.height.toString()\n            ] : [];\n            return labelFields.join(\",\")\n        });\n        return labelLinesString.join(\"\\n\");\n    }\n}","import {AnnotationFormatType} from \"../../data/enums/AnnotationFormatType\";\nimport {LabelsSelector} from \"../../store/selectors/LabelsSelector\";\nimport {ImageData, LabelName} from \"../../store/labels/types\";\nimport {ExporterUtil} from \"../../utils/ExporterUtil\";\nimport {findLast} from \"lodash\";\n\nexport class TagLabelsExporter {\n    public static export(exportFormatType: AnnotationFormatType): void {\n        switch (exportFormatType) {\n            case AnnotationFormatType.CSV:\n                TagLabelsExporter.exportAsCSV();\n                break;\n            case AnnotationFormatType.JSON:\n                TagLabelsExporter.exportAsJSON();\n                break;\n            default:\n                return;\n        }\n    }\n\n    private static exportAsCSV(): void {\n        const content: string = LabelsSelector.getImagesData()\n            .filter((imageData: ImageData) => {\n                return imageData.labelNameIds.length > 0\n            })\n            .map((imageData: ImageData) => {\n                return TagLabelsExporter.wrapLabelNamesIntoCSV(imageData)})\n            .join(\"\\n\");\n        const fileName: string = `${ExporterUtil.getExportFileName()}.csv`;\n        ExporterUtil.saveAs(content, fileName);\n    }\n\n    private static exportAsJSON(): void {\n        const contentObjects: object[] = LabelsSelector.getImagesData()\n            .filter((imageData: ImageData) => {\n                return imageData.labelNameIds.length > 0\n            })\n            .map((imageData: ImageData) => {\n                return {\n                    \"image\": imageData.fileData.name,\n                    \"annotations\": TagLabelsExporter.wrapLabelNamesIntoJSON(imageData)\n                }})\n        const content: string = JSON.stringify(contentObjects);\n        const fileName: string = `${ExporterUtil.getExportFileName()}.json`;\n        ExporterUtil.saveAs(content, fileName);\n    }\n\n    private static wrapLabelNamesIntoCSV(imageData: ImageData): string {\n        if (imageData.labelNameIds.length === 0 || !imageData.loadStatus)\n            return null;\n\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\n        const annotations: string[] = imageData.labelNameIds.map((labelNameId: string) => {\n            return findLast(labelNames, {id: labelNameId}).name;\n        })\n        const labelFields = annotations.length !== 0 ? [\n            imageData.fileData.name,\n            `\"[${annotations.toString()}]\"`\n        ] : [];\n        return labelFields.join(\",\")\n    }\n\n    private static wrapLabelNamesIntoJSON(imageData: ImageData): string[] {\n        if (imageData.labelNameIds.length === 0 || !imageData.loadStatus)\n            return [];\n        const labelNames: LabelName[] = LabelsSelector.getLabelNames();\n        return imageData.labelNameIds.map((labelNameId: string) => {\n            return findLast(labelNames, {id: labelNameId}).name;\n        })\n    }\n}","import {ILabelFormatData} from '../interfaces/ILabelFormatData';\nimport {LabelType} from './enums/LabelType';\nimport {AnnotationFormatType} from './enums/AnnotationFormatType';\n\nexport type ExportFormatDataMap = Record<LabelType, ILabelFormatData[]>;\n\nexport const ExportFormatData: ExportFormatDataMap = {\n    [LabelType.RECT]: [\n        {\n            type: AnnotationFormatType.YOLO,\n            label: 'A .zip package containing files in YOLO format.'\n        },\n        {\n            type: AnnotationFormatType.VOC,\n            label: 'A .zip package containing files in VOC XML format.'\n        },\n        {\n            type: AnnotationFormatType.CSV,\n            label: 'Single CSV file.'\n        }\n    ],\n    [LabelType.POINT]: [\n        {\n            type: AnnotationFormatType.CSV,\n            label: 'Single CSV file.'\n        }\n    ],\n    [LabelType.LINE]: [\n        {\n            type: AnnotationFormatType.CSV,\n            label: 'Single CSV file.'\n        }\n    ],\n    [LabelType.POLYGON]: [\n        {\n            type: AnnotationFormatType.VGG,\n            label: 'Single file in VGG JSON format.'\n        },\n        {\n            type: AnnotationFormatType.COCO,\n            label: 'Single file in COCO JSON format.'\n        }\n    ],\n    [LabelType.IMAGE_RECOGNITION]: [\n        {\n            type: AnnotationFormatType.CSV,\n            label: 'Single CSV file.'\n        },\n        {\n            type: AnnotationFormatType.JSON,\n            label: 'Single JSON file.'\n        }\n    ]\n}\n","import React, {useState} from 'react'\nimport './ExportLabelPopup.scss'\nimport {AnnotationFormatType} from '../../../data/enums/AnnotationFormatType';\nimport {RectLabelsExporter} from '../../../logic/export/RectLabelsExporter';\nimport {LabelType} from '../../../data/enums/LabelType';\nimport {ILabelFormatData} from '../../../interfaces/ILabelFormatData';\nimport {PointLabelsExporter} from '../../../logic/export/PointLabelsExport';\nimport {PolygonLabelsExporter} from '../../../logic/export/polygon/PolygonLabelsExporter';\nimport {PopupActions} from '../../../logic/actions/PopupActions';\nimport {LineLabelsExporter} from '../../../logic/export/LineLabelExport';\nimport {TagLabelsExporter} from '../../../logic/export/TagLabelsExport';\nimport GenericLabelTypePopup from '../GenericLabelTypePopup/GenericLabelTypePopup';\nimport {ExportFormatData} from '../../../data/ExportFormatData';\nimport {AppState} from '../../../store';\nimport {connect} from 'react-redux';\n\ninterface IProps {\n    activeLabelType: LabelType,\n}\n\nconst ExportLabelPopup: React.FC <IProps> = ({activeLabelType}) => {\n    const [labelType, setLabelType] = useState(activeLabelType);\n    const [exportFormatType, setExportFormatType] = useState(null);\n\n    const onAccept = (labelType: LabelType) => {\n        switch (labelType) {\n            case LabelType.RECT:\n                RectLabelsExporter.export(exportFormatType);\n                break;\n            case LabelType.POINT:\n                PointLabelsExporter.export(exportFormatType);\n                break;\n            case LabelType.LINE:\n                LineLabelsExporter.export(exportFormatType);\n                break;\n            case LabelType.POLYGON:\n                PolygonLabelsExporter.export(exportFormatType);\n                break;\n            case LabelType.IMAGE_RECOGNITION:\n                TagLabelsExporter.export(exportFormatType);\n                break;\n        }\n        PopupActions.close();\n    };\n\n    const onReject = (labelType: LabelType) => {\n        PopupActions.close();\n    };\n\n    const onSelect = (exportFormatType: AnnotationFormatType) => {\n        setExportFormatType(exportFormatType);\n    };\n\n    const getOptions = (exportFormatData: ILabelFormatData[]) => {\n        return exportFormatData.map((entry: ILabelFormatData) => {\n            return <div\n                className='OptionsItem'\n                onClick={() => onSelect(entry.type)}\n                key={entry.type}\n            >\n                {entry.type === exportFormatType ?\n                    <img\n                        draggable={false}\n                        src={'/ico/checkbox-checked.png'}\n                        alt={'checked'}\n                    /> :\n                    <img\n                        draggable={false}\n                        src={'/ico/checkbox-unchecked.png'}\n                        alt={'unchecked'}\n                    />}\n                {entry.label}\n            </div>\n        })\n    };\n\n    const renderInternalContent = (labelType: LabelType) => {\n        return [\n            <div className='Message'>\n                Select label type and the file format you would like to use to export labels.\n            </div>,\n            <div className='Options'>\n                {getOptions(ExportFormatData[labelType])}\n            </div>\n        ]\n    }\n\n    const onLabelTypeChange = (labelType: LabelType) => {\n        setLabelType(labelType);\n        setExportFormatType(null);\n    }\n\n    return(\n        <GenericLabelTypePopup\n            activeLabelType={labelType}\n            title={`Export ${labelType.toLowerCase()} annotations`}\n            onLabelTypeChange={onLabelTypeChange}\n            acceptLabel={'Export'}\n            onAccept={onAccept}\n            disableAcceptButton={!exportFormatType}\n            rejectLabel={'Cancel'}\n            onReject={onReject}\n            renderInternalContent={renderInternalContent}\n        />\n    )\n};\n\nconst mapDispatchToProps = {};\n\nconst mapStateToProps = (state: AppState) => ({\n    activeLabelType: state.labels.activeLabelType,\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ExportLabelPopup);","import React from 'react';\nimport './PopupView.scss';\nimport { PopupWindowType } from \"../../data/enums/PopupWindowType\";\nimport { AppState } from \"../../store\";\nimport { connect } from \"react-redux\";\nimport LoadLabelsPopup from \"./LoadLabelNamesPopup/LoadLabelNamesPopup\";\nimport InsertLabelNamesPopup from \"./InsertLabelNamesPopup/InsertLabelNamesPopup\";\nimport ExitProjectPopup from \"./ExitProjectPopup/ExitProjectPopup\";\nimport LoadMoreImagesPopup from \"./LoadMoreImagesPopup/LoadMoreImagesPopup\";\nimport { LoadModelPopup } from \"./LoadModelPopup/LoadModelPopup\";\nimport SuggestLabelNamesPopup from \"./SuggestLabelNamesPopup/SuggestLabelNamesPopup\";\nimport { CSSHelper } from \"../../logic/helpers/CSSHelper\";\nimport { ClipLoader } from \"react-spinners\";\nimport ImportLabelPopup from \"./ImportLabelPopup/ImportLabelPopup\";\nimport ExportLabelPopup from \"./ExportLabelsPopup/ExportLabelPopup\";\n\ninterface IProps {\n    activePopupType: PopupWindowType;\n}\n\nconst PopupView: React.FC<IProps> = ({ activePopupType }) => {\n\n    const selectPopup = () => {\n        switch (activePopupType) {\n            case PopupWindowType.LOAD_LABEL_NAMES:\n                return <LoadLabelsPopup />;\n            case PopupWindowType.EXPORT_ANNOTATIONS:\n                return <ExportLabelPopup />;\n            case PopupWindowType.IMPORT_ANNOTATIONS:\n                return <ImportLabelPopup />;\n            case PopupWindowType.INSERT_LABEL_NAMES:\n                return <InsertLabelNamesPopup\n                    isUpdate={false}\n                />;\n            case PopupWindowType.UPDATE_LABEL:\n                return <InsertLabelNamesPopup\n                    isUpdate={true}\n                />;\n            case PopupWindowType.EXIT_PROJECT:\n                return <ExitProjectPopup />;\n            case PopupWindowType.IMPORT_IMAGES:\n                return <LoadMoreImagesPopup />;\n            case PopupWindowType.LOAD_AI_MODEL:\n                return <LoadModelPopup />;\n            case PopupWindowType.SUGGEST_LABEL_NAMES:\n                return <SuggestLabelNamesPopup />;\n            case PopupWindowType.LOADER:\n                return <ClipLoader\n                    size={50}\n                    color={CSSHelper.getLeadingColor()}\n                    loading={true}\n                />;\n            default:\n                return null;\n        }\n    };\n\n    return (\n        activePopupType && <div className=\"PopupView\">\n            {selectPopup()}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n    activePopupType: state.general.activePopupType\n});\n\nexport default connect(\n    mapStateToProps\n)(PopupView);","import React, { PropsWithChildren, useEffect, useState } from 'react';\nimport EditorView from '../../../views/EditorView/EditorView';\nimport {ProjectType} from '../../../data/enums/ProjectType';\nimport {AppState} from '../../../store';\nimport {connect} from 'react-redux';\nimport PopupView from '../../../views/PopupView/PopupView';\nimport {ISize} from '../../../interfaces/ISize';\nimport classNames from 'classnames';\nimport { ProjectData } from '../../../store/general/types';\nimport { PopupWindowType } from '../../../data/enums/PopupWindowType';\nimport { addImageData, updateActiveImageIndex, updateActiveLabelType, updateImageData, updateLabelNames, updateActiveLabelNameId, updateFirstLabelCreatedFlag } from '../../../store/labels/actionCreators';\nimport { updateActivePopupType, updateProjectData } from '../../../store/general/actionCreators';\nimport {ImageData, LabelName} from '../../../store/labels/types';\nimport { ImageDataUtil } from '../../../utils/ImageDataUtil';\nimport axios from 'axios';\nimport { LabelType } from '../../../data/enums/LabelType';\nimport { AnnotationFormatType } from '../../../data/enums/AnnotationFormatType';\nimport { ImporterSpecData } from '../../../data/ImporterSpecData';\n\ninterface IProps {\n    updateActiveImageIndexAction: (activeImageIndex: number) => any;\n    addImageDataAction: (imageData: ImageData[]) => any;\n    updateProjectDataAction: (projectData: ProjectData) => any;\n    updateActivePopupTypeAction: (activePopupType: PopupWindowType) => any;\n    updateImageDataAction: (imageData: ImageData[]) => any,\n    updateLabelNamesAction: (labels: LabelName[]) => any,\n    updateActiveLabelTypeAction: (activeLabelType: LabelType) => any\n    updateActiveImageIndex: (activeImageIndex: number) => any;\n    updateActiveLabelNameId: (activeLabelId: string) => any;\n    updateLabelNames: (labelNames: LabelName[]) => any;\n    updateImageData: (imageData: ImageData[]) => any;\n    updateFirstLabelCreatedFlag: (firstLabelCreatedFlag: boolean) => any;\n    updateProjectData: (projectData: ProjectData) => any;\n    imageUri: string;\n    labelsData: string[];\n    annotationData: string[];\n    projectType: ProjectType;\n    windowSize: ISize;\n    ObjectDetectorLoaded: boolean;\n    PoseDetectionLoaded: boolean;\n    projectData: ProjectData;\n    activeLabelType: LabelType,\n}\n\nconst ImageAnnotate: React.FC<IProps> = (props: PropsWithChildren<IProps>) => {\n    const [importReady, setImportReady] = useState(false)\n    const [imageReady, setImageReady] = useState(false)\n    const formatType = AnnotationFormatType.YOLO\n    const labelType = LabelType.RECT\n\n    useEffect(() => {\n        var imageFile : File;\n        var labelsFile: File;\n        var annotationFile: File;\n        var isMounted = true;\n\n        console.log('******************* MOUNTED');\n        const onAnnotationLoadSuccess = (imagesData: ImageData[], labelNames: LabelName[]) => {\n            props.updateImageDataAction(imagesData);\n            props.updateLabelNamesAction(labelNames);\n            props.updateActiveLabelTypeAction(labelType);\n        \n            console.log('import success');\n\n            setImportReady(true);\n        }\n    \n        const onAnnotationsLoadFailure = (error?:Error) => {    \n            console.log(error)\n        };\n    \n        async function init() {\n            var response = await axios.get(props.imageUri, {responseType: 'blob'})\n            var data = response.data;\n            imageFile = new File([data], 'image.png');\n            console.log(imageFile.size)\n\n            var labelsFile = new File(props.labelsData, 'labels.txt');\n            var annotationFile = new File(props.annotationData, 'annotation.txt');\n\n            props.updateLabelNames([]);\n            props.updateImageData([]);\n            props.updateFirstLabelCreatedFlag(false);\n    \n            props.updateProjectDataAction({\n                ...props.projectData,\n                type: ProjectType.OBJECT_DETECTION\n            });    \n            props.updateActiveImageIndexAction(0);\n            props.addImageDataAction([ImageDataUtil.createImageDataFromFileData(imageFile)]);\n\n            setImageReady(true);\n\n            const importer = new (ImporterSpecData[formatType])([labelType])\n            importer.import([labelsFile, annotationFile], onAnnotationLoadSuccess, onAnnotationsLoadFailure);         \n        };\n\n        init();\n\n        return () => { console.log('******************* UNMOUNTED');isMounted = false }\n    }, []);\n\n    return (\n        <div className={classNames('App', {'AI': props.ObjectDetectorLoaded || props.PoseDetectionLoaded})}\n            draggable={false}\n        >\n        {imageReady && <EditorView/>}\n        <PopupView/>\n        </div>\n    );\n};\n\nconst mapDispatchToProps = {\n    updateActiveImageIndexAction: updateActiveImageIndex,\n    addImageDataAction: addImageData,\n    updateProjectDataAction: updateProjectData,\n    updateActivePopupTypeAction: updateActivePopupType,\n    updateImageDataAction: updateImageData,\n    updateLabelNamesAction: updateLabelNames,\n    updateActiveLabelTypeAction: updateActiveLabelType,\n    updateActiveLabelNameId,\n    updateLabelNames,\n    updateProjectData,\n    updateActiveImageIndex,\n    updateImageData,\n    updateFirstLabelCreatedFlag\n};\n\nconst mapStateToProps = (state: AppState) => ({\n    projectType: state.general.projectData.type,\n    windowSize: state.general.windowSize,\n    ObjectDetectorLoaded: state.ai.isObjectDetectorLoaded,\n    PoseDetectionLoaded: state.ai.isPoseDetectorLoaded,\n    projectData: state.general.projectData,\n    activeLabelType: state.labels.activeLabelType,\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ImageAnnotate);","import { FunctionComponent, MouseEventHandler, useEffect, useState } from 'react';\nimport ImageList from '@mui/material/ImageList';\nimport ImageListItem from '@mui/material/ImageListItem';\nimport axios from 'axios';\nimport { Button, Container, FormField, Inline, Modal, Stack } from 'aws-northstar';\nimport URLImage from '../../Utils/URLImage';\nimport ImageAnnotate from '../../Utils/Annotate';\n\nvar fs = require('fs');\n\ntype OnClick = (event: React.MouseEvent<HTMLImageElement>) => void\n\ninterface ImageProps {\n    src: string;\n    width: number;\n    height: number;\n    current: string;\n    onClick?: OnClick;\n}\n\nconst Image: FunctionComponent<ImageProps> = (props) => {\n    if(props.current.endsWith(props.src))\n        return (\n            <img\n                    src={props.src}\n                    width={props.width}\n                    height={props.height}\n                    loading=\"lazy\"\n                    onClick={props.onClick}\n                    style={{\"border\": \"5px solid red\"}}\n                />\n        )\n    else\n        return (\n            <img\n                    src={props.src}\n                    width={props.width}\n                    height={props.height}\n                    loading=\"lazy\"\n                    onClick={props.onClick}\n                />\n        )\n}\n\nconst SampleForm: FunctionComponent = () => {\n    const [items, setItems] = useState<string[]>([])\n    const [current, setCurrent] = useState('')\n    const [filename, setFilename] = useState('')\n    const [label, setLabel] = useState<string[]>([])\n    const [bbox, setBbox] = useState<string[][]>([[]])\n    const [visible, setVisible] = useState(false);\n    var labels = ['squat', 'aluminothermic weld (atw)', 'tri metal weld (tmw)', 'fishplate joint (fj)', 'grinding marks', 'head check error', 'insulated rail joint (irj)', 'flash butt weld (fbw)', 'corrugation', 'rail head anomaly']\n    \n    const onImageClick = (event: React.MouseEvent<HTMLImageElement>) => {\n        const src = event.currentTarget.src\n        const filename = src.substring(src.lastIndexOf('/') + 1)\n        setCurrent(src)\n        setFilename(filename)\n        setLabel([]);\n    }\n\n    useEffect(() => {\n        axios.get('/samples')\n            .then((response) => {\n            var items : string[] = []\n            for(let item of response.data) {\n                items.push(item)\n            }\n            setItems(items);\n            console.log(items);\n        }, (error) => {\n            console.log(error);\n        });\n    }, [])\n\n    const onInference = () => {\n        axios.get('/inference/sample/' + filename)\n        .then((response) => {\n            var tlabel = [];\n            var tbbox = [];\n            for(let item of response.data) {\n                tlabel.push(item.label)\n                var numbers = item.bbox.toString().split(',');\n                tbbox.push(numbers);\n            }\n            setLabel(tlabel);\n            setBbox(tbbox);\n        }, (error) => {\n            console.log(error);\n        });\n    }\n    \n    const onAnnotate = () => {\n        setVisible(true);\n    }\n\n    if(visible) {\n        var annotationData : string[] = [];\n        bbox.forEach(item => {\n            annotationData.push(item + '\\r');\n        });\n        var labelsData : string[] = [];\n        labels.forEach(label => {\n            labelsData.push(label + '\\r');\n        })\n\n        return (\n            <Container title = \"Image annotation\">\n                <ImageAnnotate imageUri={current} labelsData={labelsData} annotationData={annotationData}/>\n                <FormField controlId='button'>\n                    <Button variant=\"primary\" onClick={()=>setVisible(false)}>Close</Button>\n                </FormField>\n            </Container>\n        )\n    }\n    \n    if(filename === '')\n        return (\n            <Stack>\n                <Container title = \"Select image file from sample list\">\n                    <ImageList cols={12} rowHeight={128} gap={10} variant={'quilted'} style={{\"height\":\"550px\"}}>\n                        {items.map((item, index) => (\n                            <ImageListItem key={item} rows={2}>\n                            <Image\n                                src={item}\n                                width={128}\n                                height={256}\n                                current={current}\n                                onClick={onImageClick}\n                            />\n                            </ImageListItem>\n                        ))}\n                    </ImageList>\n                </Container>\n                <Container title = \"Start inference\">\n                    <FormField controlId='button'>\n                        <Button variant=\"primary\" onClick={onInference}>Inference</Button>\n                    </FormField>\n                </Container>\n            </Stack>\n        )\n    else\n        return (\n            <Stack>\n                <Container title = \"Select image file from sample list\">\n                    <ImageList cols={12} rowHeight={128} gap={10} variant={'quilted'} style={{\"height\":\"550px\"}}>\n                        {items.map((item, index) => (\n                            <ImageListItem key={item} rows={2}>\n                            <Image\n                                src={item}\n                                width={128}\n                                height={256}\n                                current={current}\n                                onClick={onImageClick}\n                            />\n                            </ImageListItem>\n                        ))}\n                    </ImageList>\n                </Container>\n                <Container title = \"Start inference\">\n                    <FormField controlId='button'>\n                        <URLImage src={current} label={label} bbox={bbox}/>\n                    </FormField>\n                    <Inline>\n                        <FormField controlId='button'>\n                            <Button variant=\"primary\" onClick={onInference}>Inference</Button>\n                        </FormField>\n                        <FormField controlId='button'>\n                            <Button onClick={onAnnotate}>Annotate</Button>\n                        </FormField>\n                    </Inline>\n                </Container>\n            </Stack>\n    )\n}\n\nexport default SampleForm;","import { FunctionComponent, ChangeEvent, useState } from 'react';\nimport RadioButton from 'aws-northstar/components/RadioButton';\nimport RadioGroup from 'aws-northstar/components/RadioGroup';\nimport { Stack, Heading, Container } from 'aws-northstar';\nimport InferenceForm from '../Inference';\nimport TransformForm from '../Transform';\nimport SampleForm from '../Sample';\n\ninterface DemoProps {\n    name: string;\n}\n\nconst DemoForm: FunctionComponent<DemoProps> = (props) => {\n    const [stateType, setStateType] = useState('2')\n\n    const onChange = (event?: ChangeEvent<HTMLInputElement>, value?: string)=>{\n        var option : string = value || ''\n        setStateType(option)\n    }\n    if(stateType === '1')\n        return (\n                <Stack>\n                    <Heading variant='h1'>{props.name}</Heading>\n                    <Container title = \"Demo type\">\n                        <RadioGroup onChange={onChange}\n                            items={[\n                                <RadioButton value='0' checked={false}>Batch transform</RadioButton>, \n                                <RadioButton value='1' checked={true}>Realtime inference with uploaded image</RadioButton>,                \n                                <RadioButton value='2' checked={false}>Realtime inference with sample image</RadioButton>,                \n                            ]}\n                        />\n                    </Container>\n                    <InferenceForm/>\n                </Stack>\n        )\n    else if(stateType === '0')\n        return (\n            <Stack>\n                <Heading variant='h1'>{props.name}</Heading>\n                <Container title = \"Demo type\">\n                    <RadioGroup onChange={onChange}\n                        items={[\n                            <RadioButton value='0' checked={true}>Batch transform</RadioButton>, \n                            <RadioButton value='1' checked={false}>Realtime inference with uploaded image</RadioButton>,                \n                            <RadioButton value='2' checked={false}>Realtime inference with sample image</RadioButton>,                \n                        ]}\n                    />\n                </Container>\n                <TransformForm/>\n            </Stack>\n        )\n    else\n        return (\n            <Stack>\n                <Heading variant='h1'>{props.name}</Heading>\n                <Container title = \"Demo type\">\n                    <RadioGroup onChange={onChange}\n                        items={[\n                            <RadioButton value='0' checked={false}>Batch transform</RadioButton>, \n                            <RadioButton value='1' checked={false}>Realtime inference with uploaded image</RadioButton>,                \n                            <RadioButton value='2' checked={true}>Realtime inference with sample image</RadioButton>,                \n                        ]}\n                    />\n                </Container>\n                <SampleForm/>\n            </Stack>\n    )\n}\n\nexport default DemoForm;","import React, { FunctionComponent, useState } from 'react';\nimport Table from 'aws-northstar/components/Table';\nimport StatusIndicator from 'aws-northstar/components/StatusIndicator';\nimport Button from 'aws-northstar/components/Button';\nimport Inline from 'aws-northstar/layouts/Inline';\nimport ButtonDropdown from 'aws-northstar/components/ButtonDropdown';\nimport {Column} from 'react-table'\nimport { useHistory } from 'react-router-dom'; \n\ninterface DataType {\n    name: string;\n    creation_time: string;\n    duration: string;\n    status?: string;\n}\n\nconst columnDefinitions : Column<DataType>[]= [\n    {\n        id: 'name',\n        width: 200,\n        Header: 'Name',\n        accessor: 'name'\n    },\n    {\n        id: 'creation_time',\n        width: 200,\n        Header: 'Creation time',\n        accessor: 'creation_time'\n    },\n    {\n        id: 'duration',\n        width: 200,\n        Header: 'Duration',\n        accessor: 'duration'\n    },\n    {\n        id: 'status',\n        width: 200,\n        Header: 'Status',\n        accessor: 'status',\n        Cell: ({ row  }) => {\n            if (row && row.original) {\n                const status = row.original.status;\n                switch(status) {\n                    case 'completed':\n                        return <StatusIndicator  statusType='positive'>Completed</StatusIndicator>;\n                    case 'error':\n                        return <StatusIndicator  statusType='negative'>Error</StatusIndicator>;\n                    case 'info':\n                        return <StatusIndicator  statusType='info'>In progress</StatusIndicator>;\n                    default:\n                        return null;\n                }\n            }\n            return null;\n        }\n    }\n];\n\nconst data = [\n    {\n        name: 'training-job-1',\n        creation_time: 'Aug 26, 2021 03:01 UTC',\n        duration: '3 hours',\n        status: 'completed'\n    }\n];\n\ninterface TrainingJobListProps {\n    name: string;\n}\n\nconst TrainingJobList: FunctionComponent<TrainingJobListProps> = (props) => {\n    const getRowId = React.useCallback(data => data.name, []);\n\n    const history = useHistory();\n\n    const onCreate = () => {\n        history.push('/form/' + props.name + '/trainingjob')\n    }\n    \n    const tableActions = (\n        <Inline>\n            <Button onClick={() => alert('Add button clicked')}>\n                Sample code\n            </Button>\n            <ButtonDropdown\n                content=\"Action\"\n                    items={[{ text: 'Clone' }, { text: 'Create model' }, { text: 'Stop', disabled: true }, { text: 'Add/Edit tags' }]}\n            />        \n            <Button variant='primary' onClick={onCreate}>\n                Create\n            </Button>\n        </Inline>\n    );\n    \n    return (\n        <Table\n            actionGroup={tableActions}\n            tableTitle='Training jobs'\n            multiSelect={false}\n            columnDefinitions={columnDefinitions}\n            items={data}\n            onSelectionChange={console.log}\n            getRowId={getRowId}\n        />\n    )\n}\n\nexport default TrainingJobList;","import React, { FunctionComponent, useState } from 'react';\nimport Table from 'aws-northstar/components/Table';\nimport Button from 'aws-northstar/components/Button';\nimport Inline from 'aws-northstar/layouts/Inline';\nimport ButtonDropdown from 'aws-northstar/components/ButtonDropdown';\nimport {Column} from 'react-table'\nimport { useHistory } from 'react-router-dom';\n\ninterface DataType {\n    name: string;\n    creation_time: string;\n    training_job?: string;\n}\n\nconst columnDefinitions : Column<DataType>[]= [\n    {\n        id: 'name',\n        width: 100,\n        Header: 'Name',\n        accessor: 'name'\n    },\n    {\n        id: 'creation_time',\n        width: 200,\n        Header: 'Creation time',\n        accessor: 'creation_time'\n    },\n    {\n        id: 'training_job',\n        width: 400,\n        Header: 'Training job',\n        accessor: 'training_job'\n    }\n];\n\nconst data = [\n    {\n        name: 'model-1',\n        creation_time: 'Aug 26, 2021 03:01 UTC',\n        training_job: 'training-job-1'\n    }\n];\n\ninterface ModelProps {\n    name: string;\n}\n\nconst ModelList: FunctionComponent<ModelProps> = (props) => {\n    const getRowId = React.useCallback(data => data.name, []);\n\n    const history = useHistory();\n\n    const onCreate = () => {\n        history.push('/form/' + props.name + '/model')\n    }\n\n    const tableActions = (\n        <Inline>\n            <Button onClick={() => alert('Add button clicked')}>\n                Sample code\n            </Button>\n            <ButtonDropdown\n                content=\"Action\"\n                    items={[{ text: 'Clone' }, { text: 'Create endpoint' }, { text: 'Add/Edit tags' }]}\n            />        \n            <Button variant='primary' onClick={onCreate}>\n                Create\n            </Button>\n        </Inline>\n    );\n    \n    return (\n        <Table\n            actionGroup={tableActions}\n            tableTitle='Models'\n            multiSelect={false}\n            columnDefinitions={columnDefinitions}\n            items={data}\n            onSelectionChange={console.log}\n            getRowId={getRowId}\n        />\n    )\n}\n\nexport default ModelList;","\nimport React, { FunctionComponent, useState } from 'react';\nimport Table from 'aws-northstar/components/Table';\nimport StatusIndicator from 'aws-northstar/components/StatusIndicator';\nimport Button from 'aws-northstar/components/Button';\nimport Inline from 'aws-northstar/layouts/Inline';\nimport ButtonDropdown from 'aws-northstar/components/ButtonDropdown';\nimport {Column} from 'react-table'\nimport { useHistory } from 'react-router-dom';\n\ninterface DataType {\n    name: string;\n    model: string;\n    creation_time: string;\n    status: string;\n    last_updated: string;\n}\n\nconst columnDefinitions : Column<DataType>[]= [\n    {\n        id: 'name',\n        width: 100,\n        Header: 'Name',\n        accessor: 'name'\n    },\n    {\n        id: 'model',\n        width: 400,\n        Header: 'Container image',\n        accessor: 'model'\n    },\n    {\n        id: 'creation_time',\n        width: 200,\n        Header: 'Creation time',\n        accessor: 'creation_time'\n    },\n    {\n        id: 'status',\n        width: 400,\n        Header: 'Model artificate',\n        accessor: 'status',\n        Cell: ({ row  }) => {\n            if (row && row.original) {\n                const status = row.original.status;\n                switch(status) {\n                    case 'completed':\n                        return <StatusIndicator  statusType='positive'>In service</StatusIndicator>;\n                    case 'error':\n                        return <StatusIndicator  statusType='negative'>Error</StatusIndicator>;\n                    case 'info':\n                        return <StatusIndicator  statusType='info'>In progress</StatusIndicator>;\n                    default:\n                        return null;\n                }\n            }\n            return null;\n        }\n    },\n    {\n        id: 'last_update',\n        width: 400,\n        Header: 'Last updated',\n        accessor: 'last_updated'\n    }\n];\n\nconst data = [\n    {\n        name: 'endpoint-1',\n        model: 'model-1',\n        creation_time: 'Aug 26, 2021 03:01 UTC',\n        status: 'completed',\n        last_updated: 'Aug 26, 2021 03:01 UTC'\n    }\n];\n\ninterface ModelProps {\n    name: string;\n}\n\nconst EndpointList: FunctionComponent<ModelProps> = (props) => {\n    const getRowId = React.useCallback(data => data.name, []);\n\n    const history = useHistory();\n\n    const onCreate = () => {\n        history.push('/form/' + props.name + '/endpoint')\n    }\n    \n    const tableActions = (\n        <Inline>\n            <Button onClick={() => alert('Add button clicked')}>\n                Sample code\n            </Button>\n            <ButtonDropdown\n                content=\"Action\"\n                    items={[{ text: 'Clone' }, { text: 'Create rest api' }, { text: 'Stop', disabled: true }, { text: 'Add/Edit tags' }]}\n            />        \n            <Button variant='primary' onClick={onCreate}>\n                Create\n            </Button>\n        </Inline>\n    );\n    \n    return (\n        <Table\n            actionGroup={tableActions}\n            tableTitle='Models'\n            multiSelect={false}\n            columnDefinitions={columnDefinitions}\n            items={data}\n            onSelectionChange={console.log}\n            getRowId={getRowId}\n        />\n    )\n}\n\nexport default EndpointList;","import React, { FunctionComponent, useState } from 'react';\nimport Table from 'aws-northstar/components/Table';\nimport Button from 'aws-northstar/components/Button';\nimport Inline from 'aws-northstar/layouts/Inline';\nimport ButtonDropdown from 'aws-northstar/components/ButtonDropdown';\nimport {Column} from 'react-table'\nimport { useHistory } from 'react-router-dom';\n\ninterface DataType {\n    name: string;\n    endpoint: string;\n    creation_time: string;\n    api: string;\n    path: string;\n    uri: string;\n}\n\nconst columnDefinitions : Column<DataType>[]= [\n    {\n        id: 'name',\n        width: 100,\n        Header: 'Name',\n        accessor: 'name'\n    },\n    {\n        id: 'endpoint',\n        width: 100,\n        Header: 'Endpoint',\n        accessor: 'endpoint'\n    },\n    {\n        id: 'creation_time',\n        width: 200,\n        Header: 'Creation time',\n        accessor: 'creation_time'\n    },\n    {\n        id: 'api',\n        width: 150,\n        Header: 'Api gateway',\n        accessor: 'api'\n    },\n    {\n        id: 'path',\n        width: 100,\n        Header: 'Api path',\n        accessor: 'path'\n    }\n    ,\n    {\n        id: 'uri',\n        width: 400,\n        Header: 'Api uri',\n        accessor: 'uri'\n    }\n];\n\nconst data = [\n    {\n        name: 'model-1',\n        endpoint: 'endpoint-1',\n        creation_time: 'Aug 26, 2021 03:01 UTC',\n        api: 'spot-bot-api',\n        path: '/image',\n        uri: 'https://9tary5tnu5.execute-api.ap-east-1.amazonaws.com/Prod/image'\n    }\n];\n\ninterface RestapiProps {\n    name: string;\n}\n\nconst RestApiList: FunctionComponent<RestapiProps> = (props) => {\n    const getRowId = React.useCallback(data => data.name, []);\n\n    const history = useHistory();\n\n    const onCreate = () => {\n        history.push('/form/' + props.name + '/restapi')\n    }\n\n    const tableActions = (\n        <Inline>\n            <Button onClick={() => alert('Add button clicked')}>\n                Sample code\n            </Button>\n            <ButtonDropdown\n                content=\"Action\"\n                    items={[{ text: 'Clone' }, { text: 'Delete' }, { text: 'Add/Edit tags' }]}\n            />        \n            <Button variant='primary' onClick={onCreate}>\n                Create\n            </Button>\n        </Inline>\n    );\n    \n    return (\n        <Table\n            actionGroup={tableActions}\n            tableTitle='Models'\n            multiSelect={false}\n            columnDefinitions={columnDefinitions}\n            items={data}\n            onSelectionChange={console.log}\n            getRowId={getRowId}\n        />\n    )\n}\n\nexport default RestApiList;","import React, { FunctionComponent, useState } from 'react';\nimport Table from 'aws-northstar/components/Table';\nimport Button from 'aws-northstar/components/Button';\nimport Inline from 'aws-northstar/layouts/Inline';\nimport ButtonDropdown from 'aws-northstar/components/ButtonDropdown';\nimport {Column} from 'react-table'\nimport { useHistory } from 'react-router-dom';\n\ninterface DataType {\n    name: string;\n    model?: string;\n    version: string;\n    version_created: string;\n}\n\nconst columnDefinitions : Column<DataType>[]= [\n    {\n        id: 'name',\n        width: 200,\n        Header: 'Name',\n        accessor: 'name'\n    },\n    {\n        id: 'model',\n        width: 200,\n        Header: 'Model',\n        accessor: 'model'\n    },\n    {\n        id: 'version',\n        width: 200,\n        Header: 'Version',\n        accessor: 'version'\n    },\n    {\n        id: 'version_created',\n        width: 200,\n        Header: 'Version created',\n        accessor: 'version_created'\n    }\n];\n\nconst data = [\n    {\n        name: 'component-model-1',\n        model: 'model-1',\n        version: '1.0.0',\n        version_created: 'Aug 26, 2021 03:01 UTC'\n    }\n];\n\ninterface ComponentProps {\n    name: string;\n}\n\nconst GreengrassComponentList: FunctionComponent<ComponentProps> = (props) => {\n    const getRowId = React.useCallback(data => data.name, []);\n\n    const history = useHistory();\n\n    const onCreate = () => {\n        history.push('/form/' + props.name + '/component')\n    }\n\n    const tableActions = (\n        <Inline>\n            <Button onClick={() => alert('Add button clicked')}>\n                Sample code\n            </Button>\n            <ButtonDropdown\n                content=\"Action\"\n                    items={[{ text: 'Clone' }, { text: 'Create endpoint' }, { text: 'Add/Edit tags' }]}\n            />        \n            <Button variant='primary' onClick={onCreate}>\n                Create\n            </Button>\n        </Inline>\n    );    \n\n    return (\n        <Table\n            actionGroup={tableActions}\n            tableTitle='Greengrass components'\n            multiSelect={false}\n            columnDefinitions={columnDefinitions}\n            items={data}\n            onSelectionChange={console.log}\n            getRowId={getRowId}\n        />\n    )\n}\n\nexport default GreengrassComponentList;","\nimport React, { FunctionComponent, useState } from 'react';\nimport Table from 'aws-northstar/components/Table';\nimport StatusIndicator from 'aws-northstar/components/StatusIndicator';\nimport Button from 'aws-northstar/components/Button';\nimport Inline from 'aws-northstar/layouts/Inline';\nimport ButtonDropdown from 'aws-northstar/components/ButtonDropdown';\nimport {Column} from 'react-table'\nimport { useHistory } from 'react-router-dom';\n\ninterface DataType {\n    name: string;\n    target_name: string;\n    target_type: string;\n    status: string;\n    deployment_created: string;\n}\n\nconst columnDefinitions : Column<DataType>[]= [\n    {\n        id: 'name',\n        width: 300,\n        Header: 'Name',\n        accessor: 'name'\n    },\n    {\n        id: 'target_name',\n        width: 200,\n        Header: 'Target name',\n        accessor: 'target_name'\n    },\n    {\n        id: 'target_type',\n        width: 100,\n        Header: 'Target type',\n        accessor: 'target_type'\n    },\n    {\n        id: 'status',\n        width: 100,\n        Header: 'Model artificate',\n        accessor: 'status',\n        Cell: ({ row  }) => {\n            if (row && row.original) {\n                const status = row.original.status;\n                switch(status) {\n                    case 'active':\n                        return <StatusIndicator  statusType='positive'>Active</StatusIndicator>;\n                    case 'completed':\n                        return <StatusIndicator  statusType='positive'>Completed</StatusIndicator>;\n                    case 'error':\n                        return <StatusIndicator  statusType='negative'>Error</StatusIndicator>;\n                    case 'canceled':\n                        return <StatusIndicator  statusType='info'>Canceled</StatusIndicator>;\n                    default:\n                        return null;\n                }\n            }\n            return null;\n        }\n    },\n    {\n        id: 'deployment_created',\n        width: 200,\n        Header: 'Deployment created',\n        accessor: 'deployment_created'\n    }\n];\n\nconst data = [\n    {\n        name: 'Deployment for GreengrassQuickStartGroup',\n        target_name: 'GreengrassQuickStartGroup',\n        target_type: 'Thing group',\n        status: 'active',\n        deployment_created: 'Aug 26, 2021 03:01 UTC'\n    }\n];\n\ninterface DeploymentProps {\n    name: string;\n}\n\nconst GreengrassDeploymentList: FunctionComponent<DeploymentProps> = (props) => {\n    const getRowId = React.useCallback(data => data.name, []);\n\n    const history = useHistory();\n\n    const onCreate = () => {\n        history.push('/form/' + props.name + '/deployment')\n    }\n\n    const tableActions = (\n        <Inline>\n            <Button onClick={() => alert('Add button clicked')}>\n                Sample code\n            </Button>\n            <ButtonDropdown\n                content=\"Action\"\n                    items={[{ text: 'Clone' }, { text: 'Create rest api' }, { text: 'Stop', disabled: true }, { text: 'Add/Edit tags' }]}\n            />        \n            <Button variant='primary' onClick={onCreate}>\n                Create\n            </Button>\n        </Inline>\n    );\n    \n    return (\n        <Table\n            actionGroup={tableActions}\n            tableTitle='Greengrass deployments'\n            multiSelect={false}\n            columnDefinitions={columnDefinitions}\n            items={data}\n            onSelectionChange={console.log}\n            getRowId={getRowId}\n        />\n    )\n}\n\nexport default GreengrassDeploymentList;","import React, { FunctionComponent, useState } from 'react';\nimport Table from 'aws-northstar/components/Table';\nimport StatusIndicator from 'aws-northstar/components/StatusIndicator';\nimport Button from 'aws-northstar/components/Button';\nimport Inline from 'aws-northstar/layouts/Inline';\nimport ButtonDropdown from 'aws-northstar/components/ButtonDropdown';\nimport {Column} from 'react-table'\nimport { useHistory } from 'react-router-dom';\n\ninterface DataType {\n    name: string;\n    training_job_status?: string;\n    model_status?: string;\n    endpoint_status?: string;\n    restapi_status?: string;\n    component_status?: string;\n    deployment_status?: string;    \n    creation_time: string;\n    last_updated: string;\n}\n\nconst columnDefinitions : Column<DataType>[]= [\n    {\n        id: 'name',\n        width: 100,\n        Header: 'Name',\n        accessor: 'name'\n    },\n    {\n        id: 'training_job_status',\n        width: 130,\n        Header: 'Training job',\n        accessor: 'training_job_status',\n        Cell: ({ row  }) => {\n            if (row && row.original) {\n                const status = row.original.training_job_status;\n                switch(status) {\n                    case 'completed':\n                        return <StatusIndicator  statusType='positive'>Completed</StatusIndicator>;\n                    case 'error':\n                        return <StatusIndicator  statusType='negative'>Error</StatusIndicator>;\n                    case 'info':\n                        return <StatusIndicator  statusType='info'>In progress</StatusIndicator>;\n                    default:\n                        return null;\n                }\n            }\n            return null;\n        }\n    },\n    {\n        id: 'model_status',\n        width: 80,\n        Header: 'Model',\n        accessor: 'model_status',\n        Cell: ({ row  }) => {\n            if (row && row.original) {\n                const status = row.original.model_status;\n                switch(status) {\n                    case 'active':\n                        return <StatusIndicator  statusType='positive'>Active</StatusIndicator>;\n                    case 'error':\n                        return <StatusIndicator  statusType='negative'>Error</StatusIndicator>;\n                    default:\n                        return null;\n                }\n            }\n            return null;\n        }\n    },\n    {\n        id: 'endpoint_status',\n        width: 100,\n        Header: 'Endpoint',\n        accessor: 'endpoint_status',\n        Cell: ({ row  }) => {\n            if (row && row.original) {\n                const status = row.original.endpoint_status;\n                switch(status) {\n                    case 'completed':\n                        return <StatusIndicator  statusType='positive'>Completed</StatusIndicator>;\n                    case 'error':\n                        return <StatusIndicator  statusType='negative'>Error</StatusIndicator>;\n                    case 'info':\n                        return <StatusIndicator  statusType='info'>In progress</StatusIndicator>;\n                    default:\n                        return null;\n                }\n            }\n            return null;\n        }\n    },\n    {\n        id: 'restapi_status',\n        width: 100,\n        Header: 'Rest api',\n        accessor: 'restapi_status',\n        Cell: ({ row  }) => {\n            if (row && row.original) {\n                const status = row.original.restapi_status;\n                switch(status) {\n                    case 'active':\n                        return <StatusIndicator  statusType='positive'>Active</StatusIndicator>;\n                    case 'error':\n                        return <StatusIndicator  statusType='negative'>Error</StatusIndicator>;\n                    default:\n                        return null;\n                }\n            }\n            return null;\n        }\n    },\n    {\n        id: 'component_status',\n        width: 100,\n        Header: 'Greengrass component',\n        accessor: 'component_status',\n        Cell: ({ row  }) => {\n            if (row && row.original) {\n                const status = row.original.component_status;\n                switch(status) {\n                    case 'active':\n                        return <StatusIndicator  statusType='positive'>Active</StatusIndicator>;\n                    case 'error':\n                        return <StatusIndicator  statusType='negative'>Error</StatusIndicator>;\n                    default:\n                        return null;\n                }\n            }\n            return null;\n        }\n    },\n    {\n        id: 'deployment_status',\n        width: 100,\n        Header: 'Greengrass deployment',\n        accessor: 'deployment_status',\n        Cell: ({ row  }) => {\n            if (row && row.original) {\n                const status = row.original.deployment_status;\n                switch(status) {\n                    case 'completed':\n                        return <StatusIndicator  statusType='positive'>Completed</StatusIndicator>;\n                    case 'error':\n                        return <StatusIndicator  statusType='negative'>Error</StatusIndicator>;\n                    case 'info':\n                        return <StatusIndicator  statusType='info'>In progress</StatusIndicator>;\n                    default:\n                        return null;\n                }\n            }\n            return null;\n        }\n    },\n    {\n        id: 'creation_time',\n        width: 150,\n        Header: 'Creation time',\n        accessor: 'creation_time'\n    },   \n    {\n        id: 'last_update',\n        width: 150,\n        Header: 'Last updated',\n        accessor: 'last_updated'\n    }   \n];\n\nconst data = [\n    {\n        name: 'training-job-1',\n        'training_job_status': 'completed',\n        'model_status': 'active',\n        'endpoint_status': 'completed',\n        'restapi_status': 'active',\n        'component_status': 'active',\n        'deployment_status': 'completed',\n        creation_time: 'Aug 26, 2021 03:01 UTC',\n        last_updated: 'Aug 26, 2021 03:01 UTC'\n    }\n];\n\ninterface PipelineListProps {\n    name: string;\n}\n\nconst PipelineList: FunctionComponent<PipelineListProps> = (props) => {\n    const getRowId = React.useCallback(data => data.name, []);\n\n    const history = useHistory();\n\n    const onCreate = () => {\n        history.push('/form/' + props.name + '/pipeline')\n    }\n\n    const tableActions = (\n        <Inline>\n            <Button onClick={() => alert('Add button clicked')}>\n                Sample code\n            </Button>\n            <ButtonDropdown\n                content=\"Action\"\n                    items={[{ text: 'Clone' }, { text: 'Create model' }, { text: 'Stop', disabled: true }, { text: 'Add/Edit tags' }]}\n            />        \n            <Button variant='primary' onClick={onCreate}>\n                Create\n            </Button>\n        </Inline>\n    );\n    \n    return (\n        <Table\n            actionGroup={tableActions}\n            tableTitle='Pipeline'\n            multiSelect={false}\n            columnDefinitions={columnDefinitions}\n            items={data}\n            onSelectionChange={console.log}\n            getRowId={getRowId}\n        />\n    )\n}\n\nexport default PipelineList;","import { FunctionComponent } from 'react';\nimport Tabs from 'aws-northstar/components/Tabs';\nimport {useHistory, useParams} from \"react-router-dom\";\nimport DemoForm from '../Forms/Demo';\nimport TrainingJobList from '../Lists/TrainingJob';\nimport ModelList from '../Lists/Model';\nimport EndpointList from '../Lists/Endpoint';\nimport RestApiList from '../Lists/RestApi';\nimport GreengrassComponentList from '../Lists/GreengrassComponent';\nimport GreengrassDeploymentList from '../Lists/GreengrassDeployment';\nimport PipelineList from '../Lists/Pipeline';\n\ninterface PathParams {\n    name: string;\n}\n\ninterface CaseProps {\n    activeId: string;\n}\n\nconst Case: FunctionComponent<CaseProps> = (props) => {\n    var params : PathParams = useParams();\n    var name = params.name\n\n    const history = useHistory();\n\n    const onChange = (activeTabId: string) => {\n        history.push('/case/'+name + '/' + activeTabId)\n    }\n\n    const tabs = [\n        {\n            label: 'Demo',\n            id: 'demo',\n            content: <DemoForm name = {name}/>\n        },\n        {\n            label: 'ML pipelines',\n            id: 'pipeline',\n            content: <PipelineList name = {name} />\n        },\n        {\n            label: 'Training jobs',\n            id: 'trainingjob',\n            content: <TrainingJobList name = {name} />\n        },\n        {\n            label: 'Models',\n            id: 'model',\n            content: <ModelList name = {name}/>\n        },\n        {\n            label: 'Endpoints',\n            id: 'endpoint',\n            content: <EndpointList name = {name}/>\n        },\n        {\n            label: 'Rest apis',\n            id: 'restapi',\n            content: <RestApiList name = {name}/>\n        },\n        {\n            label: 'Greengrass components',\n            id: 'component',\n            content: <GreengrassComponentList name = {name}/>\n        },\n        {\n            label: 'Greengrass deployments',\n            id: 'deployment',\n            content: <GreengrassDeploymentList name = {name}/>\n        }\n    ];\n    return (\n        <Tabs tabs={tabs} variant=\"container\" activeId={props.activeId} onChange={onChange}/>\n    )\n}\nexport default Case;","import { FunctionComponent } from 'react';\nimport { Stack, Container, Text, Link } from 'aws-northstar';\n\nconst Yolov5: FunctionComponent = () => {\n    return (\n        <Stack>\n            <Container title='About Yolov5'>\n                <Text> \n                YOLOv5 🚀 is a family of object detection architectures and models pretrained on the COCO dataset, and represents Ultralytics open-source research into future vision AI methods, incorporating lessons learned and best practices evolved over thousands of hours of research and development.\n                </Text>\n                <img src='/yolov5.jpg' width = '1000'></img>\n            </Container>\n            <Container title = 'Yolov5 project'>\n                <Text>\n                    Check out <Link href=\"https://github.com/ultralytics/yolov5\"> Yolov5 </Link> for source code and full documentation on training, testing and deployment.\n                </Text>\n            </Container>\n            <Container title = 'Yolov5 SageMaker'>\n                <Text>\n                    See the <Link href=\"https://github.com/whn09/yolov5_sagemaker\"> Yolov5 SageMaker</Link> on Yolov5 training, testing and deployment on AWS SageMaker.\n                </Text>\n            </Container>\n        </Stack>\n    );\n}\n\nexport default Yolov5;","import { FunctionComponent } from 'react';\nimport { Stack, Container, Text, Link } from 'aws-northstar';\n\nconst PPE: FunctionComponent = () => {\n    return (\n        <Stack>\n            <Container title='About PPE'>\n                <Text> \n                Personal protective equipment, commonly referred to as \"PPE\", is equipment worn to minimize exposure to hazards that cause serious workplace injuries and illnesses. These injuries and illnesses may result from contact with chemical, radiological, physical, electrical, mechanical, or other workplace hazards. Personal protective equipment may include items such as gloves, safety glasses and shoes, earplugs or muffs, hard hats, respirators, or coveralls, vests and full body suits.\n                </Text>\n            </Container>\n            <Container title = 'AWS PPE detection solution'>\n                <Text>\n                A suite of PPE Detector hardware + AI + 3rd party service solutions. It aims to transform the existing physical assets of manufacturing enterprises into smart assets. For example, there are many\nIP camera system. These cameras are primarily used to record video capabilities in fixed physical areas and do not have the ability to actively monitor, for example, whether workers are wearing safety helmets correctly.\nUsing the out-of-the-box AI kit, you can connect these IP cameras to the kit, and the AI model in the kit can identify the worker's helmet wearing in the video in real time. Once sent\nIf you violate the rules (without wearing a helmet), an alarm message will be automatically sent to the manager's corporate WeChat, and picture evidence will be provided.                </Text>\n            </Container>\n            <Container title = 'Architecture diagram'>\n                <img src='/ppe.png' width = '1000'></img>\n            </Container>\n            <Container title = 'Reference Website'>\n            <Text>\n                    Check out <Link href=\"https://cn.spot-bot.examples.pro\"> PPE Detection </Link> for demostration.\n                </Text>\n            </Container>\n        </Stack>\n    );\n}\n\nexport default PPE;","import React, { FunctionComponent } from 'react';\nimport FormSection from 'aws-northstar/components/FormSection';\nimport FormField from 'aws-northstar/components/FormField';\nimport Input from 'aws-northstar/components/Input';\nimport { Form, Button, Inline, Wizard, Stack } from 'aws-northstar';\nimport { useHistory } from 'react-router-dom'; \nimport SimpleSelect from '../../Utils/SimpleSelect';\nimport {useParams} from \"react-router-dom\";\n\ninterface SelectOption {\n    label?: string;\n    value?: string;\n    options?: SelectOption[];\n}\n\ntype OnChange = (name: string, value: string) => void\n\nconst optionsInstance : SelectOption[]= [\n    {\n        label: 'Standard', \n        options: [ \n            { label: 'ml.m5.large', value: 'ml.m5.large' }, \n            { label: 'ml.m5.xlarge', value: 'ml.m5.xlarge' }, \n            { label: 'ml.m5.2xlarge', value: 'ml.m5.2xlarge' }, \n            { label: 'ml.m5.4xlarge', value: 'ml.m5.4xlarge' }, \n            { label: 'ml.m5.12xlarge', value: 'ml.m5.12xlarge' }, \n            { label: 'ml.m5.24xlarge', value: 'ml.m5.24xlarge' },\n            { label: 'ml.m4.xlarge', value: 'ml.m4.xlarge' }, \n            { label: 'ml.m4.2xlarge', value: 'ml.m4.2xlarge' }, \n            { label: 'ml.m4.4xlarge', value: 'ml.m4.4xlarge' }, \n            { label: 'ml.m4.10large', value: 'ml.m4.10large' }, \n            { label: 'ml.m4.16xlarge', value: 'ml.m4.16xlarge' }, \n        ]\n    },\n    {\n        label: 'Compute optimized', \n        options: [ \n            { label: 'ml.c5.xlarge', value: 'ml.c5.xlarge' },\n            { label: 'ml.c5.2xlarge', value: 'ml.c5.2xlarge' },\n            { label: 'ml.c5.4xlarge', value: 'ml.c5.4xlarge' },\n            { label: 'ml.c5.9xlarge', value: 'ml.c5.9xlarge' },\n            { label: 'ml.c5.18xlarge', value: 'ml.c5.18xlarge' },\n            { label: 'ml.c4.1xlarge', value: 'ml.c4.xlarge' },\n            { label: 'ml.c4.2xlarge', value: 'ml.c4.2xlarge' },\n            { label: 'ml.c4.4xlarge', value: 'ml.c4.4xlarge' },\n            { label: 'ml.c4.8xlarge', value: 'ml.c4.8xlarge' },\n            { label: 'ml.c5n.xlarge', value: 'ml.c5n.xlarge' },\n            { label: 'ml.c5n.2xlarge', value: 'ml.c5n.2xlarge' },\n            { label: 'ml.c5n.4xlarge', value: 'ml.c5n.4xlarge' },\n            { label: 'ml.c5n.9xlarge', value: 'ml.c5n.9xlarge' },\n            { label: 'ml.c5n.18xlarge', value: 'ml.c5n.18xlarge' }\n        ]\n    },\n    {\n        label: 'Accelerated computing', \n        options: [ \n            { label: 'ml.p2.xlarge', value: 'ml.p2.xlarge' },\n            { label: 'ml.p2.8xlarge', value: 'ml.p2.8xlarge' },\n            { label: 'ml.p2.16xlarge', value: 'ml.p2.16xlarge' },\n            { label: 'ml.p3.2xlarge', value: 'ml.p3.2xlarge' },\n            { label: 'ml.p3.8xlarge', value: 'ml.p3.8xlarge' },\n            { label: 'ml.p3.16xlarge', value: 'ml.p3.16xlarge' },\n            { label: 'ml.p3dn.24xlarge', value: 'ml.p3dn.24xlarge' },\n            { label: 'ml.p4dn.xlarge', value: 'ml.p4dn.xlarge' },\n            { label: 'ml.p4dn.2xlarge', value: 'ml.p4dn.2xlarge' },\n            { label: 'ml.p4dn.4xlarge', value: 'ml.p4dn.4xlarge' },\n            { label: 'ml.p4dn.8xlarge', value: 'ml.p4dn.8xlarge' },\n            { label: 'ml.p4dn.12xlarge', value: 'ml.p4dn.12xlarge' },\n            { label: 'ml.p4dn.16xlarge', value: 'ml.p4dn.16xlarge' },\n            { label: 'ml.p4d.24xlarge', value: 'ml.p4d.24xlarge' },\n            { label: 'ml.g5.xlarge', value: 'ml.g5.xlarge' },\n            { label: 'ml.g5.2xlarge', value: 'ml.g5.2xlarge' },\n            { label: 'ml.g5.4xlarge', value: 'ml.g5.4xlarge' },\n            { label: 'ml.g5.8xlarge', value: 'ml.g5.8xlarge' },\n            { label: 'ml.g5.12xlarge', value: 'ml.g5.12xlarge' },\n            { label: 'ml.g5.16xlarge', value: 'ml.g5.16xlarge' },\n            { label: 'ml.g5.24xlarge', value: 'ml.g5.24xlarge' },\n            { label: 'ml.g5.48xlarge', value: 'ml.g5.48xlarge' }\n        ]\n    }\n\n];\n\ninterface PathParams {\n    name: string;\n}\n\ninterface TrainingJobFormProps {\n    wizard?: boolean;\n}\n\nconst TrainingJobForm: FunctionComponent<TrainingJobFormProps> = (props) => {\n    const history = useHistory();\n\n    var params : PathParams = useParams();\n    var name = params.name\n\n    const [stateInstance, setStateInstance] = React.useState('');\n\n    const onChange : OnChange = (name: string, value: string) => {\n        if(name === 'instance')\n            setStateInstance(value);\n    }\n\n    const onSubmit = () => {\n        history.push('/case/' + name + '/trainingjob')\n    }\n\n    const onCancel = () => {\n        history.push('/case/' + name + '/trainingjob')\n    }\n\n    const onRemove = () => {\n    }\n\n    var wizard : boolean\n    if(props.wizard === undefined)\n        wizard = false\n    else\n        wizard = props.wizard\n\n    const renderTrainingJobSetting = () => {\n        if(!wizard) {\n            return (\n                <FormSection header=\"Job settings\">\n                    <FormField label=\"job name\" controlId=\"formFieldId1\">\n                        <Input type=\"text\" controlId=\"formFieldId1\" />\n                    </FormField>\n                </FormSection>\n            )\n        }\n        else\n            return ''\n    }\n\n    const renderTrainingJobTag = () => {\n        if(!wizard) {\n            return (\n                <FormSection header=\"Tags - optional\">\n                    <Inline>\n                        <FormField label=\"Key\" controlId=\"formFieldId1\">\n                            <Input type=\"text\" controlId=\"formFieldId1\"/>\n                        </FormField>\n                        <FormField label=\"Value\" controlId=\"formFieldId1\">\n                            <Inline>\n                                <Input type=\"text\" controlId=\"formFieldId1\"/>\n                            </Inline>\n                        </FormField>\n                        <FormField label=\"Operation\" controlId=\"formFieldId1\">\n                            <Inline>\n                                <Button onClick={onRemove}>Remove</Button>\n                            </Inline>\n                        </FormField>\n                    </Inline>\n                    <Button variant=\"link\">Add tag</Button>\n                </FormSection>\n            )\n        }\n        else\n            return ''\n    }\n\n    const renderTrainingJobContent = () => {\n        return (\n            <Stack>\n                <FormSection header=\"Provide container ECR path\">\n                    <FormField label=\"Container\" controlId=\"formFieldId1\">\n                        <Input type=\"text\" controlId=\"formFieldId1\" />\n                    </FormField>\n                </FormSection>\n                <FormSection header=\"Resource configuration\">\n                    <FormField label=\"Instance type\" controlId=\"formFieldId1\">\n                    <SimpleSelect\n                            placeholder=\"Choose an option\"\n                            name = 'instance'\n                            options={optionsInstance}\n                            onChange={onChange}\n                        />\n                    </FormField>\n                    <FormField label=\"Instance count\" controlId=\"formFieldId1\">\n                        <Input type=\"text\" controlId=\"formFieldId1\" value='1'/>\n                    </FormField>\n                    <FormField label=\"Additional storage volume per instance (GB)\" controlId=\"formFieldId1\">\n                        <Input type=\"text\" controlId=\"formFieldId1\" value='30'/>\n                    </FormField>\n                </FormSection>\n                <FormSection header=\"Input data configuration\">\n                    <FormField label=\"Input data s3uri\" controlId=\"formFieldId1\">\n                        <Input type=\"text\" controlId=\"formFieldId1\" />\n                    </FormField>\n                    <FormField label=\"Images prefix\" controlId=\"formFieldId1\">\n                        <Input type=\"text\" controlId=\"formFieldId1\" value='images'/>\n                    </FormField>\n                    <FormField label=\"Lables prefix\" controlId=\"formFieldId1\">\n                        <Input type=\"text\" controlId=\"formFieldId1\" value='labels'/>\n                    </FormField>\n                    <FormField label=\"Weights prefix\" controlId=\"formFieldId1\">\n                        <Input type=\"text\" controlId=\"formFieldId1\" value='weights' />\n                    </FormField>\n                    <FormField label=\"Cfg prefix\" controlId=\"formFieldId1\">\n                        <Input type=\"text\" controlId=\"formFieldId1\" value='cfg'/>\n                    </FormField>\n                </FormSection>\n                <FormSection header=\"Output data configuration\">\n                    <FormField label=\"Output data s3uri\" controlId=\"formFieldId1\">\n                        <Input type=\"text\" controlId=\"formFieldId1\" />\n                    </FormField>\n                </FormSection>\n            </Stack>\n        )\n    }\n\n    if(wizard) {\n        return (\n            <Stack>\n                {renderTrainingJobSetting()}\n                {renderTrainingJobContent()}\n                {renderTrainingJobTag()}\n            </Stack>\n        )\n    }\n    else {\n        return (\n            <Form\n                header=\"Create training job\"\n                description=\"When you create a training job, Amazon SageMaker sets up the distributed compute cluster, performs the training, and deletes the cluster when training has completed. The resulting model artifacts are stored in the location you specified when you created the training job.\"\n                actions={\n                    <div>\n                        <Button variant=\"link\" onClick={onCancel}>Cancel</Button>\n                        <Button variant=\"primary\" onClick={onSubmit}>Submit</Button>\n                    </div>\n                }>            \n                {renderTrainingJobSetting()}\n                {renderTrainingJobContent()}\n                {renderTrainingJobTag()}\n            </Form>\n        )\n    }\n}\n\nexport default TrainingJobForm;","import React, { FunctionComponent } from 'react';\nimport FormSection from 'aws-northstar/components/FormSection';\nimport FormField from 'aws-northstar/components/FormField';\nimport Input from 'aws-northstar/components/Input';\nimport { Form, Button, Inline, Stack } from 'aws-northstar';\nimport { useHistory, useParams } from 'react-router-dom'; \nimport RadioButton from 'aws-northstar/components/RadioButton';\nimport RadioGroup from 'aws-northstar/components/RadioGroup';\n\ninterface PathParams {\n    name: string;\n}\n\ninterface ModelFormProps {\n    wizard?: boolean;\n}\n\nconst ModelForm: FunctionComponent<ModelFormProps> = (props) => {\n    const history = useHistory();\n\n    var params : PathParams = useParams();\n    var name = params.name\n\n    const onSubmit = () => {\n        history.push('/case/' + name + '/model')\n    }\n \n    const onCancel = () => {\n        history.push('/case/' + name + '/model')\n    }\n\n    const onRemove = () => {\n    }\n\n    var wizard : boolean\n    if(props.wizard === undefined)\n        wizard = false\n    else\n        wizard = props.wizard\n\n    const renderModelSetting = () => {\n        if(!wizard) {\n            return (\n                <FormSection header=\"Model settings\">\n                    <FormField label=\"Model name\" controlId=\"formFieldId1\">\n                        <Input type=\"text\" controlId=\"formFieldId1\" />\n                    </FormField>\n                </FormSection>\n            )\n        }\n        else\n            return ''\n    }\n\n    const renderModelTag = () => {\n        if(!wizard) {\n            return (\n                <FormSection header=\"Tags - optional\">\n                    <Inline>\n                        <FormField label=\"Key\" controlId=\"formFieldId1\">\n                            <Input type=\"text\" controlId=\"formFieldId1\"/>\n                        </FormField>\n                        <FormField label=\"Value\" controlId=\"formFieldId1\">\n                            <Inline>\n                                <Input type=\"text\" controlId=\"formFieldId1\"/>\n                            </Inline>\n                        </FormField>\n                        <FormField label=\"Operation\" controlId=\"formFieldId1\">\n                            <Inline>\n                                <Button onClick={onRemove}>Remove</Button>\n                            </Inline>\n                        </FormField>\n                    </Inline>\n                    <Button variant=\"link\">Add tag</Button>\n                </FormSection>\n            )\n        }\n        else\n            return ''\n    }\n\n    const renderModelFormContent = () => {\n        return (\n            <FormSection header=\"Container definition\">\n                <FormField controlId='formFieldId1'>\n                    <RadioGroup\n                        items={[\n                            <RadioButton value=\"single\" description='Use this to host a single model in this container.'  checked={true}>Use a single model</RadioButton>, \n                            <RadioButton value=\"multiple\" description='Use this to host multiple models in this container.' disabled={true}>Use multiple models</RadioButton>\n                        ]}\n                    />\n                </FormField>          \n                <FormField label=\"Location of inference code image\" description='Type the registry path where the inference code image is stored in Amazon ECR.\n    ' controlId=\"formFieldId1\">\n                    <Input type=\"text\" controlId=\"formFieldId1\" />\n                </FormField>\n                <FormField label=\"Location of model artifacts\" description='Type the URL where model artifacts are stored in S3.' controlId=\"formFieldId1\">\n                    <Input type=\"text\" controlId=\"formFieldId1\" />\n                </FormField>\n        </FormSection>    \n        )\n    }\n\n    if(wizard) {\n        return (\n            <Stack>\n                {renderModelSetting()}\n                {renderModelFormContent()}\n                {renderModelTag()}\n            </Stack>\n        )\n    }\n    else {\n        return (\n            <Form\n                header=\"Create model\"\n                description=\"To deploy a model to Amazon SageMaker, first create the model by providing the location of the model artifacts and inference code.\"\n                actions={\n                    <div>\n                        <Button variant=\"link\" onClick={onCancel}>Cancel</Button>\n                        <Button variant=\"primary\" onClick={onSubmit}>Submit</Button>\n                    </div>\n                }>            \n                {renderModelSetting()}\n                {renderModelFormContent()}\n                {renderModelTag()}\n            </Form>\n        )\n    }\n}\n\nexport default ModelForm;","import React, { FunctionComponent } from 'react';\nimport FormSection from 'aws-northstar/components/FormSection';\nimport FormField from 'aws-northstar/components/FormField';\nimport Input from 'aws-northstar/components/Input';\nimport { Form, Button, RadioGroup, RadioButton, Inline, Text, Stack } from 'aws-northstar';\nimport { useHistory } from 'react-router-dom'; \nimport SimpleSelect from '../../Utils/SimpleSelect';\nimport {useParams} from \"react-router-dom\";\n\ninterface SelectOption {\n    label?: string;\n    value?: string;\n    options?: SelectOption[];\n}\n\ntype OnChange = (name: string, value: string) => void\n\nconst optionsModel : SelectOption[] = [\n    { label: 'model-1', value: 'model-1' }\n]\n\nconst optionsInstance : SelectOption[]= [\n    {\n        label: 'Standard', \n        options: [ \n            { label: 'ml.m5.large', value: 'ml.m5.large' }, \n            { label: 'ml.m5.xlarge', value: 'ml.m5.xlarge' }, \n            { label: 'ml.m5.2xlarge', value: 'ml.m5.2xlarge' }, \n            { label: 'ml.m5.4xlarge', value: 'ml.m5.4xlarge' }, \n            { label: 'ml.m5.12xlarge', value: 'ml.m5.12xlarge' }, \n            { label: 'ml.m5.24xlarge', value: 'ml.m5.24xlarge' },\n            { label: 'ml.m4.xlarge', value: 'ml.m4.xlarge' }, \n            { label: 'ml.m4.2xlarge', value: 'ml.m4.2xlarge' }, \n            { label: 'ml.m4.4xlarge', value: 'ml.m4.4xlarge' }, \n            { label: 'ml.m4.10large', value: 'ml.m4.10large' }, \n            { label: 'ml.m4.16xlarge', value: 'ml.m4.16xlarge' }, \n        ]\n    },\n    {\n        label: 'Compute optimized', \n        options: [ \n            { label: 'ml.c5.xlarge', value: 'ml.c5.xlarge' },\n            { label: 'ml.c5.2xlarge', value: 'ml.c5.2xlarge' },\n            { label: 'ml.c5.4xlarge', value: 'ml.c5.4xlarge' },\n            { label: 'ml.c5.9xlarge', value: 'ml.c5.9xlarge' },\n            { label: 'ml.c5.18xlarge', value: 'ml.c5.18xlarge' },\n            { label: 'ml.c4.1xlarge', value: 'ml.c4.xlarge' },\n            { label: 'ml.c4.2xlarge', value: 'ml.c4.2xlarge' },\n            { label: 'ml.c4.4xlarge', value: 'ml.c4.4xlarge' },\n            { label: 'ml.c4.8xlarge', value: 'ml.c4.8xlarge' },\n            { label: 'ml.c5n.xlarge', value: 'ml.c5n.xlarge' },\n            { label: 'ml.c5n.2xlarge', value: 'ml.c5n.2xlarge' },\n            { label: 'ml.c5n.4xlarge', value: 'ml.c5n.4xlarge' },\n            { label: 'ml.c5n.9xlarge', value: 'ml.c5n.9xlarge' },\n            { label: 'ml.c5n.18xlarge', value: 'ml.c5n.18xlarge' }\n        ]\n    },\n    {\n        label: 'Accelerated computing', \n        options: [ \n            { label: 'ml.p2.xlarge', value: 'ml.p2.xlarge' },\n            { label: 'ml.p2.8xlarge', value: 'ml.p2.8xlarge' },\n            { label: 'ml.p2.16xlarge', value: 'ml.p2.16xlarge' },\n            { label: 'ml.p3.2xlarge', value: 'ml.p3.2xlarge' },\n            { label: 'ml.p3.8xlarge', value: 'ml.p3.8xlarge' },\n            { label: 'ml.p3.16xlarge', value: 'ml.p3.16xlarge' },\n            { label: 'ml.p3dn.24xlarge', value: 'ml.p3dn.24xlarge' },\n            { label: 'ml.p4dn.xlarge', value: 'ml.p4dn.xlarge' },\n            { label: 'ml.p4dn.2xlarge', value: 'ml.p4dn.2xlarge' },\n            { label: 'ml.p4dn.4xlarge', value: 'ml.p4dn.4xlarge' },\n            { label: 'ml.p4dn.8xlarge', value: 'ml.p4dn.8xlarge' },\n            { label: 'ml.p4dn.12xlarge', value: 'ml.p4dn.12xlarge' },\n            { label: 'ml.p4dn.16xlarge', value: 'ml.p4dn.16xlarge' },\n            { label: 'ml.p4d.24xlarge', value: 'ml.p4d.24xlarge' },\n            { label: 'ml.g5.xlarge', value: 'ml.g5.xlarge' },\n            { label: 'ml.g5.2xlarge', value: 'ml.g5.2xlarge' },\n            { label: 'ml.g5.4xlarge', value: 'ml.g5.4xlarge' },\n            { label: 'ml.g5.8xlarge', value: 'ml.g5.8xlarge' },\n            { label: 'ml.g5.12xlarge', value: 'ml.g5.12xlarge' },\n            { label: 'ml.g5.16xlarge', value: 'ml.g5.16xlarge' },\n            { label: 'ml.g5.24xlarge', value: 'ml.g5.24xlarge' },\n            { label: 'ml.g5.48xlarge', value: 'ml.g5.48xlarge' }\n        ]\n    }\n\n];\n\nconst optionsElastic : SelectOption[] = [\n    { label: 'none', value: 'none' },\n    { label: 'ml.eia1.medium', value: 'ml.eia1.medium' },\n    { label: 'ml.eia1.large', value: 'ml.eia1.large' },\n    { label: 'ml.eia1.xlarge', value: 'ml.eia1.xlarge' },\n    { label: 'ml.eia2.medium', value: 'ml.eia2.medium' },\n    { label: 'ml.eia2.large', value: 'ml.eia2.large' },\n    { label: 'ml.eia2.xlarge', value: 'ml.eia2.xlarge' },\n]\n\ninterface PathParams {\n    name: string;\n}\n\ninterface EndpointFormProps {\n    wizard?: boolean;\n}\n\nconst EndpointForm: FunctionComponent<EndpointFormProps> = (props) => {\n    const history = useHistory();\n\n    var params : PathParams = useParams();\n    var name = params.name\n\n    const [stateModel, setStateModel] = React.useState('');\n\n    const [stateInstance, setStateInstance] = React.useState('');\n\n    const [stateElastic, setStateElastic] = React.useState('');\n\n    const onChange : OnChange = (name: string, value: string) => {\n        if(name === 'model')\n            setStateModel(value);\n        if(name === 'instance')\n            setStateInstance(value);\n        if(name === 'elastic')\n            setStateElastic(value);\n    }\n\n    const onSubmit = () => {\n        history.push('/case/' + name + '/endpoint')\n    }\n\n    const onCancel = () => {\n        history.push('/case/' + name + '/endpoint')\n    }\n\n    const onRemove = () => {\n    }\n\n    var wizard : boolean\n    if(props.wizard === undefined)\n        wizard = false\n    else\n        wizard = props.wizard\n\n    const renderEndpointSetting = () => {\n        if(!wizard) {\n            return (\n                <FormSection header=\"Endpoint setting\">\n                    <FormField label=\"Endpooint name\" description='Your application uses this name to access this endpoint.' controlId=\"formFieldId1\" hintText='Maximum of 63 alphanumeric characters. Can include hyphens (-), but not spaces. Must be unique within your account in an AWS Region.'>\n                        <Input type=\"text\" controlId=\"formFieldId1\" />\n                    </FormField>\n                    <FormField label=\"Type of endpoint\" controlId=\"formFieldId1\">\n                        <RadioGroup\n                            items={[\n                                <RadioButton value=\"provisioned\" description='Use this to host a single model in this container.' >Provisioned</RadioButton>, \n                                <RadioButton value=\"serverless\" description='Use this to host multiple models in this container.' >Serverless (In Preview)</RadioButton>\n                            ]}\n                        />                \n                    </FormField>\n                </FormSection>\n            )\n        }\n        else {\n            return (\n                <FormSection header=\"Endpoint setting\">\n                    <FormField label=\"Type of endpoint\" controlId=\"formFieldId1\">\n                        <RadioGroup\n                            items={[\n                                <RadioButton value=\"provisioned\" description='Use this to host a single model in this container.' >Provisioned</RadioButton>, \n                                <RadioButton value=\"serverless\" description='Use this to host multiple models in this container.' >Serverless (In Preview)</RadioButton>\n                            ]}\n                        />                \n                    </FormField>\n                </FormSection>\n            )\n        }\n    }\n\n    const renderEndpointTag = () => {\n        if(!wizard) {\n            return (\n                <FormSection header=\"Tags - optional\">\n                    <Inline>\n                        <FormField label=\"Key\" controlId=\"formFieldId1\">\n                            <Input type=\"text\" controlId=\"formFieldId1\"/>\n                        </FormField>\n                        <FormField label=\"Value\" controlId=\"formFieldId1\">\n                            <Inline>\n                                <Input type=\"text\" controlId=\"formFieldId1\"/>\n                            </Inline>\n                        </FormField>\n                        <FormField label=\"Operation\" controlId=\"formFieldId1\">\n                            <Inline>\n                                <Button onClick={onRemove}>Remove</Button>\n                            </Inline>\n                        </FormField>\n                    </Inline>\n                    <Button variant=\"link\">Add tag</Button>\n                </FormSection>\n            )\n        }\n        else \n            return ''\n    }\n\n    const renderEndpointFormContent = () => {\n        return (\n            <FormSection header=\"Production variants\">\n                <FormField label=\"Model name\" controlId=\"formFieldId1\">\n                    <SimpleSelect\n                            placeholder=\"Choose an option\"\n                            name = 'model'\n                            options={optionsModel}\n                            onChange={onChange}\n                        />\n                </FormField>\n                <FormField label=\"Instance type\" controlId=\"formFieldId1\">\n                    <SimpleSelect\n                            placeholder=\"Choose an option\"\n                            name = 'model'\n                            options={optionsInstance}\n                            onChange={onChange}\n                        />\n                </FormField>\n                <FormField label=\"Elastic Inference\" controlId=\"formFieldId1\">\n                    <SimpleSelect\n                            placeholder=\"Choose an option\"\n                            name = 'elastic'\n                            options={optionsElastic}\n                            onChange={onChange}\n                        />\n                </FormField>\n                <FormField label=\"Initial instance count\" controlId=\"formFieldId1\">\n                    <Input type=\"text\" controlId=\"formFieldId1\" value='1'/>\n                </FormField>\n                <FormField label=\"Initial instance weight\" controlId=\"formFieldId1\">\n                    <Input type=\"text\" controlId=\"formFieldId1\" value='1'/>\n                </FormField>\n            </FormSection>\n        )\n    }\n\n    if(wizard) {\n        return (\n            <Stack>\n                {renderEndpointSetting()}\n                {renderEndpointFormContent()}\n                {renderEndpointTag()}\n            </Stack>\n        )\n    }\n    else {\n        return (\n            <Form\n                header=\"Create endpoint\"\n                description=\"To deploy models to Amazon SageMaker, first create an endpoint. Specify which models to deploy, and the relative traffic weighting and hardware requirements for each. \"\n                actions={\n                    <div>\n                        <Button variant=\"link\" onClick={onCancel}>Cancel</Button>\n                        <Button variant=\"primary\" onClick={onSubmit}>Submit</Button>\n                    </div>\n                }>\n                {renderEndpointSetting()}\n                {renderEndpointFormContent()}\n                {renderEndpointTag()}\n            </Form>\n        )\n    }\n}\n\nexport default EndpointForm;","import React, { ChangeEvent, FunctionComponent, useState } from 'react';\nimport FormSection from 'aws-northstar/components/FormSection';\nimport FormField from 'aws-northstar/components/FormField';\nimport Input from 'aws-northstar/components/Input';\nimport { Form, Button, RadioGroup, RadioButton, Inline, Stack } from 'aws-northstar';\nimport { useHistory } from 'react-router-dom'; \nimport SimpleSelect from '../../Utils/SimpleSelect';\nimport {useParams} from \"react-router-dom\";\n\ninterface SelectOption {\n    label?: string;\n    value?: string;\n    options?: SelectOption[];\n}\n\ntype OnChange = (name: string, value: string) => void\n\nconst optionsEndpoint : SelectOption[] = [\n    { label: 'endpoint-1', value: 'endpoint-1' }\n]\n\nconst optionsApi : SelectOption[] = [\n    { label: 'api-1', value: 'api-1' }\n]\n\ninterface PathParams {\n    name: string;\n}\n\ninterface RestApiFormProps {\n    wizard?: boolean;\n}\n\nconst RestApiForm: FunctionComponent<RestApiFormProps> = (props) => {\n    const [optioonsEndpoint, setOptionsEndpoint] = React.useState('');\n\n    const [optioonsApi, setOptionsApi] = React.useState('');\n\n    const onChange : OnChange = (name: string, value: string) => {\n        if(name === 'endpoint')\n            setOptionsEndpoint(value);\n        if(name === 'api')\n            setOptionsApi(value);\n    }\n\n    const [stateType, setStateType] = useState('1')\n\n    const onChangeOption = (event?: ChangeEvent<HTMLInputElement>, value?: string)=>{\n        var option : string = value || ''\n        setStateType(option)\n    }\n\n    const history = useHistory();\n\n    var params : PathParams = useParams();\n    var name = params.name\n\n    const onSubmit = () => {\n        history.push('/case/' + name + '/restapi')\n    }\n\n    const onCancel = () => {\n        history.push('/case/' + name + '/restapi')\n    }\n\n    const onRemove = () => {\n    }\n\n    var wizard : boolean\n    if(props.wizard === undefined)\n        wizard = false\n    else\n        wizard = props.wizard\n\n    const renderRestApiSetting = () => {\n        if(stateType === '1') {\n            return (\n                <FormSection header=\"Rest API setting\">\n                    <FormField label=\"API Gateway\" controlId=\"formFieldId1\">\n                        <RadioGroup onChange={onChangeOption}\n                            items={[\n                                <RadioButton value='0' checked={false}>Create new Rest API</RadioButton>, \n                                <RadioButton value='1' checked={true}>Select existing Rest API</RadioButton>                \n                            ]}\n                        />\n                    </FormField>\n                    <FormField controlId='formField1'>\n                        <SimpleSelect\n                            placeholder=\"Choose an option\"\n                            name = 'api'\n                            options={optionsApi}\n                            onChange={onChange}\n                        />\n                    </FormField>\n                    <FormField label=\"API path\" controlId=\"formFieldId1\">\n                        <Input type=\"text\" controlId=\"formFieldId1\" value='/yolov5'/>\n                    </FormField>\n                </FormSection>\n            )\n        }\n        else {\n            return (\n                <FormSection header=\"Rest API setting\">\n                    <FormField label=\"API Gateway\" controlId=\"formFieldId1\">\n                        <RadioGroup onChange={onChangeOption}\n                            items={[\n                                <RadioButton value='0' checked={true}>Create new Rest API</RadioButton>, \n                                <RadioButton value='1' checked={false}>Select existing Rest API</RadioButton>                \n                            ]}\n                        />\n                    </FormField>\n                    <FormField controlId='formField1'>\n                        <Input type=\"text\" controlId=\"formFieldId1\"/>\n                    </FormField>\n                    <FormField label=\"API path\" controlId=\"formFieldId1\">\n                        <Input type=\"text\" controlId=\"formFieldId1\" value='/yolov5'/>\n                    </FormField>\n                </FormSection>\n            )\n        }\n    }\n\n    const renderRestApiTag = () => {\n        if(!wizard) {\n            return (\n                <FormSection header=\"Tags - optional\">\n                    <Inline>\n                        <FormField label=\"Key\" controlId=\"formFieldId1\">\n                            <Input type=\"text\" controlId=\"formFieldId1\"/>\n                        </FormField>\n                        <FormField label=\"Value\" controlId=\"formFieldId1\">\n                            <Inline>\n                                <Input type=\"text\" controlId=\"formFieldId1\"/>\n                            </Inline>\n                        </FormField>\n                        <FormField label=\"Operation\" controlId=\"formFieldId1\">\n                            <Inline>\n                                <Button onClick={onRemove}>Remove</Button>\n                            </Inline>\n                        </FormField>\n                    </Inline>\n                    <Button variant=\"link\">Add tag</Button>\n                </FormSection>\n            )\n        }\n        else\n            return ''\n    }\n\n    const renderRestApiFormContent = () => {\n        return (\n            <FormSection header=\"Production variants\">\n                <FormField label=\"Endpoint name\" controlId=\"formFieldId1\">\n                    <SimpleSelect\n                        placeholder=\"Choose an option\"\n                        name = 'endpoint'\n                        options={optionsEndpoint}\n                        onChange={onChange}\n                    />\n                </FormField>\n            </FormSection>\n        )\n    }\n\n    if(wizard) {\n        return (\n            <Stack>\n                {renderRestApiSetting()}\n                {renderRestApiFormContent()}\n                {renderRestApiTag()}\n            </Stack>\n        )\n    }\n    else {\n        return (\n            <Form\n                header=\"Create restapi\"\n                actions={\n                    <div>\n                        <Button variant=\"link\" onClick={onCancel}>Cancel</Button>\n                        <Button variant=\"primary\" onClick={onSubmit}>Submit</Button>\n                    </div>\n                }> \n                {renderRestApiSetting()}\n                {renderRestApiFormContent()}\n                {renderRestApiTag()}\n            </Form>\n        )\n    }\n}\n\nexport default RestApiForm;","import React, { FunctionComponent } from 'react';\nimport FormSection from 'aws-northstar/components/FormSection';\nimport FormField from 'aws-northstar/components/FormField';\nimport Input from 'aws-northstar/components/Input';\nimport { Form, Button, RadioGroup, RadioButton, Inline, Text, Stack } from 'aws-northstar';\nimport { useHistory } from 'react-router-dom'; \nimport SimpleSelect from '../../Utils/SimpleSelect';\nimport {useParams} from \"react-router-dom\";\n\ninterface SelectOption {\n    label?: string;\n    value?: string;\n    options?: SelectOption[];\n}\n\ntype OnChange = (name: string, value: string) => void\n\nconst optionsModel : SelectOption[] = [\n    { label: 'model-1', value: 'model-1' }\n]\n\ninterface PathParams {\n    name: string;\n}\n\ninterface GreengrassComponentFormProps {\n    wizard?: boolean;\n}\n\nconst GreengrassComponentForm: FunctionComponent<GreengrassComponentFormProps> = (props) => {\n    const history = useHistory();\n\n    var params : PathParams = useParams();\n    var name = params.name\n\n    const [stateModel, setStateModel] = React.useState('');\n\n    const onChange : OnChange = (name: string, value: string) => {\n        if(name === 'model')\n            setStateModel(value);\n    }\n\n    const onSubmit = () => {\n        history.push('/case/' + name + '/component')\n    }\n\n    const onCancel = () => {\n        history.push('/case/' + name + '/component')\n    }\n\n    const onRemove = () => {\n    }\n\n    var wizard : boolean\n    if(props.wizard === undefined)\n        wizard = false\n    else\n        wizard = props.wizard\n\n    const renderGreengrassComponentSetting = () => {\n        if(!wizard) {\n            return (\n                <FormSection header=\"Greengrass component setting\">\n                    <FormField label=\"Component name\" controlId=\"formFieldId1\">\n                        <Input type=\"text\" controlId=\"formFieldId1\" />\n                    </FormField>\n                </FormSection>\n            )\n        }\n        else\n            return ''\n    }\n\n    const renderGreengrassTag = () => {\n        if(!wizard) {\n            <FormSection header=\"Tags - optional\">\n                <Inline>\n                    <FormField label=\"Key\" controlId=\"formFieldId1\">\n                        <Input type=\"text\" controlId=\"formFieldId1\"/>\n                    </FormField>\n                    <FormField label=\"Value\" controlId=\"formFieldId1\">\n                        <Inline>\n                            <Input type=\"text\" controlId=\"formFieldId1\"/>\n                        </Inline>\n                    </FormField>\n                    <FormField label=\"Operation\" controlId=\"formFieldId1\">\n                        <Inline>\n                            <Button onClick={onRemove}>Remove</Button>\n                        </Inline>\n                    </FormField>\n                </Inline>\n                <Button variant=\"link\">Add tag</Button>\n            </FormSection>\n        }\n    }\n\n    const renderGreengrassContent = () => {\n        return (\n            <FormSection header=\"Production variants\">\n                <FormField label=\"Model name\" controlId=\"formFieldId1\">\n                    <SimpleSelect\n                            placeholder=\"Choose an option\"\n                            name = 'model'\n                            options={optionsModel}\n                            onChange={onChange}\n                        />\n                </FormField>\n            </FormSection>\n        )\n    }\n\n    if(wizard) {\n        return (\n            <Stack>\n                {renderGreengrassComponentSetting()}\n                {renderGreengrassContent()}\n                {renderGreengrassTag()}\n            </Stack>\n        )\n    }\n    else {\n        return (\n            <Form\n                header=\"Create Greengrass component\"\n                actions={\n                    <div>\n                        <Button variant=\"link\" onClick={onCancel}>Cancel</Button>\n                        <Button variant=\"primary\" onClick={onSubmit}>Submit</Button>\n                    </div>\n                }>\n                {renderGreengrassComponentSetting()}\n                {renderGreengrassContent()}\n                {renderGreengrassTag()}\n            </Form>\n        )\n    }\n}\n\nexport default GreengrassComponentForm;","import React, { ChangeEvent, FunctionComponent, useState } from 'react';\nimport FormSection from 'aws-northstar/components/FormSection';\nimport FormField from 'aws-northstar/components/FormField';\nimport Input from 'aws-northstar/components/Input';\nimport { Form, Button, RadioGroup, RadioButton, Inline, Text, Stack } from 'aws-northstar';\nimport { useHistory } from 'react-router-dom'; \nimport SimpleSelect from '../../Utils/SimpleSelect';\nimport {useParams} from \"react-router-dom\";\n\ninterface SelectOption {\n    label?: string;\n    value?: string;\n    options?: SelectOption[];\n}\n\ntype OnChange = (name: string, value: string) => void\n\nconst optionsTarget : SelectOption[] = [\n    { label: 'GreengrassQuickStartGroup', value: 'GreengrassQuickStartGroup' }\n]\n\nconst optionsComponent : SelectOption[] = [\n    { label: 'com.example.yolov5', value: 'com.example.yolov5' }\n]\n\nconst optionsVersion : SelectOption[] = [\n    { label: '1.0.0', value: '1.0.0' }\n]\n\ninterface PathParams {\n    name: string;\n}\n\ninterface GreengrassDeploymentFormProps {\n    wizard?: boolean;\n}\n\nconst GreengrassDeploymentForm: FunctionComponent<GreengrassDeploymentFormProps> = (props) => {\n    const history = useHistory();\n\n    var params : PathParams = useParams();\n    var name = params.name\n\n    const [stateType, setStateType] = React.useState('1');\n\n    const [stateTarget, setStateTarget] = React.useState('');\n\n    const onChange : OnChange = (name: string, value: string) => {\n        if(name === 'target')\n            setStateTarget(value);\n    }\n\n    const onSubmit = () => {\n        history.push('/case/' + name + '/deployment')\n    }\n\n    const onCancel = () => {\n        history.push('/case/' + name + '/deployment')\n    }\n\n    const onRemove = () => {\n    }\n\n    const onChangeOption = (event?: ChangeEvent<HTMLInputElement>, value?: string)=>{\n        var target : string = value || ''\n        setStateType(target)\n    }\n\n    var wizard : boolean\n    if(props.wizard === undefined)\n        wizard = false\n    else\n        wizard = props.wizard\n    \n    const renderGreengrassDeploymentSetting = () => {\n        if(!wizard) {\n            return (\n                <FormSection header=\"Greengrass deployment setting\">\n                <FormField label=\"Deployment name\" description='A friendly name lets you identify this deployment. If you leave it blank, the deployment displays its ID instead of a name.' controlId=\"formFieldId1\">\n                    <Input type=\"text\" controlId=\"formFieldId1\" />\n                </FormField>\n                </FormSection>\n            )\n        }\n        else\n            return ''\n    }\n\n    const renderGreengrassDeploymentTarget = () => {\n        if(stateType === '1') {\n            return (\n                <FormSection header=\"Deployment target\" description='You can deploy to a single Greengrass core device or a group of core devices.'>\n                    <FormField label=\"Target type\" controlId=\"formFieldId1\">\n                        <RadioGroup onChange={onChangeOption}\n                                items={[\n                                    <RadioButton value='0' checked={false}>Core device</RadioButton>, \n                                    <RadioButton value='1' checked={true}>Thing group</RadioButton>                \n                                ]}\n                            />\n                    </FormField>\n                    <FormField label=\"Target name\" controlId=\"formFieldId1\">\n                        <SimpleSelect\n                                placeholder=\"Choose an option\"\n                                name = 'target'\n                                options={optionsTarget}\n                                onChange={onChange}\n                            />\n                    </FormField>\n                </FormSection>\n            )\n        }\n        else {\n            return (\n                <FormSection header=\"Deployment target\" description='You can deploy to a single Greengrass core device or a group of core devices.'>\n                    <FormField label=\"Target type\" controlId=\"formFieldId1\">\n                        <RadioGroup onChange={onChangeOption}\n                                items={[\n                                    <RadioButton value='0' checked={true}>Core device</RadioButton>, \n                                    <RadioButton value='1' checked={false}>Thing group</RadioButton>                \n                                ]}\n                            />\n                    </FormField>\n                    <FormField label=\"Target name\" controlId=\"formFieldId1\">\n                        <Input type=\"text\" controlId=\"formFieldId1\" />\n                    </FormField>\n                </FormSection>\n            )\n        }\n    }\n\n    const renderGreengrassDeploymentTag = () => {\n        if(!wizard) {\n            return (\n                <FormSection header=\"Tags - optional\">\n                    <Inline>\n                        <FormField label=\"Key\" controlId=\"formFieldId1\">\n                            <Input type=\"text\" controlId=\"formFieldId1\"/>\n                        </FormField>\n                        <FormField label=\"Value\" controlId=\"formFieldId1\">\n                            <Inline>\n                                <Input type=\"text\" controlId=\"formFieldId1\"/>\n                            </Inline>\n                        </FormField>\n                        <FormField label=\"Operation\" controlId=\"formFieldId1\">\n                            <Inline>\n                                <Button onClick={onRemove}>Remove</Button>\n                            </Inline>\n                        </FormField>\n                    </Inline>\n                    <Button variant=\"link\">Add tag</Button>\n                </FormSection>\n            )\n        }\n        else\n            return ''\n    }\n\n    const renderGreengrassDeploymentContent = () => {\n        return (\n            <FormSection header=\"Production variants\">\n                <FormField label=\"Component name\" controlId=\"formFieldId1\">\n                        <SimpleSelect\n                                placeholder=\"Choose an option\"\n                                name = 'component'\n                                options={optionsComponent}\n                                onChange={onChange}\n                            />\n                </FormField>\n                <FormField label=\"Component version\" controlId=\"formFieldId1\">\n                        <SimpleSelect\n                                placeholder=\"Choose an option\"\n                                name = 'version'\n                                options={optionsVersion}\n                                onChange={onChange}\n                            />\n                </FormField>\n            </FormSection>\n        )\n    }\n\n    if(wizard) {\n        return (\n            <Stack>\n                {renderGreengrassDeploymentSetting()}\n                {renderGreengrassDeploymentTarget()}\n                {renderGreengrassDeploymentContent()}\n                {renderGreengrassDeploymentTag()}\n            </Stack>\n        )\n    }\n    else {\n        return (\n            <Form\n                header=\"Create Greengrass deployment\"\n                actions={\n                    <div>\n                        <Button variant=\"link\" onClick={onCancel}>Cancel</Button>\n                        <Button variant=\"primary\" onClick={onSubmit}>Submit</Button>\n                    </div>\n                }>        \n                {renderGreengrassDeploymentSetting()}\n                {renderGreengrassDeploymentTarget()}\n                {renderGreengrassDeploymentContent()}\n                {renderGreengrassDeploymentTag()}\n            </Form>\n        )\n    }\n}\n\nexport default GreengrassDeploymentForm;","import Wizard from 'aws-northstar/components/Wizard';\nimport { BrowserRouter, useHistory, useParams } from 'react-router-dom';\nimport FormField from 'aws-northstar/components/FormField'\nimport Input from 'aws-northstar/components/Input';\nimport Container from 'aws-northstar/layouts/Container';\nimport { ChangeEvent, FunctionComponent, useState } from 'react';\nimport { RadioButton, RadioGroup, Stack } from 'aws-northstar';\nimport TrainingJobForm from '../TrainingJob';\nimport ModelForm from '../Model';\nimport EndpointForm from '../Endpoint';\nimport RestApiForm from '../RestApi';\nimport GreengrassComponentForm from '../GreengrassComponent';\nimport GreengrassDeploymentForm from '../GreengrassDeployment';\n\ninterface PathParams {\n    name: string;\n}\n\ninterface PipelineFormProps {\n    wizard?: boolean;\n}\n\nconst PipelineForm: FunctionComponent<PipelineFormProps> = (props) => {\n    const [stateType, setStateType] = useState('0')\n\n    const onChange = (event?: ChangeEvent<HTMLInputElement>, value?: string)=>{\n        var option : string = value || ''\n        setStateType(option)\n    }\n    \n    const history = useHistory();\n\n    var params : PathParams = useParams();\n    var name = params.name\n\n    const onSubmit = () => {\n        history.push('/case/' + name + '/pipeline')\n    }\n\n    const onCancel = () => {\n        history.push('/case/' + name + '/pipeline')\n    }\n\n    const steps = [\n        {\n            title: 'Pipeline',\n            content: \n                <Stack>\n                <FormField label=\"Pipeline name\" controlId=\"formFieldId1\">\n                    <Input type=\"text\" controlId=\"formFieldId1\" />\n                </FormField>\n                <FormField label=\"Pipeline type\" controlId=\"formFieldId2\">\n                    <RadioGroup onChange={onChange}\n                            items={[\n                                <RadioButton value='0' checked={stateType === '0'}>Both trining and inference and deploy in both cloud and edge</RadioButton>, \n                                <RadioButton value='1' checked={stateType === '1'}>Both training and inference and deploy only in cloud</RadioButton>,                \n                                <RadioButton value='2' checked={stateType === '2'}>Only inference and deploy in both cloud and edge</RadioButton>,                \n                                <RadioButton value='3' checked={stateType === '3'}>Only inference and deploy only in cloud</RadioButton>                \n                            ]}\n                        />\n                </FormField>\n                </Stack>\n        },\n        {\n            title: 'Training job',\n            content: \n                <Stack>\n                    <TrainingJobForm wizard={true}/>\n                </Stack>            \n        },\n        {\n            title: 'Model',\n            content: \n                <Stack>\n                    <ModelForm wizard={true}/>\n                </Stack>\n        },\n        {\n            title: 'Endpoint',\n            content: \n                <Stack>\n                    <EndpointForm wizard={true}/>\n                </Stack>\n        },\n        {\n            title: 'Rest API',\n            content: \n                <Stack>\n                    <RestApiForm wizard={true}/>\n                </Stack>\n        },\n        {\n            title: 'Greengrass component',\n            content: \n                <Stack>\n                    <GreengrassComponentForm wizard={true}/>\n                </Stack>\n        },\n        {\n            title: 'Greengrass deployment',\n            content: \n                <Stack>\n                    <GreengrassDeploymentForm wizard={true}/>\n                </Stack>\n        }\n    ];\n\n    const steps1 = [\n        {\n            title: 'Pipeline',\n            content: \n                <Stack>\n                <FormField label=\"Pipeline name\" controlId=\"formFieldId1\">\n                    <Input type=\"text\" controlId=\"formFieldId1\" />\n                </FormField>\n                <FormField label=\"Pipeline type\" controlId=\"formFieldId2\">\n                    <RadioGroup onChange={onChange}\n                            items={[\n                                <RadioButton value='0' checked={stateType === '0'}>Both trining and inference and deploy in both cloud and edge</RadioButton>, \n                                <RadioButton value='1' checked={stateType === '1'}>Both training and inference and deploy only in cloud</RadioButton>,                \n                                <RadioButton value='2' checked={stateType === '2'}>Only inference and deploy in both cloud and edge</RadioButton>,                \n                                <RadioButton value='3' checked={stateType === '3'}>Only inference and deploy only in cloud</RadioButton>                \n                            ]}\n                        />\n                </FormField>\n                </Stack>\n        },\n        {\n            title: 'Pipeline',\n            content: \n                <Stack>\n                <FormField label=\"Pipeline name\" controlId=\"formFieldId1\">\n                    <Input type=\"text\" controlId=\"formFieldId1\" />\n                </FormField>\n                <FormField label=\"Pipeline type\" controlId=\"formFieldId2\">\n                    <RadioGroup onChange={onChange}\n                            items={[\n                                <RadioButton value='0' checked={stateType === '0'}>Both trining and inference and deploy in both cloud and edge</RadioButton>, \n                                <RadioButton value='1' checked={stateType === '1'}>Both training and inference and deploy only in cloud</RadioButton>,                \n                                <RadioButton value='2' checked={stateType === '2'}>Only inference and deploy in both cloud and edge</RadioButton>,                \n                                <RadioButton value='3' checked={stateType === '3'}>Only inference and deploy only in cloud</RadioButton>                \n                            ]}\n                        />\n                </FormField>\n                </Stack>\n        },\n        {\n            title: 'Training job',\n            content: \n                <Stack>\n                    <TrainingJobForm wizard={true}/>\n                </Stack>            \n        },\n        {\n            title: 'Model',\n            content: \n                <Stack>\n                    <ModelForm wizard={true}/>\n                </Stack>\n        },\n        {\n            title: 'Endpoint',\n            content: \n                <Stack>\n                    <EndpointForm wizard={true}/>\n                </Stack>\n        },\n        {\n            title: 'Rest API',\n            content: \n                <Stack>\n                    <RestApiForm wizard={true}/>\n                </Stack>\n        }    \n    ]\n\n    const steps2 = [\n        {\n            title: 'Pipeline',\n            content: \n                <Stack>\n                <FormField label=\"Pipeline name\" controlId=\"formFieldId1\">\n                    <Input type=\"text\" controlId=\"formFieldId1\" />\n                </FormField>\n                <FormField label=\"Pipeline type\" controlId=\"formFieldId2\">\n                    <RadioGroup onChange={onChange}\n                            items={[\n                                <RadioButton value='0' checked={stateType === '0'}>Both trining and inference and deploy in both cloud and edge</RadioButton>, \n                                <RadioButton value='1' checked={stateType === '1'}>Both training and inference and deploy only in cloud</RadioButton>,                \n                                <RadioButton value='2' checked={stateType === '2'}>Only inference and deploy in both cloud and edge</RadioButton>,                \n                                <RadioButton value='3' checked={stateType === '3'}>Only inference and deploy only in cloud</RadioButton>                \n                            ]}\n                        />\n                </FormField>\n                </Stack>\n        },\n        {\n            title: 'Model',\n            content: \n                <Stack>\n                    <ModelForm wizard={true}/>\n                </Stack>\n        },\n        {\n            title: 'Endpoint',\n            content: \n                <Stack>\n                    <EndpointForm wizard={true}/>\n                </Stack>\n        },\n        {\n            title: 'Rest API',\n            content: \n                <Stack>\n                    <RestApiForm wizard={true}/>\n                </Stack>\n        },\n        {\n            title: 'Greengrass component',\n            content: \n                <Stack>\n                    <GreengrassComponentForm wizard={true}/>\n                </Stack>\n        },\n        {\n            title: 'Greengrass deployment',\n            content: \n                <Stack>\n                    <GreengrassDeploymentForm wizard={true}/>\n                </Stack>\n        }    \n    ]\n    \n    const steps3 = [\n        {\n            title: 'Pipeline',\n            content: \n                <Stack>\n                <FormField label=\"Pipeline name\" controlId=\"formFieldId1\">\n                    <Input type=\"text\" controlId=\"formFieldId1\" />\n                </FormField>\n                <FormField label=\"Pipeline type\" controlId=\"formFieldId2\">\n                    <RadioGroup onChange={onChange}\n                            items={[\n                                <RadioButton value='0' checked={stateType === '0'}>Both trining and inference and deploy in both cloud and edge</RadioButton>, \n                                <RadioButton value='1' checked={stateType === '1'}>Both training and inference and deploy only in cloud</RadioButton>,                \n                                <RadioButton value='2' checked={stateType === '2'}>Only inference and deploy in both cloud and edge</RadioButton>,                \n                                <RadioButton value='3' checked={stateType === '3'}>Only inference and deploy only in cloud</RadioButton>                \n                            ]}\n                        />\n                </FormField>\n                </Stack>\n        },\n        {\n            title: 'Model',\n            content: \n                <Stack>\n                    <ModelForm wizard={true}/>\n                </Stack>\n        },\n        {\n            title: 'Endpoint',\n            content: \n                <Stack>\n                    <EndpointForm wizard={true}/>\n                </Stack>\n        },\n        {\n            title: 'Rest API',\n            content: \n                <Stack>\n                    <RestApiForm wizard={true}/>\n                </Stack>\n        }    \n    ]\n\n    if(stateType === '0') {\n        return (\n            <BrowserRouter>\n                <Container>\n                    <Wizard steps={steps} onSubmitButtonClick={onSubmit} onCancelButtonClick={onCancel}/>\n                </Container>\n            </BrowserRouter>\n        )\n    }\n    else if(stateType === '1') {\n        return (\n            <BrowserRouter>\n                <Container>\n                    <Wizard steps={steps1} onSubmitButtonClick={onSubmit} onCancelButtonClick={onCancel}/>\n                </Container>\n            </BrowserRouter>\n        )\n    }\n    else if(stateType === '2') {\n        return (\n            <BrowserRouter>\n                <Container>\n                    <Wizard steps={steps2} onSubmitButtonClick={onSubmit} onCancelButtonClick={onCancel}/>\n                </Container>\n            </BrowserRouter>\n        )\n    }\n    else{\n        return (\n            <BrowserRouter>\n                <Container>\n                    <Wizard steps={steps3} onSubmitButtonClick={onSubmit} onCancelButtonClick={onCancel}/>\n                </Container>\n            </BrowserRouter>\n        )\n    }\n}\n\nexport default PipelineForm;","/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n  \n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  \n      http://www.apache.org/licenses/LICENSE-2.0\n  \n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.                                                                              *\n ******************************************************************************************************************** */\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport NorthStarThemeProvider from 'aws-northstar/components/NorthStarThemeProvider';\nimport AppLayout from './components/AppLayout';\nimport Dashboard from './components/Dashboard/index'\nimport Case from './components/Cases'\nimport Yolov5 from './components/Models/Yolov5'\nimport PPE from './components/Scenarios/PPE';\nimport TrainingJobForm from './components/Forms/TrainingJob';\nimport ModelForm from './components/Forms/Model';\nimport EndpointForm from './components/Forms/Endpoint';\nimport RestApiForm from './components/Forms/RestApi';\nimport GreengrassComponentForm from './components/Forms/GreengrassComponent';\nimport GreengrassDeploymentForm from './components/Forms/GreengrassDeployment';\nimport PipelineForm from './components/Forms/Pipeline';\n\nconst withLayout = (Component : any, props? : any) => {\n    return (\n        <AppLayout>\n            <Component {...props} />\n        </AppLayout>\n    )\n}\n\nconst App = () => {\n    return (\n        <NorthStarThemeProvider>\n            <Router>\n                <Switch>\n                    <Route exact path=\"/form/:name/trainingjob\">{withLayout(TrainingJobForm)}</Route>\n                    <Route exact path=\"/form/:name/model\">{withLayout(ModelForm)}</Route>\n                    <Route exact path=\"/form/:name/endpoint\">{withLayout(EndpointForm)}</Route>\n                    <Route exact path=\"/form/:name/restapi\">{withLayout(RestApiForm)}</Route>\n                    <Route exact path=\"/form/:name/component\">{withLayout(GreengrassComponentForm)}</Route>\n                    <Route exact path=\"/form/:name/deployment\">{withLayout(GreengrassDeploymentForm)}</Route>\n                    <Route exact path=\"/form/:name/pipeline\">{withLayout(PipelineForm)}</Route>\n                    <Route exact path=\"/scenarios/ppe\">{withLayout(PPE)}</Route>\n                    <Route exact path=\"/model/yolov5\">{withLayout(Yolov5)}</Route>\n                    <Route exact path=\"/case/:name/demo\">{withLayout(Case, {'activeId':'demo'})}</Route>\n                    <Route exact path=\"/case/:name/pipeline\">{withLayout(Case,{'activeId':'pipeline'})}</Route>\n                    <Route exact path=\"/case/:name/trainingjob\">{withLayout(Case,{'activeId':'trainingjob'})}</Route>\n                    <Route exact path=\"/case/:name/model\">{withLayout(Case,{'activeId':'model'})}</Route>\n                    <Route exact path=\"/case/:name/endpoint\">{withLayout(Case,{'activeId':'endpoint'})}</Route>\n                    <Route exact path=\"/case/:name/restapi\">{withLayout(Case,{'activeId':'restapi'})}</Route>\n                    <Route exact path=\"/case/:name/component\">{withLayout(Case,{'activeId':'component'})}</Route>\n                    <Route exact path=\"/case/:name/deployment\">{withLayout(Case,{'activeId':'deployment'})}</Route>\n                    <Route exact path=\"/case/:name/pipeline\">{withLayout(Case,{'activeId':'pipeline'})}</Route>\n                    <Route exact path=\"/\">{withLayout(Dashboard)}</Route>\n                </Switch>\n            </Router>\n        </NorthStarThemeProvider>\n    );\n};\n\nexport default App;\n","/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n  \n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  \n      http://www.apache.org/licenses/LICENSE-2.0\n  \n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.                                                                              *\n ******************************************************************************************************************** */\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {LabelsActionTypes, LabelsState, ImageData} from './types';\nimport {Action} from '../Actions';\n\nconst initialState: LabelsState = {\n    activeImageIndex: null,\n    activeLabelNameId: null,\n    activeLabelType: null,\n    activeLabelId: null,\n    highlightedLabelId: null,\n    imagesData: [],\n    firstLabelCreatedFlag: false,\n    labels: []\n};\n\nexport function labelsReducer(\n    state = initialState,\n    action: LabelsActionTypes\n): LabelsState {\n    switch (action.type) {\n        case Action.UPDATE_ACTIVE_IMAGE_INDEX: {\n            return {\n                ...state,\n                activeImageIndex: action.payload.activeImageIndex\n            }\n        }\n        case Action.UPDATE_ACTIVE_LABEL_NAME_ID: {\n            return {\n                ...state,\n                activeLabelNameId: action.payload.activeLabelNameId\n            }\n        }\n        case Action.UPDATE_ACTIVE_LABEL_ID: {\n            return {\n                ...state,\n                activeLabelId: action.payload.activeLabelId\n            }\n        }\n        case Action.UPDATE_HIGHLIGHTED_LABEL_ID: {\n            return {\n                ...state,\n                highlightedLabelId: action.payload.highlightedLabelId\n            }\n        }\n        case Action.UPDATE_ACTIVE_LABEL_TYPE: {\n            return {\n                ...state,\n                activeLabelType: action.payload.activeLabelType\n            }\n        }\n        case Action.UPDATE_IMAGE_DATA_BY_ID: {\n            return {\n                ...state,\n                imagesData: state.imagesData.map((imageData: ImageData) =>\n                    imageData.id === action.payload.id ? action.payload.newImageData : imageData\n                )\n            }\n        }\n        case Action.ADD_IMAGES_DATA: {\n            return {\n                ...state,\n                imagesData: state.imagesData.concat(action.payload.imageData)\n            }\n        }\n        case Action.UPDATE_IMAGES_DATA: {\n            return {\n                ...state,\n                imagesData: action.payload.imageData\n            }\n        }\n        case Action.UPDATE_LABEL_NAMES: {\n            return {\n                ...state,\n                labels: action.payload.labels\n            }\n        }\n        case Action.UPDATE_FIRST_LABEL_CREATED_FLAG: {\n            return {\n                ...state,\n                firstLabelCreatedFlag: action.payload.firstLabelCreatedFlag\n            }\n        }\n        default:\n            return state;\n    }\n}\n","import {GeneralActionTypes, GeneralState} from './types';\nimport {Action} from '../Actions';\nimport {CustomCursorStyle} from '../../data/enums/CustomCursorStyle';\nimport {ViewPointSettings} from '../../settings/ViewPointSettings';\n\nconst initialState: GeneralState = {\n    windowSize: null,\n    activePopupType: null,\n    customCursorStyle: CustomCursorStyle.DEFAULT,\n    activeContext: null,\n    preventCustomCursor: false,\n    imageDragMode: false,\n    crossHairVisible: true,\n    enablePerClassColoration: true,\n    projectData: {\n        type: null,\n        name: 'my-project-name',\n    },\n    zoom: ViewPointSettings.MIN_ZOOM\n};\n\nexport function generalReducer(\n    state = initialState,\n    action: GeneralActionTypes\n): GeneralState {\n    switch (action.type) {\n        case Action.UPDATE_WINDOW_SIZE: {\n            return {\n                ...state,\n                windowSize: action.payload.windowSize\n            }\n        }\n        case Action.UPDATE_ACTIVE_POPUP_TYPE: {\n            return {\n                ...state,\n                activePopupType: action.payload.activePopupType\n            }\n        }\n        case Action.UPDATE_CUSTOM_CURSOR_STYLE: {\n            return {\n                ...state,\n                customCursorStyle: action.payload.customCursorStyle\n            }\n        }\n        case Action.UPDATE_CONTEXT: {\n            return {\n                ...state,\n                activeContext: action.payload.activeContext\n            }\n        }\n        case Action.UPDATE_PREVENT_CUSTOM_CURSOR_STATUS: {\n            return {\n                ...state,\n                preventCustomCursor: action.payload.preventCustomCursor\n            }\n        }\n        case Action.UPDATE_IMAGE_DRAG_MODE_STATUS: {\n            return {\n                ...state,\n                imageDragMode: action.payload.imageDragMode\n            }\n        }\n        case Action.UPDATE_CROSS_HAIR_VISIBLE_STATUS: {\n            return {\n                ...state,\n                crossHairVisible: action.payload.crossHairVisible\n            }\n        }\n        case Action.UPDATE_PROJECT_DATA: {\n            return {\n                ...state,\n                projectData: action.payload.projectData\n            }\n        }\n        case Action.UPDATE_ZOOM: {\n            return {\n                ...state,\n                zoom: action.payload.zoom\n            }\n        }\n        case Action.UPDATE_ENABLE_PER_CLASS_COLORATION_STATUS: {\n            return {\n                ...state,\n                enablePerClassColoration: action.payload.enablePerClassColoration\n            }\n        }\n        default:\n            return state;\n    }\n}\n","import {AIActionTypes, AIState} from './types';\nimport {Action} from '../Actions';\n\nconst initialState: AIState = {\n    suggestedLabelList: [],\n    rejectedSuggestedLabelList: [],\n    isObjectDetectorLoaded: false,\n    isPoseDetectorLoaded: false,\n    isAIDisabled: false\n};\n\nexport function aiReducer(\n    state = initialState,\n    action: AIActionTypes\n): AIState {\n    switch (action.type) {\n        case Action.UPDATE_SUGGESTED_LABEL_LIST: {\n            return {\n                ...state,\n                suggestedLabelList: action.payload.labelList\n            }\n        }\n        case Action.UPDATE_REJECTED_SUGGESTED_LABEL_LIST: {\n            return {\n                ...state,\n                rejectedSuggestedLabelList: action.payload.labelList\n            }\n        }\n        case Action.UPDATE_OBJECT_DETECTOR_STATUS: {\n            return {\n                ...state,\n                isObjectDetectorLoaded: action.payload.isObjectDetectorLoaded\n            }\n        }\n        case Action.UPDATE_POSE_DETECTOR_STATUS: {\n            return {\n                ...state,\n                isPoseDetectorLoaded: action.payload.isPoseDetectorLoaded\n            }\n        }\n        case Action.UPDATE_DISABLED_AI_FLAG: {\n            return {\n                ...state,\n                isAIDisabled: action.payload.isAIDisabled\n            }\n        }\n        default:\n            return state;\n    }\n}\n","import {INotification, NotificationsActionType, NotificationsState} from './types';\nimport {Action} from '../Actions';\n\nconst initialState: NotificationsState = {\n    queue: []\n}\n\nexport function notificationsReducer(\n    state = initialState,\n    action: NotificationsActionType\n): NotificationsState {\n    switch (action.type) {\n        case Action.SUBMIT_NEW_NOTIFICATION: {\n            return {\n                ...state,\n                queue: [...state.queue, action.payload.notification]\n            }\n        }\n        case Action.DELETE_NOTIFICATION_BY_ID: {\n            return {\n                ...state,\n                queue: state.queue\n                    .filter((message: INotification) => message.id !== action.payload.id)\n            }\n        }\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport {labelsReducer} from './labels/reducer';\nimport {generalReducer} from './general/reducer';\nimport {aiReducer} from './ai/reducer';\nimport {notificationsReducer} from './notifications/reducer';\n\nexport const rootReducer = combineReducers({\n    general: generalReducer,\n    labels: labelsReducer,\n    ai: aiReducer,\n    notifications: notificationsReducer\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n","export class EnvironmentUtil {\n    public static isDev(): boolean {\n        return process.env.NODE_ENV === 'development';\n    }\n\n    public static isProd(): boolean {\n        return process.env.NODE_ENV === 'production';\n    }\n}","import {updateWindowSize} from \"../../store/general/actionCreators\";\nimport {ContextManager} from \"../context/ContextManager\";\nimport {store} from \"../../index\";\nimport {PlatformUtil} from \"../../utils/PlatformUtil\";\nimport {PlatformModel} from \"../../staticModels/PlatformModel\";\nimport {EventType} from \"../../data/enums/EventType\";\nimport {GeneralSelector} from \"../../store/selectors/GeneralSelector\";\nimport {EnvironmentUtil} from \"../../utils/EnvironmentUtil\";\n\nexport class AppInitializer {\n    public static inti():void {\n        AppInitializer.handleResize();\n        AppInitializer.detectDeviceParams();\n        AppInitializer.handleAccidentalPageExit();\n        window.addEventListener(EventType.RESIZE, AppInitializer.handleResize);\n        window.addEventListener(EventType.MOUSE_WHEEL, AppInitializer.disableGenericScrollZoom,{passive:false});\n        window.addEventListener(EventType.KEY_DOWN, AppInitializer.disableUnwantedKeyBoardBehaviour);\n        window.addEventListener(EventType.KEY_PRESS, AppInitializer.disableUnwantedKeyBoardBehaviour);\n        ContextManager.init();\n    }\n\n    private static handleAccidentalPageExit = () => {\n        window.onbeforeunload = (event) => {\n            const projectType = GeneralSelector.getProjectType();\n            if (projectType != null && EnvironmentUtil.isProd()) {\n                event.preventDefault();\n                event.returnValue = '';\n            }\n        }\n    };\n\n    private static handleResize = () => {\n        store.dispatch(updateWindowSize({\n            width: window.innerWidth,\n            height: window.innerHeight\n        }));\n    };\n\n    private static disableUnwantedKeyBoardBehaviour = (event: KeyboardEvent) => {\n        if (PlatformModel.isMac && event.metaKey) {\n            event.preventDefault();\n        }\n\n        if ([\"=\", \"+\", \"-\"].includes(event.key)) {\n            if (event.ctrlKey || (PlatformModel.isMac && event.metaKey)) {\n                event.preventDefault();\n            }\n        }\n    };\n\n    private static disableGenericScrollZoom = (event: MouseEvent) => {\n        if (event.ctrlKey || (PlatformModel.isMac && event.metaKey)) {\n            event.preventDefault();\n        }\n    };\n\n    private static detectDeviceParams = () => {\n        const userAgent: string = window.navigator.userAgent;\n        PlatformModel.mobileDeviceData = PlatformUtil.getMobileDeviceData(userAgent);\n        PlatformModel.isMac = PlatformUtil.isMac(userAgent);\n        PlatformModel.isSafari = PlatformUtil.isSafari(userAgent);\n        PlatformModel.isFirefox = PlatformUtil.isFirefox(userAgent);\n    };\n}","/** *******************************************************************************************************************\n  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n  \n  Licensed under the Apache License, Version 2.0 (the \"License\").\n  You may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  \n      http://www.apache.org/licenses/LICENSE-2.0\n  \n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.                                                                              *\n ******************************************************************************************************************** */\n  import React from 'react';\n  import ReactDOM from 'react-dom';\n  import App from './App';\n  import reportWebVitals from './reportWebVitals';\n  import * as serviceWorker from './serviceWorker';\n  import configureStore from './configureStore';\n  import {AppInitializer} from './logic/initializer/AppInitializer';\n  import { Provider } from 'react-redux';\n  \n  export const store = configureStore();\n  AppInitializer.inti();\n  \n  ReactDOM.render(\n      <React.StrictMode>\n          <Provider store={store}>\n              <App/>\n          </Provider>)\n      </React.StrictMode>,\n      document.getElementById('root')\n  );\n  \n  // If you want to start measuring performance in your app, pass a function\n  // to log results (for example: reportWebVitals(console.log))\n  // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n  reportWebVitals();\n  serviceWorker.unregister();\n","import { createStore } from 'redux';\nimport { rootReducer } from './store';\n\nexport default function configureStore() {\n    return createStore(\n        rootReducer,\n        // @ts-ignore\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    );\n}"],"sourceRoot":""}